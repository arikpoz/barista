// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe.proto

package caffe;

public final class Caffe {
  private Caffe() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface BlobProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.BlobProto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    boolean hasNum();
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    int getNum();

    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    boolean hasChannels();
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    int getChannels();

    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    int getHeight();

    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    int getWidth();

    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getDataList();
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    int getDataCount();
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    float getData(int index);

    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    java.util.List<java.lang.Float> getDiffList();
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    int getDiffCount();
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    float getDiff(int index);
  }
  /**
   * Protobuf type {@code caffe.BlobProto}
   */
  public static final class BlobProto extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.BlobProto)
      BlobProtoOrBuilder {
    // Use BlobProto.newBuilder() to construct.
    private BlobProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlobProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlobProto defaultInstance;
    public static BlobProto getDefaultInstance() {
      return defaultInstance;
    }

    public BlobProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlobProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              num_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              channels_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              height_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              width_ = input.readInt32();
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              data_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                data_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                data_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                diff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              diff_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                diff_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                diff_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = java.util.Collections.unmodifiableList(data_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          diff_ = java.util.Collections.unmodifiableList(diff_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_BlobProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_BlobProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.BlobProto.class, caffe.Caffe.BlobProto.Builder.class);
    }

    public static com.google.protobuf.Parser<BlobProto> PARSER =
        new com.google.protobuf.AbstractParser<BlobProto>() {
      public BlobProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlobProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NUM_FIELD_NUMBER = 1;
    private int num_;
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    public boolean hasNum() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 num = 1 [default = 0];</code>
     */
    public int getNum() {
      return num_;
    }

    public static final int CHANNELS_FIELD_NUMBER = 2;
    private int channels_;
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 channels = 2 [default = 0];</code>
     */
    public int getChannels() {
      return channels_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 3;
    private int height_;
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 height = 3 [default = 0];</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 width = 4 [default = 0];</code>
     */
    public int getWidth() {
      return width_;
    }

    public static final int DATA_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> data_;
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getDataList() {
      return data_;
    }
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <code>repeated float data = 5 [packed = true];</code>
     */
    public float getData(int index) {
      return data_.get(index);
    }
    private int dataMemoizedSerializedSize = -1;

    public static final int DIFF_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> diff_;
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public java.util.List<java.lang.Float>
        getDiffList() {
      return diff_;
    }
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public int getDiffCount() {
      return diff_.size();
    }
    /**
     * <code>repeated float diff = 6 [packed = true];</code>
     */
    public float getDiff(int index) {
      return diff_.get(index);
    }
    private int diffMemoizedSerializedSize = -1;

    private void initFields() {
      num_ = 0;
      channels_ = 0;
      height_ = 0;
      width_ = 0;
      data_ = java.util.Collections.emptyList();
      diff_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, num_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, width_);
      }
      if (getDataList().size() > 0) {
        output.writeRawVarint32(42);
        output.writeRawVarint32(dataMemoizedSerializedSize);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeFloatNoTag(data_.get(i));
      }
      if (getDiffList().size() > 0) {
        output.writeRawVarint32(50);
        output.writeRawVarint32(diffMemoizedSerializedSize);
      }
      for (int i = 0; i < diff_.size(); i++) {
        output.writeFloatNoTag(diff_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, num_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, width_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDataList().size();
        size += dataSize;
        if (!getDataList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        dataMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDiffList().size();
        size += dataSize;
        if (!getDiffList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        diffMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.BlobProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.BlobProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.BlobProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.BlobProto)
        caffe.Caffe.BlobProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_BlobProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_BlobProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.BlobProto.class, caffe.Caffe.BlobProto.Builder.class);
      }

      // Construct using caffe.Caffe.BlobProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        num_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        diff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_BlobProto_descriptor;
      }

      public caffe.Caffe.BlobProto getDefaultInstanceForType() {
        return caffe.Caffe.BlobProto.getDefaultInstance();
      }

      public caffe.Caffe.BlobProto build() {
        caffe.Caffe.BlobProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.BlobProto buildPartial() {
        caffe.Caffe.BlobProto result = new caffe.Caffe.BlobProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.num_ = num_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.width_ = width_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.data_ = data_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          diff_ = java.util.Collections.unmodifiableList(diff_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.diff_ = diff_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.BlobProto) {
          return mergeFrom((caffe.Caffe.BlobProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.BlobProto other) {
        if (other == caffe.Caffe.BlobProto.getDefaultInstance()) return this;
        if (other.hasNum()) {
          setNum(other.getNum());
        }
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
        if (!other.diff_.isEmpty()) {
          if (diff_.isEmpty()) {
            diff_ = other.diff_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDiffIsMutable();
            diff_.addAll(other.diff_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.BlobProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.BlobProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int num_ ;
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public boolean hasNum() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public int getNum() {
        return num_;
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public Builder setNum(int value) {
        bitField0_ |= 0x00000001;
        num_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 num = 1 [default = 0];</code>
       */
      public Builder clearNum() {
        bitField0_ = (bitField0_ & ~0x00000001);
        num_ = 0;
        onChanged();
        return this;
      }

      private int channels_ ;
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000002;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channels = 2 [default = 0];</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000002);
        channels_ = 0;
        onChanged();
        return this;
      }

      private int height_ ;
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000004;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 3 [default = 0];</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        onChanged();
        return this;
      }

      private int width_ ;
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000008;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 4 [default = 0];</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        width_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> data_ = java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          data_ = new java.util.ArrayList<java.lang.Float>(data_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getDataList() {
        return java.util.Collections.unmodifiableList(data_);
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public int getDataCount() {
        return data_.size();
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public float getData(int index) {
        return data_.get(index);
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder setData(
          int index, float value) {
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder addData(float value) {
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, data_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float data = 5 [packed = true];</code>
       */
      public Builder clearData() {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> diff_ = java.util.Collections.emptyList();
      private void ensureDiffIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          diff_ = new java.util.ArrayList<java.lang.Float>(diff_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public java.util.List<java.lang.Float>
          getDiffList() {
        return java.util.Collections.unmodifiableList(diff_);
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public int getDiffCount() {
        return diff_.size();
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public float getDiff(int index) {
        return diff_.get(index);
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder setDiff(
          int index, float value) {
        ensureDiffIsMutable();
        diff_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder addDiff(float value) {
        ensureDiffIsMutable();
        diff_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder addAllDiff(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDiffIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, diff_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float diff = 6 [packed = true];</code>
       */
      public Builder clearDiff() {
        diff_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.BlobProto)
    }

    static {
      defaultInstance = new BlobProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.BlobProto)
  }

  public interface BlobProtoVectorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.BlobProtoVector)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    int getBlobsCount();
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code caffe.BlobProtoVector}
   *
   * <pre>
   * The BlobProtoVector is simply a way to pass multiple blobproto instances
   * around.
   * </pre>
   */
  public static final class BlobProtoVector extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.BlobProtoVector)
      BlobProtoVectorOrBuilder {
    // Use BlobProtoVector.newBuilder() to construct.
    private BlobProtoVector(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlobProtoVector(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlobProtoVector defaultInstance;
    public static BlobProtoVector getDefaultInstance() {
      return defaultInstance;
    }

    public BlobProtoVector getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlobProtoVector(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              blobs_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_BlobProtoVector_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_BlobProtoVector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.BlobProtoVector.class, caffe.Caffe.BlobProtoVector.Builder.class);
    }

    public static com.google.protobuf.Parser<BlobProtoVector> PARSER =
        new com.google.protobuf.AbstractParser<BlobProtoVector>() {
      public BlobProtoVector parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlobProtoVector(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlobProtoVector> getParserForType() {
      return PARSER;
    }

    public static final int BLOBS_FIELD_NUMBER = 1;
    private java.util.List<caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 1;</code>
     */
    public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    private void initFields() {
      blobs_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(1, blobs_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, blobs_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.BlobProtoVector parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.BlobProtoVector parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.BlobProtoVector prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.BlobProtoVector}
     *
     * <pre>
     * The BlobProtoVector is simply a way to pass multiple blobproto instances
     * around.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.BlobProtoVector)
        caffe.Caffe.BlobProtoVectorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_BlobProtoVector_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_BlobProtoVector_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.BlobProtoVector.class, caffe.Caffe.BlobProtoVector.Builder.class);
      }

      // Construct using caffe.Caffe.BlobProtoVector.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getBlobsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_BlobProtoVector_descriptor;
      }

      public caffe.Caffe.BlobProtoVector getDefaultInstanceForType() {
        return caffe.Caffe.BlobProtoVector.getDefaultInstance();
      }

      public caffe.Caffe.BlobProtoVector build() {
        caffe.Caffe.BlobProtoVector result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.BlobProtoVector buildPartial() {
        caffe.Caffe.BlobProtoVector result = new caffe.Caffe.BlobProtoVector(this);
        int from_bitField0_ = bitField0_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.BlobProtoVector) {
          return mergeFrom((caffe.Caffe.BlobProtoVector)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.BlobProtoVector other) {
        if (other == caffe.Caffe.BlobProtoVector.getDefaultInstance()) return this;
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.BlobProtoVector parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.BlobProtoVector) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 1;</code>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.BlobProtoVector)
    }

    static {
      defaultInstance = new BlobProtoVector(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.BlobProtoVector)
  }

  public interface DatumOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.Datum)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 channels = 1;</code>
     */
    boolean hasChannels();
    /**
     * <code>optional int32 channels = 1;</code>
     */
    int getChannels();

    /**
     * <code>optional int32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional int32 height = 2;</code>
     */
    int getHeight();

    /**
     * <code>optional int32 width = 3;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional int32 width = 3;</code>
     */
    int getWidth();

    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    boolean hasData();
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    com.google.protobuf.ByteString getData();

    /**
     * <code>optional int32 label = 5;</code>
     */
    boolean hasLabel();
    /**
     * <code>optional int32 label = 5;</code>
     */
    int getLabel();

    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    java.util.List<java.lang.Float> getFloatDataList();
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    int getFloatDataCount();
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    float getFloatData(int index);
  }
  /**
   * Protobuf type {@code caffe.Datum}
   */
  public static final class Datum extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.Datum)
      DatumOrBuilder {
    // Use Datum.newBuilder() to construct.
    private Datum(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Datum(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Datum defaultInstance;
    public static Datum getDefaultInstance() {
      return defaultInstance;
    }

    public Datum getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Datum(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              channels_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              width_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              data_ = input.readBytes();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              label_ = input.readInt32();
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              floatData_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                floatData_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                floatData_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_Datum_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_Datum_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.Datum.class, caffe.Caffe.Datum.Builder.class);
    }

    public static com.google.protobuf.Parser<Datum> PARSER =
        new com.google.protobuf.AbstractParser<Datum>() {
      public Datum parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Datum(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Datum> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHANNELS_FIELD_NUMBER = 1;
    private int channels_;
    /**
     * <code>optional int32 channels = 1;</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 channels = 1;</code>
     */
    public int getChannels() {
      return channels_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>optional int32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int WIDTH_FIELD_NUMBER = 3;
    private int width_;
    /**
     * <code>optional int32 width = 3;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 width = 3;</code>
     */
    public int getWidth() {
      return width_;
    }

    public static final int DATA_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bytes data = 4;</code>
     *
     * <pre>
     * the actual image data, in bytes
     * </pre>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    public static final int LABEL_FIELD_NUMBER = 5;
    private int label_;
    /**
     * <code>optional int32 label = 5;</code>
     */
    public boolean hasLabel() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 label = 5;</code>
     */
    public int getLabel() {
      return label_;
    }

    public static final int FLOAT_DATA_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> floatData_;
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getFloatDataList() {
      return floatData_;
    }
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public int getFloatDataCount() {
      return floatData_.size();
    }
    /**
     * <code>repeated float float_data = 6;</code>
     *
     * <pre>
     * Optionally, the datum could also hold float data.
     * </pre>
     */
    public float getFloatData(int index) {
      return floatData_.get(index);
    }

    private void initFields() {
      channels_ = 0;
      height_ = 0;
      width_ = 0;
      data_ = com.google.protobuf.ByteString.EMPTY;
      label_ = 0;
      floatData_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, channels_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, label_);
      }
      for (int i = 0; i < floatData_.size(); i++) {
        output.writeFloat(6, floatData_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, channels_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, height_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, width_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, data_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, label_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFloatDataList().size();
        size += dataSize;
        size += 1 * getFloatDataList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.Datum parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.Datum parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.Datum parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.Datum parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.Datum prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.Datum}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.Datum)
        caffe.Caffe.DatumOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_Datum_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_Datum_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.Datum.class, caffe.Caffe.Datum.Builder.class);
      }

      // Construct using caffe.Caffe.Datum.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        label_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_Datum_descriptor;
      }

      public caffe.Caffe.Datum getDefaultInstanceForType() {
        return caffe.Caffe.Datum.getDefaultInstance();
      }

      public caffe.Caffe.Datum build() {
        caffe.Caffe.Datum result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.Datum buildPartial() {
        caffe.Caffe.Datum result = new caffe.Caffe.Datum(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.data_ = data_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.label_ = label_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = java.util.Collections.unmodifiableList(floatData_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.floatData_ = floatData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.Datum) {
          return mergeFrom((caffe.Caffe.Datum)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.Datum other) {
        if (other == caffe.Caffe.Datum.getDefaultInstance()) return this;
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (other.hasLabel()) {
          setLabel(other.getLabel());
        }
        if (!other.floatData_.isEmpty()) {
          if (floatData_.isEmpty()) {
            floatData_ = other.floatData_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFloatDataIsMutable();
            floatData_.addAll(other.floatData_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.Datum parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.Datum) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int channels_ ;
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000001;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 channels = 1;</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channels_ = 0;
        onChanged();
        return this;
      }

      private int height_ ;
      /**
       * <code>optional int32 height = 2;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 height = 2;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        onChanged();
        return this;
      }

      private int width_ ;
      /**
       * <code>optional int32 width = 3;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000004;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 width = 3;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes data = 4;</code>
       *
       * <pre>
       * the actual image data, in bytes
       * </pre>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000008);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      private int label_ ;
      /**
       * <code>optional int32 label = 5;</code>
       */
      public boolean hasLabel() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public int getLabel() {
        return label_;
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public Builder setLabel(int value) {
        bitField0_ |= 0x00000010;
        label_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 label = 5;</code>
       */
      public Builder clearLabel() {
        bitField0_ = (bitField0_ & ~0x00000010);
        label_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> floatData_ = java.util.Collections.emptyList();
      private void ensureFloatDataIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          floatData_ = new java.util.ArrayList<java.lang.Float>(floatData_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getFloatDataList() {
        return java.util.Collections.unmodifiableList(floatData_);
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public int getFloatDataCount() {
        return floatData_.size();
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public float getFloatData(int index) {
        return floatData_.get(index);
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder setFloatData(
          int index, float value) {
        ensureFloatDataIsMutable();
        floatData_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder addFloatData(float value) {
        ensureFloatDataIsMutable();
        floatData_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder addAllFloatData(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFloatDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, floatData_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float float_data = 6;</code>
       *
       * <pre>
       * Optionally, the datum could also hold float data.
       * </pre>
       */
      public Builder clearFloatData() {
        floatData_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.Datum)
    }

    static {
      defaultInstance = new Datum(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.Datum)
  }

  public interface FillerParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.FillerParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    float getValue();

    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    boolean hasMin();
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    float getMin();

    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    boolean hasMax();
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    float getMax();

    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    boolean hasMean();
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    float getMean();

    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    boolean hasStd();
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    float getStd();

    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero input weights for a given output in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    boolean hasSparse();
    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero input weights for a given output in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    int getSparse();
  }
  /**
   * Protobuf type {@code caffe.FillerParameter}
   */
  public static final class FillerParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.FillerParameter)
      FillerParameterOrBuilder {
    // Use FillerParameter.newBuilder() to construct.
    private FillerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FillerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FillerParameter defaultInstance;
    public static FillerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public FillerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FillerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              type_ = bs;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              value_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              min_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              max_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              mean_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              std_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              sparse_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_FillerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_FillerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.FillerParameter.class, caffe.Caffe.FillerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<FillerParameter> PARSER =
        new com.google.protobuf.AbstractParser<FillerParameter>() {
      public FillerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FillerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FillerParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 1 [default = "constant"];</code>
     *
     * <pre>
     * The filler type.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private float value_;
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float value = 2 [default = 0];</code>
     *
     * <pre>
     * the value in constant filler
     * </pre>
     */
    public float getValue() {
      return value_;
    }

    public static final int MIN_FIELD_NUMBER = 3;
    private float min_;
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    public boolean hasMin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float min = 3 [default = 0];</code>
     *
     * <pre>
     * the min value in uniform filler
     * </pre>
     */
    public float getMin() {
      return min_;
    }

    public static final int MAX_FIELD_NUMBER = 4;
    private float max_;
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    public boolean hasMax() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float max = 4 [default = 1];</code>
     *
     * <pre>
     * the max value in uniform filler
     * </pre>
     */
    public float getMax() {
      return max_;
    }

    public static final int MEAN_FIELD_NUMBER = 5;
    private float mean_;
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    public boolean hasMean() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float mean = 5 [default = 0];</code>
     *
     * <pre>
     * the mean value in Gaussian filler
     * </pre>
     */
    public float getMean() {
      return mean_;
    }

    public static final int STD_FIELD_NUMBER = 6;
    private float std_;
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    public boolean hasStd() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float std = 6 [default = 1];</code>
     *
     * <pre>
     * the std value in Gaussian filler
     * </pre>
     */
    public float getStd() {
      return std_;
    }

    public static final int SPARSE_FIELD_NUMBER = 7;
    private int sparse_;
    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero input weights for a given output in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    public boolean hasSparse() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 sparse = 7 [default = -1];</code>
     *
     * <pre>
     * The expected number of non-zero input weights for a given output in
     * Gaussian filler -- the default -1 means don't perform sparsification.
     * </pre>
     */
    public int getSparse() {
      return sparse_;
    }

    private void initFields() {
      type_ = "constant";
      value_ = 0F;
      min_ = 0F;
      max_ = 1F;
      mean_ = 0F;
      std_ = 1F;
      sparse_ = -1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, min_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, max_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, mean_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, std_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, sparse_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, value_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, min_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, max_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, mean_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, std_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sparse_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.FillerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.FillerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.FillerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.FillerParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.FillerParameter)
        caffe.Caffe.FillerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_FillerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_FillerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.FillerParameter.class, caffe.Caffe.FillerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.FillerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = "constant";
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        min_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        max_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        mean_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        std_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000020);
        sparse_ = -1;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_FillerParameter_descriptor;
      }

      public caffe.Caffe.FillerParameter getDefaultInstanceForType() {
        return caffe.Caffe.FillerParameter.getDefaultInstance();
      }

      public caffe.Caffe.FillerParameter build() {
        caffe.Caffe.FillerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.FillerParameter buildPartial() {
        caffe.Caffe.FillerParameter result = new caffe.Caffe.FillerParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.min_ = min_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.max_ = max_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mean_ = mean_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.std_ = std_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.sparse_ = sparse_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.FillerParameter) {
          return mergeFrom((caffe.Caffe.FillerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.FillerParameter other) {
        if (other == caffe.Caffe.FillerParameter.getDefaultInstance()) return this;
        if (other.hasType()) {
          bitField0_ |= 0x00000001;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasMin()) {
          setMin(other.getMin());
        }
        if (other.hasMax()) {
          setMax(other.getMax());
        }
        if (other.hasMean()) {
          setMean(other.getMean());
        }
        if (other.hasStd()) {
          setStd(other.getStd());
        }
        if (other.hasSparse()) {
          setSparse(other.getSparse());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.FillerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.FillerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object type_ = "constant";
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 1 [default = "constant"];</code>
       *
       * <pre>
       * The filler type.
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }

      private float value_ ;
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public float getValue() {
        return value_;
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public Builder setValue(float value) {
        bitField0_ |= 0x00000002;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float value = 2 [default = 0];</code>
       *
       * <pre>
       * the value in constant filler
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0F;
        onChanged();
        return this;
      }

      private float min_ ;
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public boolean hasMin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public float getMin() {
        return min_;
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public Builder setMin(float value) {
        bitField0_ |= 0x00000004;
        min_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float min = 3 [default = 0];</code>
       *
       * <pre>
       * the min value in uniform filler
       * </pre>
       */
      public Builder clearMin() {
        bitField0_ = (bitField0_ & ~0x00000004);
        min_ = 0F;
        onChanged();
        return this;
      }

      private float max_ = 1F;
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public boolean hasMax() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public float getMax() {
        return max_;
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public Builder setMax(float value) {
        bitField0_ |= 0x00000008;
        max_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float max = 4 [default = 1];</code>
       *
       * <pre>
       * the max value in uniform filler
       * </pre>
       */
      public Builder clearMax() {
        bitField0_ = (bitField0_ & ~0x00000008);
        max_ = 1F;
        onChanged();
        return this;
      }

      private float mean_ ;
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public boolean hasMean() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public float getMean() {
        return mean_;
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public Builder setMean(float value) {
        bitField0_ |= 0x00000010;
        mean_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float mean = 5 [default = 0];</code>
       *
       * <pre>
       * the mean value in Gaussian filler
       * </pre>
       */
      public Builder clearMean() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mean_ = 0F;
        onChanged();
        return this;
      }

      private float std_ = 1F;
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public boolean hasStd() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public float getStd() {
        return std_;
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public Builder setStd(float value) {
        bitField0_ |= 0x00000020;
        std_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float std = 6 [default = 1];</code>
       *
       * <pre>
       * the std value in Gaussian filler
       * </pre>
       */
      public Builder clearStd() {
        bitField0_ = (bitField0_ & ~0x00000020);
        std_ = 1F;
        onChanged();
        return this;
      }

      private int sparse_ = -1;
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero input weights for a given output in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public boolean hasSparse() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero input weights for a given output in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public int getSparse() {
        return sparse_;
      }
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero input weights for a given output in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public Builder setSparse(int value) {
        bitField0_ |= 0x00000040;
        sparse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 sparse = 7 [default = -1];</code>
       *
       * <pre>
       * The expected number of non-zero input weights for a given output in
       * Gaussian filler -- the default -1 means don't perform sparsification.
       * </pre>
       */
      public Builder clearSparse() {
        bitField0_ = (bitField0_ & ~0x00000040);
        sparse_ = -1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.FillerParameter)
    }

    static {
      defaultInstance = new FillerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.FillerParameter)
  }

  public interface NetParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.NetParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    java.util.List<caffe.Caffe.LayerParameter> 
        getLayersList();
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    caffe.Caffe.LayerParameter getLayers(int index);
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    int getLayersCount();
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.LayerParameterOrBuilder> 
        getLayersOrBuilderList();
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    caffe.Caffe.LayerParameterOrBuilder getLayersOrBuilder(
        int index);

    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getInputList();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    int getInputCount();
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    java.lang.String getInput(int index);
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    com.google.protobuf.ByteString
        getInputBytes(int index);

    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    java.util.List<java.lang.Integer> getInputDimList();
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    int getInputDimCount();
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    int getInputDim(int index);

    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    boolean hasForceBackward();
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    boolean getForceBackward();
  }
  /**
   * Protobuf type {@code caffe.NetParameter}
   */
  public static final class NetParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.NetParameter)
      NetParameterOrBuilder {
    // Use NetParameter.newBuilder() to construct.
    private NetParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private NetParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final NetParameter defaultInstance;
    public static NetParameter getDefaultInstance() {
      return defaultInstance;
    }

    public NetParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private NetParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                layers_ = new java.util.ArrayList<caffe.Caffe.LayerParameter>();
                mutable_bitField0_ |= 0x00000002;
              }
              layers_.add(input.readMessage(caffe.Caffe.LayerParameter.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                input_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              input_.add(bs);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                inputDim_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              inputDim_.add(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                inputDim_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                inputDim_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              forceBackward_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          layers_ = java.util.Collections.unmodifiableList(layers_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = input_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = java.util.Collections.unmodifiableList(inputDim_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_NetParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_NetParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.NetParameter.class, caffe.Caffe.NetParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<NetParameter> PARSER =
        new com.google.protobuf.AbstractParser<NetParameter>() {
      public NetParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NetParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<NetParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * consider giving the network a name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LAYERS_FIELD_NUMBER = 2;
    private java.util.List<caffe.Caffe.LayerParameter> layers_;
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public java.util.List<caffe.Caffe.LayerParameter> getLayersList() {
      return layers_;
    }
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.LayerParameterOrBuilder> 
        getLayersOrBuilderList() {
      return layers_;
    }
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public int getLayersCount() {
      return layers_.size();
    }
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public caffe.Caffe.LayerParameter getLayers(int index) {
      return layers_.get(index);
    }
    /**
     * <code>repeated .caffe.LayerParameter layers = 2;</code>
     *
     * <pre>
     * a bunch of layers.
     * </pre>
     */
    public caffe.Caffe.LayerParameterOrBuilder getLayersOrBuilder(
        int index) {
      return layers_.get(index);
    }

    public static final int INPUT_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList input_;
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getInputList() {
      return input_;
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public int getInputCount() {
      return input_.size();
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public java.lang.String getInput(int index) {
      return input_.get(index);
    }
    /**
     * <code>repeated string input = 3;</code>
     *
     * <pre>
     * The input blobs to the network.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInputBytes(int index) {
      return input_.getByteString(index);
    }

    public static final int INPUT_DIM_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> inputDim_;
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getInputDimList() {
      return inputDim_;
    }
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public int getInputDimCount() {
      return inputDim_.size();
    }
    /**
     * <code>repeated int32 input_dim = 4;</code>
     *
     * <pre>
     * The dim of the input blobs. For each input blob there should be four
     * values specifying the num, channels, height and width of the input blob.
     * Thus, there should be a total of (4 * #input) numbers.
     * </pre>
     */
    public int getInputDim(int index) {
      return inputDim_.get(index);
    }

    public static final int FORCE_BACKWARD_FIELD_NUMBER = 5;
    private boolean forceBackward_;
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    public boolean hasForceBackward() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool force_backward = 5 [default = false];</code>
     *
     * <pre>
     * Whether the network will force every layer to carry out backward operation.
     * If set False, then whether to carry out backward is determined
     * automatically according to the net structure and learning rates.
     * </pre>
     */
    public boolean getForceBackward() {
      return forceBackward_;
    }

    private void initFields() {
      name_ = "";
      layers_ = java.util.Collections.emptyList();
      input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      inputDim_ = java.util.Collections.emptyList();
      forceBackward_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      for (int i = 0; i < layers_.size(); i++) {
        output.writeMessage(2, layers_.get(i));
      }
      for (int i = 0; i < input_.size(); i++) {
        output.writeBytes(3, input_.getByteString(i));
      }
      for (int i = 0; i < inputDim_.size(); i++) {
        output.writeInt32(4, inputDim_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(5, forceBackward_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      for (int i = 0; i < layers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, layers_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < input_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(input_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getInputList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < inputDim_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(inputDim_.get(i));
        }
        size += dataSize;
        size += 1 * getInputDimList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, forceBackward_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.NetParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.NetParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.NetParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.NetParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.NetParameter)
        caffe.Caffe.NetParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_NetParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_NetParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.NetParameter.class, caffe.Caffe.NetParameter.Builder.class);
      }

      // Construct using caffe.Caffe.NetParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLayersFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (layersBuilder_ == null) {
          layers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          layersBuilder_.clear();
        }
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        inputDim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        forceBackward_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_NetParameter_descriptor;
      }

      public caffe.Caffe.NetParameter getDefaultInstanceForType() {
        return caffe.Caffe.NetParameter.getDefaultInstance();
      }

      public caffe.Caffe.NetParameter build() {
        caffe.Caffe.NetParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.NetParameter buildPartial() {
        caffe.Caffe.NetParameter result = new caffe.Caffe.NetParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (layersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            layers_ = java.util.Collections.unmodifiableList(layers_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.layers_ = layers_;
        } else {
          result.layers_ = layersBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = input_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.input_ = input_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = java.util.Collections.unmodifiableList(inputDim_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.inputDim_ = inputDim_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000002;
        }
        result.forceBackward_ = forceBackward_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.NetParameter) {
          return mergeFrom((caffe.Caffe.NetParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.NetParameter other) {
        if (other == caffe.Caffe.NetParameter.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (layersBuilder_ == null) {
          if (!other.layers_.isEmpty()) {
            if (layers_.isEmpty()) {
              layers_ = other.layers_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureLayersIsMutable();
              layers_.addAll(other.layers_);
            }
            onChanged();
          }
        } else {
          if (!other.layers_.isEmpty()) {
            if (layersBuilder_.isEmpty()) {
              layersBuilder_.dispose();
              layersBuilder_ = null;
              layers_ = other.layers_;
              bitField0_ = (bitField0_ & ~0x00000002);
              layersBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getLayersFieldBuilder() : null;
            } else {
              layersBuilder_.addAllMessages(other.layers_);
            }
          }
        }
        if (!other.input_.isEmpty()) {
          if (input_.isEmpty()) {
            input_ = other.input_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInputIsMutable();
            input_.addAll(other.input_);
          }
          onChanged();
        }
        if (!other.inputDim_.isEmpty()) {
          if (inputDim_.isEmpty()) {
            inputDim_ = other.inputDim_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureInputDimIsMutable();
            inputDim_.addAll(other.inputDim_);
          }
          onChanged();
        }
        if (other.hasForceBackward()) {
          setForceBackward(other.getForceBackward());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.NetParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.NetParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * consider giving the network a name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<caffe.Caffe.LayerParameter> layers_ =
        java.util.Collections.emptyList();
      private void ensureLayersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          layers_ = new java.util.ArrayList<caffe.Caffe.LayerParameter>(layers_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.LayerParameter, caffe.Caffe.LayerParameter.Builder, caffe.Caffe.LayerParameterOrBuilder> layersBuilder_;

      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public java.util.List<caffe.Caffe.LayerParameter> getLayersList() {
        if (layersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(layers_);
        } else {
          return layersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public int getLayersCount() {
        if (layersBuilder_ == null) {
          return layers_.size();
        } else {
          return layersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public caffe.Caffe.LayerParameter getLayers(int index) {
        if (layersBuilder_ == null) {
          return layers_.get(index);
        } else {
          return layersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder setLayers(
          int index, caffe.Caffe.LayerParameter value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.set(index, value);
          onChanged();
        } else {
          layersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder setLayers(
          int index, caffe.Caffe.LayerParameter.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.set(index, builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(caffe.Caffe.LayerParameter value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.add(value);
          onChanged();
        } else {
          layersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(
          int index, caffe.Caffe.LayerParameter value) {
        if (layersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLayersIsMutable();
          layers_.add(index, value);
          onChanged();
        } else {
          layersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(
          caffe.Caffe.LayerParameter.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.add(builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addLayers(
          int index, caffe.Caffe.LayerParameter.Builder builderForValue) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.add(index, builderForValue.build());
          onChanged();
        } else {
          layersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder addAllLayers(
          java.lang.Iterable<? extends caffe.Caffe.LayerParameter> values) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, layers_);
          onChanged();
        } else {
          layersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder clearLayers() {
        if (layersBuilder_ == null) {
          layers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          layersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public Builder removeLayers(int index) {
        if (layersBuilder_ == null) {
          ensureLayersIsMutable();
          layers_.remove(index);
          onChanged();
        } else {
          layersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public caffe.Caffe.LayerParameter.Builder getLayersBuilder(
          int index) {
        return getLayersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public caffe.Caffe.LayerParameterOrBuilder getLayersOrBuilder(
          int index) {
        if (layersBuilder_ == null) {
          return layers_.get(index);  } else {
          return layersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.LayerParameterOrBuilder> 
           getLayersOrBuilderList() {
        if (layersBuilder_ != null) {
          return layersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(layers_);
        }
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public caffe.Caffe.LayerParameter.Builder addLayersBuilder() {
        return getLayersFieldBuilder().addBuilder(
            caffe.Caffe.LayerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public caffe.Caffe.LayerParameter.Builder addLayersBuilder(
          int index) {
        return getLayersFieldBuilder().addBuilder(
            index, caffe.Caffe.LayerParameter.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.LayerParameter layers = 2;</code>
       *
       * <pre>
       * a bunch of layers.
       * </pre>
       */
      public java.util.List<caffe.Caffe.LayerParameter.Builder> 
           getLayersBuilderList() {
        return getLayersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.LayerParameter, caffe.Caffe.LayerParameter.Builder, caffe.Caffe.LayerParameterOrBuilder> 
          getLayersFieldBuilder() {
        if (layersBuilder_ == null) {
          layersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.LayerParameter, caffe.Caffe.LayerParameter.Builder, caffe.Caffe.LayerParameterOrBuilder>(
                  layers_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          layers_ = null;
        }
        return layersBuilder_;
      }

      private com.google.protobuf.LazyStringList input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInputIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          input_ = new com.google.protobuf.LazyStringArrayList(input_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getInputList() {
        return input_.getUnmodifiableView();
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public int getInputCount() {
        return input_.size();
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public java.lang.String getInput(int index) {
        return input_.get(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInputBytes(int index) {
        return input_.getByteString(index);
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder setInput(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder addInput(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder addAllInput(
          java.lang.Iterable<java.lang.String> values) {
        ensureInputIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, input_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder clearInput() {
        input_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string input = 3;</code>
       *
       * <pre>
       * The input blobs to the network.
       * </pre>
       */
      public Builder addInputBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInputIsMutable();
        input_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> inputDim_ = java.util.Collections.emptyList();
      private void ensureInputDimIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          inputDim_ = new java.util.ArrayList<java.lang.Integer>(inputDim_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getInputDimList() {
        return java.util.Collections.unmodifiableList(inputDim_);
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public int getInputDimCount() {
        return inputDim_.size();
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public int getInputDim(int index) {
        return inputDim_.get(index);
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder setInputDim(
          int index, int value) {
        ensureInputDimIsMutable();
        inputDim_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder addInputDim(int value) {
        ensureInputDimIsMutable();
        inputDim_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder addAllInputDim(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInputDimIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, inputDim_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 input_dim = 4;</code>
       *
       * <pre>
       * The dim of the input blobs. For each input blob there should be four
       * values specifying the num, channels, height and width of the input blob.
       * Thus, there should be a total of (4 * #input) numbers.
       * </pre>
       */
      public Builder clearInputDim() {
        inputDim_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private boolean forceBackward_ ;
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public boolean hasForceBackward() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public boolean getForceBackward() {
        return forceBackward_;
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public Builder setForceBackward(boolean value) {
        bitField0_ |= 0x00000010;
        forceBackward_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool force_backward = 5 [default = false];</code>
       *
       * <pre>
       * Whether the network will force every layer to carry out backward operation.
       * If set False, then whether to carry out backward is determined
       * automatically according to the net structure and learning rates.
       * </pre>
       */
      public Builder clearForceBackward() {
        bitField0_ = (bitField0_ & ~0x00000010);
        forceBackward_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.NetParameter)
    }

    static {
      defaultInstance = new NetParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.NetParameter)
  }

  public interface SolverParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.SolverParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    boolean hasTrainNet();
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    java.lang.String getTrainNet();
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTrainNetBytes();

    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    boolean hasTestNet();
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    java.lang.String getTestNet();
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTestNetBytes();

    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    boolean hasTestIter();
    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    int getTestIter();

    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    boolean hasTestInterval();
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    int getTestInterval();

    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    boolean hasTestComputeLoss();
    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    boolean getTestComputeLoss();

    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    boolean hasBaseLr();
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    float getBaseLr();

    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    boolean hasDisplay();
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    int getDisplay();

    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    boolean hasMaxIter();
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    int getMaxIter();

    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    boolean hasLrPolicy();
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    java.lang.String getLrPolicy();
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLrPolicyBytes();

    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    boolean hasGamma();
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    float getGamma();

    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    boolean hasPower();
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    float getPower();

    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    boolean hasMomentum();
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    float getMomentum();

    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    boolean hasWeightDecay();
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    float getWeightDecay();

    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    boolean hasStepsize();
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    int getStepsize();

    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    boolean hasSnapshot();
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    int getSnapshot();

    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    boolean hasSnapshotPrefix();
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    java.lang.String getSnapshotPrefix();
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSnapshotPrefixBytes();

    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    boolean hasSnapshotDiff();
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    boolean getSnapshotDiff();

    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    boolean hasSolverMode();
    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    caffe.Caffe.SolverParameter.SolverMode getSolverMode();

    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    boolean hasDeviceId();
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    int getDeviceId();

    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    boolean hasRandomSeed();
    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    long getRandomSeed();
  }
  /**
   * Protobuf type {@code caffe.SolverParameter}
   */
  public static final class SolverParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.SolverParameter)
      SolverParameterOrBuilder {
    // Use SolverParameter.newBuilder() to construct.
    private SolverParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SolverParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SolverParameter defaultInstance;
    public static SolverParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SolverParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SolverParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              trainNet_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              testNet_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              testIter_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              testInterval_ = input.readInt32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000020;
              baseLr_ = input.readFloat();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000040;
              display_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000080;
              maxIter_ = input.readInt32();
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000100;
              lrPolicy_ = bs;
              break;
            }
            case 77: {
              bitField0_ |= 0x00000200;
              gamma_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000400;
              power_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000800;
              momentum_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00001000;
              weightDecay_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00002000;
              stepsize_ = input.readInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00004000;
              snapshot_ = input.readInt32();
              break;
            }
            case 122: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00008000;
              snapshotPrefix_ = bs;
              break;
            }
            case 128: {
              bitField0_ |= 0x00010000;
              snapshotDiff_ = input.readBool();
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              caffe.Caffe.SolverParameter.SolverMode value = caffe.Caffe.SolverParameter.SolverMode.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x00020000;
                solverMode_ = value;
              }
              break;
            }
            case 144: {
              bitField0_ |= 0x00040000;
              deviceId_ = input.readInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00000010;
              testComputeLoss_ = input.readBool();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              randomSeed_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SolverParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SolverParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SolverParameter.class, caffe.Caffe.SolverParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SolverParameter> PARSER =
        new com.google.protobuf.AbstractParser<SolverParameter>() {
      public SolverParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SolverParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SolverParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.SolverParameter.SolverMode}
     *
     * <pre>
     * the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
     * </pre>
     */
    public enum SolverMode
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CPU = 0;</code>
       */
      CPU(0, 0),
      /**
       * <code>GPU = 1;</code>
       */
      GPU(1, 1),
      ;

      /**
       * <code>CPU = 0;</code>
       */
      public static final int CPU_VALUE = 0;
      /**
       * <code>GPU = 1;</code>
       */
      public static final int GPU_VALUE = 1;


      public final int getNumber() { return value; }

      public static SolverMode valueOf(int value) {
        switch (value) {
          case 0: return CPU;
          case 1: return GPU;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SolverMode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SolverMode>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SolverMode>() {
              public SolverMode findValueByNumber(int number) {
                return SolverMode.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.SolverParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final SolverMode[] VALUES = values();

      public static SolverMode valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SolverMode(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.SolverParameter.SolverMode)
    }

    private int bitField0_;
    public static final int TRAIN_NET_FIELD_NUMBER = 1;
    private java.lang.Object trainNet_;
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    public boolean hasTrainNet() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    public java.lang.String getTrainNet() {
      java.lang.Object ref = trainNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          trainNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string train_net = 1;</code>
     *
     * <pre>
     * The proto file for the training net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTrainNetBytes() {
      java.lang.Object ref = trainNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        trainNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TEST_NET_FIELD_NUMBER = 2;
    private java.lang.Object testNet_;
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    public boolean hasTestNet() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    public java.lang.String getTestNet() {
      java.lang.Object ref = testNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          testNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string test_net = 2;</code>
     *
     * <pre>
     * The proto file for the testing net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTestNetBytes() {
      java.lang.Object ref = testNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        testNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TEST_ITER_FIELD_NUMBER = 3;
    private int testIter_;
    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    public boolean hasTestIter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 test_iter = 3 [default = 0];</code>
     *
     * <pre>
     * The number of iterations for each testing phase.
     * </pre>
     */
    public int getTestIter() {
      return testIter_;
    }

    public static final int TEST_INTERVAL_FIELD_NUMBER = 4;
    private int testInterval_;
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    public boolean hasTestInterval() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 test_interval = 4 [default = 0];</code>
     *
     * <pre>
     * The number of iterations between two testing phases.
     * </pre>
     */
    public int getTestInterval() {
      return testInterval_;
    }

    public static final int TEST_COMPUTE_LOSS_FIELD_NUMBER = 19;
    private boolean testComputeLoss_;
    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    public boolean hasTestComputeLoss() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool test_compute_loss = 19 [default = false];</code>
     */
    public boolean getTestComputeLoss() {
      return testComputeLoss_;
    }

    public static final int BASE_LR_FIELD_NUMBER = 5;
    private float baseLr_;
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    public boolean hasBaseLr() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float base_lr = 5;</code>
     *
     * <pre>
     * The base learning rate
     * </pre>
     */
    public float getBaseLr() {
      return baseLr_;
    }

    public static final int DISPLAY_FIELD_NUMBER = 6;
    private int display_;
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    public boolean hasDisplay() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 display = 6;</code>
     *
     * <pre>
     * the number of iterations between displaying info. If display = 0, no info
     * will be displayed.
     * </pre>
     */
    public int getDisplay() {
      return display_;
    }

    public static final int MAX_ITER_FIELD_NUMBER = 7;
    private int maxIter_;
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    public boolean hasMaxIter() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 max_iter = 7;</code>
     *
     * <pre>
     * the maximum number of iterations
     * </pre>
     */
    public int getMaxIter() {
      return maxIter_;
    }

    public static final int LR_POLICY_FIELD_NUMBER = 8;
    private java.lang.Object lrPolicy_;
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    public boolean hasLrPolicy() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    public java.lang.String getLrPolicy() {
      java.lang.Object ref = lrPolicy_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          lrPolicy_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lr_policy = 8;</code>
     *
     * <pre>
     * The learning rate decay policy.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLrPolicyBytes() {
      java.lang.Object ref = lrPolicy_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lrPolicy_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GAMMA_FIELD_NUMBER = 9;
    private float gamma_;
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public boolean hasGamma() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float gamma = 9;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public float getGamma() {
      return gamma_;
    }

    public static final int POWER_FIELD_NUMBER = 10;
    private float power_;
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float power = 10;</code>
     *
     * <pre>
     * The parameter to compute the learning rate.
     * </pre>
     */
    public float getPower() {
      return power_;
    }

    public static final int MOMENTUM_FIELD_NUMBER = 11;
    private float momentum_;
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    public boolean hasMomentum() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float momentum = 11;</code>
     *
     * <pre>
     * The momentum value.
     * </pre>
     */
    public float getMomentum() {
      return momentum_;
    }

    public static final int WEIGHT_DECAY_FIELD_NUMBER = 12;
    private float weightDecay_;
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    public boolean hasWeightDecay() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float weight_decay = 12;</code>
     *
     * <pre>
     * The weight decay.
     * </pre>
     */
    public float getWeightDecay() {
      return weightDecay_;
    }

    public static final int STEPSIZE_FIELD_NUMBER = 13;
    private int stepsize_;
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    public boolean hasStepsize() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional int32 stepsize = 13;</code>
     *
     * <pre>
     * the stepsize for learning rate policy "step"
     * </pre>
     */
    public int getStepsize() {
      return stepsize_;
    }

    public static final int SNAPSHOT_FIELD_NUMBER = 14;
    private int snapshot_;
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    public boolean hasSnapshot() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 snapshot = 14 [default = 0];</code>
     *
     * <pre>
     * The snapshot interval
     * </pre>
     */
    public int getSnapshot() {
      return snapshot_;
    }

    public static final int SNAPSHOT_PREFIX_FIELD_NUMBER = 15;
    private java.lang.Object snapshotPrefix_;
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public boolean hasSnapshotPrefix() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public java.lang.String getSnapshotPrefix() {
      java.lang.Object ref = snapshotPrefix_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          snapshotPrefix_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string snapshot_prefix = 15;</code>
     *
     * <pre>
     * The prefix for the snapshot.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSnapshotPrefixBytes() {
      java.lang.Object ref = snapshotPrefix_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        snapshotPrefix_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SNAPSHOT_DIFF_FIELD_NUMBER = 16;
    private boolean snapshotDiff_;
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    public boolean hasSnapshotDiff() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional bool snapshot_diff = 16 [default = false];</code>
     *
     * <pre>
     * whether to snapshot diff in the results or not. Snapshotting diff will help
     * debugging but the final protocol buffer size will be much larger.
     * </pre>
     */
    public boolean getSnapshotDiff() {
      return snapshotDiff_;
    }

    public static final int SOLVER_MODE_FIELD_NUMBER = 17;
    private caffe.Caffe.SolverParameter.SolverMode solverMode_;
    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    public boolean hasSolverMode() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
     */
    public caffe.Caffe.SolverParameter.SolverMode getSolverMode() {
      return solverMode_;
    }

    public static final int DEVICE_ID_FIELD_NUMBER = 18;
    private int deviceId_;
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    public boolean hasDeviceId() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 device_id = 18 [default = 0];</code>
     *
     * <pre>
     * the device_id will that be used in GPU mode. Use device_id = 0 in default.
     * </pre>
     */
    public int getDeviceId() {
      return deviceId_;
    }

    public static final int RANDOM_SEED_FIELD_NUMBER = 20;
    private long randomSeed_;
    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    public boolean hasRandomSeed() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int64 random_seed = 20 [default = -1];</code>
     *
     * <pre>
     * If non-negative, the seed with which the Solver will initialize the Caffe
     * random number generator -- useful for reproducible results. Otherwise,
     * (and by default) initialize using a seed derived from the system clock.
     * </pre>
     */
    public long getRandomSeed() {
      return randomSeed_;
    }

    private void initFields() {
      trainNet_ = "";
      testNet_ = "";
      testIter_ = 0;
      testInterval_ = 0;
      testComputeLoss_ = false;
      baseLr_ = 0F;
      display_ = 0;
      maxIter_ = 0;
      lrPolicy_ = "";
      gamma_ = 0F;
      power_ = 0F;
      momentum_ = 0F;
      weightDecay_ = 0F;
      stepsize_ = 0;
      snapshot_ = 0;
      snapshotPrefix_ = "";
      snapshotDiff_ = false;
      solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
      deviceId_ = 0;
      randomSeed_ = -1L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTrainNetBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTestNetBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, testIter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, testInterval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(5, baseLr_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(6, display_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(7, maxIter_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBytes(8, getLrPolicyBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(9, gamma_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(10, power_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(11, momentum_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(12, weightDecay_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(13, stepsize_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(14, snapshot_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(15, getSnapshotPrefixBytes());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBool(16, snapshotDiff_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeEnum(17, solverMode_.getNumber());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(18, deviceId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(19, testComputeLoss_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt64(20, randomSeed_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTrainNetBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTestNetBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, testIter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, testInterval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, baseLr_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, display_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, maxIter_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getLrPolicyBytes());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, gamma_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, power_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, momentum_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, weightDecay_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, stepsize_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, snapshot_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, getSnapshotPrefixBytes());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, snapshotDiff_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, solverMode_.getNumber());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, deviceId_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, testComputeLoss_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(20, randomSeed_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SolverParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SolverParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SolverParameter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.SolverParameter)
        caffe.Caffe.SolverParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SolverParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SolverParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SolverParameter.class, caffe.Caffe.SolverParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SolverParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        trainNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        testNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        testIter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        testInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        testComputeLoss_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        baseLr_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        display_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        maxIter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        lrPolicy_ = "";
        bitField0_ = (bitField0_ & ~0x00000100);
        gamma_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        power_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        momentum_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        weightDecay_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        stepsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        snapshot_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        snapshotPrefix_ = "";
        bitField0_ = (bitField0_ & ~0x00008000);
        snapshotDiff_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
        bitField0_ = (bitField0_ & ~0x00020000);
        deviceId_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        randomSeed_ = -1L;
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SolverParameter_descriptor;
      }

      public caffe.Caffe.SolverParameter getDefaultInstanceForType() {
        return caffe.Caffe.SolverParameter.getDefaultInstance();
      }

      public caffe.Caffe.SolverParameter build() {
        caffe.Caffe.SolverParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SolverParameter buildPartial() {
        caffe.Caffe.SolverParameter result = new caffe.Caffe.SolverParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.trainNet_ = trainNet_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.testNet_ = testNet_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.testIter_ = testIter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.testInterval_ = testInterval_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.testComputeLoss_ = testComputeLoss_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.baseLr_ = baseLr_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.display_ = display_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.maxIter_ = maxIter_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.lrPolicy_ = lrPolicy_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.gamma_ = gamma_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.power_ = power_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.momentum_ = momentum_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.weightDecay_ = weightDecay_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.stepsize_ = stepsize_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.snapshot_ = snapshot_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.snapshotPrefix_ = snapshotPrefix_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.snapshotDiff_ = snapshotDiff_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.solverMode_ = solverMode_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.deviceId_ = deviceId_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.randomSeed_ = randomSeed_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SolverParameter) {
          return mergeFrom((caffe.Caffe.SolverParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SolverParameter other) {
        if (other == caffe.Caffe.SolverParameter.getDefaultInstance()) return this;
        if (other.hasTrainNet()) {
          bitField0_ |= 0x00000001;
          trainNet_ = other.trainNet_;
          onChanged();
        }
        if (other.hasTestNet()) {
          bitField0_ |= 0x00000002;
          testNet_ = other.testNet_;
          onChanged();
        }
        if (other.hasTestIter()) {
          setTestIter(other.getTestIter());
        }
        if (other.hasTestInterval()) {
          setTestInterval(other.getTestInterval());
        }
        if (other.hasTestComputeLoss()) {
          setTestComputeLoss(other.getTestComputeLoss());
        }
        if (other.hasBaseLr()) {
          setBaseLr(other.getBaseLr());
        }
        if (other.hasDisplay()) {
          setDisplay(other.getDisplay());
        }
        if (other.hasMaxIter()) {
          setMaxIter(other.getMaxIter());
        }
        if (other.hasLrPolicy()) {
          bitField0_ |= 0x00000100;
          lrPolicy_ = other.lrPolicy_;
          onChanged();
        }
        if (other.hasGamma()) {
          setGamma(other.getGamma());
        }
        if (other.hasPower()) {
          setPower(other.getPower());
        }
        if (other.hasMomentum()) {
          setMomentum(other.getMomentum());
        }
        if (other.hasWeightDecay()) {
          setWeightDecay(other.getWeightDecay());
        }
        if (other.hasStepsize()) {
          setStepsize(other.getStepsize());
        }
        if (other.hasSnapshot()) {
          setSnapshot(other.getSnapshot());
        }
        if (other.hasSnapshotPrefix()) {
          bitField0_ |= 0x00008000;
          snapshotPrefix_ = other.snapshotPrefix_;
          onChanged();
        }
        if (other.hasSnapshotDiff()) {
          setSnapshotDiff(other.getSnapshotDiff());
        }
        if (other.hasSolverMode()) {
          setSolverMode(other.getSolverMode());
        }
        if (other.hasDeviceId()) {
          setDeviceId(other.getDeviceId());
        }
        if (other.hasRandomSeed()) {
          setRandomSeed(other.getRandomSeed());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SolverParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SolverParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object trainNet_ = "";
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public boolean hasTrainNet() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public java.lang.String getTrainNet() {
        java.lang.Object ref = trainNet_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            trainNet_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTrainNetBytes() {
        java.lang.Object ref = trainNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          trainNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public Builder setTrainNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        trainNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public Builder clearTrainNet() {
        bitField0_ = (bitField0_ & ~0x00000001);
        trainNet_ = getDefaultInstance().getTrainNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string train_net = 1;</code>
       *
       * <pre>
       * The proto file for the training net.
       * </pre>
       */
      public Builder setTrainNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        trainNet_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object testNet_ = "";
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public boolean hasTestNet() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public java.lang.String getTestNet() {
        java.lang.Object ref = testNet_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            testNet_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTestNetBytes() {
        java.lang.Object ref = testNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          testNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public Builder setTestNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        testNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public Builder clearTestNet() {
        bitField0_ = (bitField0_ & ~0x00000002);
        testNet_ = getDefaultInstance().getTestNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string test_net = 2;</code>
       *
       * <pre>
       * The proto file for the testing net.
       * </pre>
       */
      public Builder setTestNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        testNet_ = value;
        onChanged();
        return this;
      }

      private int testIter_ ;
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public boolean hasTestIter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public int getTestIter() {
        return testIter_;
      }
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public Builder setTestIter(int value) {
        bitField0_ |= 0x00000004;
        testIter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 test_iter = 3 [default = 0];</code>
       *
       * <pre>
       * The number of iterations for each testing phase.
       * </pre>
       */
      public Builder clearTestIter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        testIter_ = 0;
        onChanged();
        return this;
      }

      private int testInterval_ ;
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public boolean hasTestInterval() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public int getTestInterval() {
        return testInterval_;
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public Builder setTestInterval(int value) {
        bitField0_ |= 0x00000008;
        testInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 test_interval = 4 [default = 0];</code>
       *
       * <pre>
       * The number of iterations between two testing phases.
       * </pre>
       */
      public Builder clearTestInterval() {
        bitField0_ = (bitField0_ & ~0x00000008);
        testInterval_ = 0;
        onChanged();
        return this;
      }

      private boolean testComputeLoss_ ;
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public boolean hasTestComputeLoss() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public boolean getTestComputeLoss() {
        return testComputeLoss_;
      }
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public Builder setTestComputeLoss(boolean value) {
        bitField0_ |= 0x00000010;
        testComputeLoss_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool test_compute_loss = 19 [default = false];</code>
       */
      public Builder clearTestComputeLoss() {
        bitField0_ = (bitField0_ & ~0x00000010);
        testComputeLoss_ = false;
        onChanged();
        return this;
      }

      private float baseLr_ ;
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public boolean hasBaseLr() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public float getBaseLr() {
        return baseLr_;
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public Builder setBaseLr(float value) {
        bitField0_ |= 0x00000020;
        baseLr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float base_lr = 5;</code>
       *
       * <pre>
       * The base learning rate
       * </pre>
       */
      public Builder clearBaseLr() {
        bitField0_ = (bitField0_ & ~0x00000020);
        baseLr_ = 0F;
        onChanged();
        return this;
      }

      private int display_ ;
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public boolean hasDisplay() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public int getDisplay() {
        return display_;
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public Builder setDisplay(int value) {
        bitField0_ |= 0x00000040;
        display_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 display = 6;</code>
       *
       * <pre>
       * the number of iterations between displaying info. If display = 0, no info
       * will be displayed.
       * </pre>
       */
      public Builder clearDisplay() {
        bitField0_ = (bitField0_ & ~0x00000040);
        display_ = 0;
        onChanged();
        return this;
      }

      private int maxIter_ ;
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public boolean hasMaxIter() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public int getMaxIter() {
        return maxIter_;
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public Builder setMaxIter(int value) {
        bitField0_ |= 0x00000080;
        maxIter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 max_iter = 7;</code>
       *
       * <pre>
       * the maximum number of iterations
       * </pre>
       */
      public Builder clearMaxIter() {
        bitField0_ = (bitField0_ & ~0x00000080);
        maxIter_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object lrPolicy_ = "";
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public boolean hasLrPolicy() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public java.lang.String getLrPolicy() {
        java.lang.Object ref = lrPolicy_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            lrPolicy_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLrPolicyBytes() {
        java.lang.Object ref = lrPolicy_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lrPolicy_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public Builder setLrPolicy(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        lrPolicy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public Builder clearLrPolicy() {
        bitField0_ = (bitField0_ & ~0x00000100);
        lrPolicy_ = getDefaultInstance().getLrPolicy();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lr_policy = 8;</code>
       *
       * <pre>
       * The learning rate decay policy.
       * </pre>
       */
      public Builder setLrPolicyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
        lrPolicy_ = value;
        onChanged();
        return this;
      }

      private float gamma_ ;
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public boolean hasGamma() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public float getGamma() {
        return gamma_;
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder setGamma(float value) {
        bitField0_ |= 0x00000200;
        gamma_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gamma = 9;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder clearGamma() {
        bitField0_ = (bitField0_ & ~0x00000200);
        gamma_ = 0F;
        onChanged();
        return this;
      }

      private float power_ ;
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public float getPower() {
        return power_;
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder setPower(float value) {
        bitField0_ |= 0x00000400;
        power_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float power = 10;</code>
       *
       * <pre>
       * The parameter to compute the learning rate.
       * </pre>
       */
      public Builder clearPower() {
        bitField0_ = (bitField0_ & ~0x00000400);
        power_ = 0F;
        onChanged();
        return this;
      }

      private float momentum_ ;
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public boolean hasMomentum() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public float getMomentum() {
        return momentum_;
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public Builder setMomentum(float value) {
        bitField0_ |= 0x00000800;
        momentum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float momentum = 11;</code>
       *
       * <pre>
       * The momentum value.
       * </pre>
       */
      public Builder clearMomentum() {
        bitField0_ = (bitField0_ & ~0x00000800);
        momentum_ = 0F;
        onChanged();
        return this;
      }

      private float weightDecay_ ;
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public boolean hasWeightDecay() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public float getWeightDecay() {
        return weightDecay_;
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public Builder setWeightDecay(float value) {
        bitField0_ |= 0x00001000;
        weightDecay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float weight_decay = 12;</code>
       *
       * <pre>
       * The weight decay.
       * </pre>
       */
      public Builder clearWeightDecay() {
        bitField0_ = (bitField0_ & ~0x00001000);
        weightDecay_ = 0F;
        onChanged();
        return this;
      }

      private int stepsize_ ;
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public boolean hasStepsize() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public int getStepsize() {
        return stepsize_;
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public Builder setStepsize(int value) {
        bitField0_ |= 0x00002000;
        stepsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 stepsize = 13;</code>
       *
       * <pre>
       * the stepsize for learning rate policy "step"
       * </pre>
       */
      public Builder clearStepsize() {
        bitField0_ = (bitField0_ & ~0x00002000);
        stepsize_ = 0;
        onChanged();
        return this;
      }

      private int snapshot_ ;
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public boolean hasSnapshot() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public int getSnapshot() {
        return snapshot_;
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public Builder setSnapshot(int value) {
        bitField0_ |= 0x00004000;
        snapshot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 snapshot = 14 [default = 0];</code>
       *
       * <pre>
       * The snapshot interval
       * </pre>
       */
      public Builder clearSnapshot() {
        bitField0_ = (bitField0_ & ~0x00004000);
        snapshot_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object snapshotPrefix_ = "";
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public boolean hasSnapshotPrefix() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public java.lang.String getSnapshotPrefix() {
        java.lang.Object ref = snapshotPrefix_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            snapshotPrefix_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSnapshotPrefixBytes() {
        java.lang.Object ref = snapshotPrefix_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          snapshotPrefix_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder setSnapshotPrefix(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        snapshotPrefix_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder clearSnapshotPrefix() {
        bitField0_ = (bitField0_ & ~0x00008000);
        snapshotPrefix_ = getDefaultInstance().getSnapshotPrefix();
        onChanged();
        return this;
      }
      /**
       * <code>optional string snapshot_prefix = 15;</code>
       *
       * <pre>
       * The prefix for the snapshot.
       * </pre>
       */
      public Builder setSnapshotPrefixBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        snapshotPrefix_ = value;
        onChanged();
        return this;
      }

      private boolean snapshotDiff_ ;
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public boolean hasSnapshotDiff() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public boolean getSnapshotDiff() {
        return snapshotDiff_;
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public Builder setSnapshotDiff(boolean value) {
        bitField0_ |= 0x00010000;
        snapshotDiff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool snapshot_diff = 16 [default = false];</code>
       *
       * <pre>
       * whether to snapshot diff in the results or not. Snapshotting diff will help
       * debugging but the final protocol buffer size will be much larger.
       * </pre>
       */
      public Builder clearSnapshotDiff() {
        bitField0_ = (bitField0_ & ~0x00010000);
        snapshotDiff_ = false;
        onChanged();
        return this;
      }

      private caffe.Caffe.SolverParameter.SolverMode solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public boolean hasSolverMode() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public caffe.Caffe.SolverParameter.SolverMode getSolverMode() {
        return solverMode_;
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public Builder setSolverMode(caffe.Caffe.SolverParameter.SolverMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00020000;
        solverMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.SolverParameter.SolverMode solver_mode = 17 [default = GPU];</code>
       */
      public Builder clearSolverMode() {
        bitField0_ = (bitField0_ & ~0x00020000);
        solverMode_ = caffe.Caffe.SolverParameter.SolverMode.GPU;
        onChanged();
        return this;
      }

      private int deviceId_ ;
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public boolean hasDeviceId() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public int getDeviceId() {
        return deviceId_;
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public Builder setDeviceId(int value) {
        bitField0_ |= 0x00040000;
        deviceId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 device_id = 18 [default = 0];</code>
       *
       * <pre>
       * the device_id will that be used in GPU mode. Use device_id = 0 in default.
       * </pre>
       */
      public Builder clearDeviceId() {
        bitField0_ = (bitField0_ & ~0x00040000);
        deviceId_ = 0;
        onChanged();
        return this;
      }

      private long randomSeed_ = -1L;
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public boolean hasRandomSeed() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public long getRandomSeed() {
        return randomSeed_;
      }
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public Builder setRandomSeed(long value) {
        bitField0_ |= 0x00080000;
        randomSeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 random_seed = 20 [default = -1];</code>
       *
       * <pre>
       * If non-negative, the seed with which the Solver will initialize the Caffe
       * random number generator -- useful for reproducible results. Otherwise,
       * (and by default) initialize using a seed derived from the system clock.
       * </pre>
       */
      public Builder clearRandomSeed() {
        bitField0_ = (bitField0_ & ~0x00080000);
        randomSeed_ = -1L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SolverParameter)
    }

    static {
      defaultInstance = new SolverParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SolverParameter)
  }

  public interface SolverStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.SolverState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    boolean hasIter();
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    int getIter();

    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    boolean hasLearnedNet();
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    java.lang.String getLearnedNet();
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    com.google.protobuf.ByteString
        getLearnedNetBytes();

    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getHistoryList();
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    caffe.Caffe.BlobProto getHistory(int index);
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    int getHistoryCount();
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getHistoryOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code caffe.SolverState}
   *
   * <pre>
   * A message that stores the solver snapshots
   * </pre>
   */
  public static final class SolverState extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.SolverState)
      SolverStateOrBuilder {
    // Use SolverState.newBuilder() to construct.
    private SolverState(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SolverState(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SolverState defaultInstance;
    public static SolverState getDefaultInstance() {
      return defaultInstance;
    }

    public SolverState getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SolverState(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              iter_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              learnedNet_ = bs;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                history_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000004;
              }
              history_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = java.util.Collections.unmodifiableList(history_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SolverState_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SolverState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SolverState.class, caffe.Caffe.SolverState.Builder.class);
    }

    public static com.google.protobuf.Parser<SolverState> PARSER =
        new com.google.protobuf.AbstractParser<SolverState>() {
      public SolverState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SolverState(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SolverState> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ITER_FIELD_NUMBER = 1;
    private int iter_;
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    public boolean hasIter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 iter = 1;</code>
     *
     * <pre>
     * The current iteration
     * </pre>
     */
    public int getIter() {
      return iter_;
    }

    public static final int LEARNED_NET_FIELD_NUMBER = 2;
    private java.lang.Object learnedNet_;
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public boolean hasLearnedNet() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public java.lang.String getLearnedNet() {
      java.lang.Object ref = learnedNet_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          learnedNet_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string learned_net = 2;</code>
     *
     * <pre>
     * The file that stores the learned net.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLearnedNetBytes() {
      java.lang.Object ref = learnedNet_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        learnedNet_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HISTORY_FIELD_NUMBER = 3;
    private java.util.List<caffe.Caffe.BlobProto> history_;
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobProto> getHistoryList() {
      return history_;
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getHistoryOrBuilderList() {
      return history_;
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public int getHistoryCount() {
      return history_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public caffe.Caffe.BlobProto getHistory(int index) {
      return history_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto history = 3;</code>
     *
     * <pre>
     * The history for sgd solvers
     * </pre>
     */
    public caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
        int index) {
      return history_.get(index);
    }

    private void initFields() {
      iter_ = 0;
      learnedNet_ = "";
      history_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, iter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getLearnedNetBytes());
      }
      for (int i = 0; i < history_.size(); i++) {
        output.writeMessage(3, history_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, iter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getLearnedNetBytes());
      }
      for (int i = 0; i < history_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, history_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SolverState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SolverState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SolverState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SolverState prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SolverState}
     *
     * <pre>
     * A message that stores the solver snapshots
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.SolverState)
        caffe.Caffe.SolverStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SolverState_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SolverState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SolverState.class, caffe.Caffe.SolverState.Builder.class);
      }

      // Construct using caffe.Caffe.SolverState.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHistoryFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        iter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        learnedNet_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          historyBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SolverState_descriptor;
      }

      public caffe.Caffe.SolverState getDefaultInstanceForType() {
        return caffe.Caffe.SolverState.getDefaultInstance();
      }

      public caffe.Caffe.SolverState build() {
        caffe.Caffe.SolverState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SolverState buildPartial() {
        caffe.Caffe.SolverState result = new caffe.Caffe.SolverState(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.iter_ = iter_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.learnedNet_ = learnedNet_;
        if (historyBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            history_ = java.util.Collections.unmodifiableList(history_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.history_ = history_;
        } else {
          result.history_ = historyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SolverState) {
          return mergeFrom((caffe.Caffe.SolverState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SolverState other) {
        if (other == caffe.Caffe.SolverState.getDefaultInstance()) return this;
        if (other.hasIter()) {
          setIter(other.getIter());
        }
        if (other.hasLearnedNet()) {
          bitField0_ |= 0x00000002;
          learnedNet_ = other.learnedNet_;
          onChanged();
        }
        if (historyBuilder_ == null) {
          if (!other.history_.isEmpty()) {
            if (history_.isEmpty()) {
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureHistoryIsMutable();
              history_.addAll(other.history_);
            }
            onChanged();
          }
        } else {
          if (!other.history_.isEmpty()) {
            if (historyBuilder_.isEmpty()) {
              historyBuilder_.dispose();
              historyBuilder_ = null;
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
              historyBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHistoryFieldBuilder() : null;
            } else {
              historyBuilder_.addAllMessages(other.history_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SolverState parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SolverState) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int iter_ ;
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public boolean hasIter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public int getIter() {
        return iter_;
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public Builder setIter(int value) {
        bitField0_ |= 0x00000001;
        iter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 iter = 1;</code>
       *
       * <pre>
       * The current iteration
       * </pre>
       */
      public Builder clearIter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        iter_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object learnedNet_ = "";
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public boolean hasLearnedNet() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public java.lang.String getLearnedNet() {
        java.lang.Object ref = learnedNet_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            learnedNet_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLearnedNetBytes() {
        java.lang.Object ref = learnedNet_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          learnedNet_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder setLearnedNet(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        learnedNet_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder clearLearnedNet() {
        bitField0_ = (bitField0_ & ~0x00000002);
        learnedNet_ = getDefaultInstance().getLearnedNet();
        onChanged();
        return this;
      }
      /**
       * <code>optional string learned_net = 2;</code>
       *
       * <pre>
       * The file that stores the learned net.
       * </pre>
       */
      public Builder setLearnedNetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        learnedNet_ = value;
        onChanged();
        return this;
      }

      private java.util.List<caffe.Caffe.BlobProto> history_ =
        java.util.Collections.emptyList();
      private void ensureHistoryIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(history_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> historyBuilder_;

      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto> getHistoryList() {
        if (historyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(history_);
        } else {
          return historyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public int getHistoryCount() {
        if (historyBuilder_ == null) {
          return history_.size();
        } else {
          return historyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto getHistory(int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder setHistory(
          int index, caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.set(index, value);
          onChanged();
        } else {
          historyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder setHistory(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.set(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(value);
          onChanged();
        } else {
          historyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          int index, caffe.Caffe.BlobProto value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(index, value);
          onChanged();
        } else {
          historyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addHistory(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder addAllHistory(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, history_);
          onChanged();
        } else {
          historyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder clearHistory() {
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          historyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public Builder removeHistory(int index) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.remove(index);
          onChanged();
        } else {
          historyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder getHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProtoOrBuilder getHistoryOrBuilder(
          int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);  } else {
          return historyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto history = 3;</code>
       *
       * <pre>
       * The history for sgd solvers
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SolverState)
    }

    static {
      defaultInstance = new SolverState(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SolverState)
  }

  public interface LayerParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.LayerParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getBottomList();
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    int getBottomCount();
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    java.lang.String getBottom(int index);
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    com.google.protobuf.ByteString
        getBottomBytes(int index);

    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    com.google.protobuf.ProtocolStringList
        getTopList();
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    int getTopCount();
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    java.lang.String getTop(int index);
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    com.google.protobuf.ByteString
        getTopBytes(int index);

    /**
     * <code>optional string name = 4;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 4;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 4;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
     *
     * <pre>
     * the layer type from the enum above
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
     *
     * <pre>
     * the layer type from the enum above
     * </pre>
     */
    caffe.Caffe.LayerParameter.LayerType getType();

    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    int getBlobsCount();
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);

    /**
     * <code>repeated float blobs_lr = 7;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    java.util.List<java.lang.Float> getBlobsLrList();
    /**
     * <code>repeated float blobs_lr = 7;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    int getBlobsLrCount();
    /**
     * <code>repeated float blobs_lr = 7;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    float getBlobsLr(int index);

    /**
     * <code>repeated float weight_decay = 8;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    java.util.List<java.lang.Float> getWeightDecayList();
    /**
     * <code>repeated float weight_decay = 8;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    int getWeightDecayCount();
    /**
     * <code>repeated float weight_decay = 8;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    float getWeightDecay(int index);

    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     *
     * <pre>
     * Parameters for particular layer types.
     * </pre>
     */
    boolean hasConcatParam();
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     *
     * <pre>
     * Parameters for particular layer types.
     * </pre>
     */
    caffe.Caffe.ConcatParameter getConcatParam();
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     *
     * <pre>
     * Parameters for particular layer types.
     * </pre>
     */
    caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder();

    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    boolean hasConvolutionParam();
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    caffe.Caffe.ConvolutionParameter getConvolutionParam();
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder();

    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    boolean hasDataParam();
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    caffe.Caffe.DataParameter getDataParam();
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder();

    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    boolean hasDropoutParam();
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    caffe.Caffe.DropoutParameter getDropoutParam();
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder();

    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    boolean hasHdf5DataParam();
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    caffe.Caffe.HDF5DataParameter getHdf5DataParam();
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder();

    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    boolean hasHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    caffe.Caffe.HDF5OutputParameter getHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder();

    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    boolean hasImageDataParam();
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    caffe.Caffe.ImageDataParameter getImageDataParam();
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder();

    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    boolean hasInfogainLossParam();
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    caffe.Caffe.InfogainLossParameter getInfogainLossParam();
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder();

    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    boolean hasInnerProductParam();
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    caffe.Caffe.InnerProductParameter getInnerProductParam();
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder();

    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    boolean hasLrnParam();
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    caffe.Caffe.LRNParameter getLrnParam();
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder();

    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    boolean hasMemoryDataParam();
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    caffe.Caffe.MemoryDataParameter getMemoryDataParam();
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder();

    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    boolean hasPoolingParam();
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    caffe.Caffe.PoolingParameter getPoolingParam();
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder();

    /**
     * <code>optional .caffe.SppParameter spp_param = 119;</code>
     */
    boolean hasSppParam();
    /**
     * <code>optional .caffe.SppParameter spp_param = 119;</code>
     */
    caffe.Caffe.SppParameter getSppParam();
    /**
     * <code>optional .caffe.SppParameter spp_param = 119;</code>
     */
    caffe.Caffe.SppParameterOrBuilder getSppParamOrBuilder();

    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    boolean hasPowerParam();
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    caffe.Caffe.PowerParameter getPowerParam();
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder();

    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    boolean hasWindowDataParam();
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    caffe.Caffe.WindowDataParameter getWindowDataParam();
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder();

    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     *
     * <pre>
     * DEPRECATED: The layer parameters specified as a V0LayerParameter.
     * This should never be used by any code except to upgrade to the new
     * LayerParameter specification.
     * </pre>
     */
    boolean hasLayer();
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     *
     * <pre>
     * DEPRECATED: The layer parameters specified as a V0LayerParameter.
     * This should never be used by any code except to upgrade to the new
     * LayerParameter specification.
     * </pre>
     */
    caffe.Caffe.V0LayerParameter getLayer();
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     *
     * <pre>
     * DEPRECATED: The layer parameters specified as a V0LayerParameter.
     * This should never be used by any code except to upgrade to the new
     * LayerParameter specification.
     * </pre>
     */
    caffe.Caffe.V0LayerParameterOrBuilder getLayerOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.LayerParameter}
   *
   * <pre>
   * Update the next available ID when you add a new LayerParameter field.
   * LayerParameter next available ID: 23 (last added: memory_data_param)
   * </pre>
   */
  public static final class LayerParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.LayerParameter)
      LayerParameterOrBuilder {
    // Use LayerParameter.newBuilder() to construct.
    private LayerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LayerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LayerParameter defaultInstance;
    public static LayerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public LayerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LayerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              caffe.Caffe.V0LayerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = layer_.toBuilder();
              }
              layer_ = input.readMessage(caffe.Caffe.V0LayerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(layer_);
                layer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                bottom_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              bottom_.add(bs);
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                top_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              top_.add(bs);
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              caffe.Caffe.LayerParameter.LayerType value = caffe.Caffe.LayerParameter.LayerType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                type_ = value;
              }
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00000010;
              }
              blobs_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
            case 61: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              blobsLr_.add(input.readFloat());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                blobsLr_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 69: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              weightDecay_.add(input.readFloat());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                weightDecay_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 74: {
              caffe.Caffe.ConcatParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = concatParam_.toBuilder();
              }
              concatParam_ = input.readMessage(caffe.Caffe.ConcatParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(concatParam_);
                concatParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 82: {
              caffe.Caffe.ConvolutionParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = convolutionParam_.toBuilder();
              }
              convolutionParam_ = input.readMessage(caffe.Caffe.ConvolutionParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(convolutionParam_);
                convolutionParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 90: {
              caffe.Caffe.DataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = dataParam_.toBuilder();
              }
              dataParam_ = input.readMessage(caffe.Caffe.DataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dataParam_);
                dataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 98: {
              caffe.Caffe.DropoutParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = dropoutParam_.toBuilder();
              }
              dropoutParam_ = input.readMessage(caffe.Caffe.DropoutParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(dropoutParam_);
                dropoutParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 106: {
              caffe.Caffe.HDF5DataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = hdf5DataParam_.toBuilder();
              }
              hdf5DataParam_ = input.readMessage(caffe.Caffe.HDF5DataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5DataParam_);
                hdf5DataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 114: {
              caffe.Caffe.HDF5OutputParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = hdf5OutputParam_.toBuilder();
              }
              hdf5OutputParam_ = input.readMessage(caffe.Caffe.HDF5OutputParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5OutputParam_);
                hdf5OutputParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 122: {
              caffe.Caffe.ImageDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = imageDataParam_.toBuilder();
              }
              imageDataParam_ = input.readMessage(caffe.Caffe.ImageDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(imageDataParam_);
                imageDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 130: {
              caffe.Caffe.InfogainLossParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = infogainLossParam_.toBuilder();
              }
              infogainLossParam_ = input.readMessage(caffe.Caffe.InfogainLossParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(infogainLossParam_);
                infogainLossParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 138: {
              caffe.Caffe.InnerProductParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = innerProductParam_.toBuilder();
              }
              innerProductParam_ = input.readMessage(caffe.Caffe.InnerProductParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(innerProductParam_);
                innerProductParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 146: {
              caffe.Caffe.LRNParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = lrnParam_.toBuilder();
              }
              lrnParam_ = input.readMessage(caffe.Caffe.LRNParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lrnParam_);
                lrnParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 154: {
              caffe.Caffe.PoolingParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = poolingParam_.toBuilder();
              }
              poolingParam_ = input.readMessage(caffe.Caffe.PoolingParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(poolingParam_);
                poolingParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 162: {
              caffe.Caffe.WindowDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = windowDataParam_.toBuilder();
              }
              windowDataParam_ = input.readMessage(caffe.Caffe.WindowDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(windowDataParam_);
                windowDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 170: {
              caffe.Caffe.PowerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = powerParam_.toBuilder();
              }
              powerParam_ = input.readMessage(caffe.Caffe.PowerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(powerParam_);
                powerParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 178: {
              caffe.Caffe.MemoryDataParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = memoryDataParam_.toBuilder();
              }
              memoryDataParam_ = input.readMessage(caffe.Caffe.MemoryDataParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(memoryDataParam_);
                memoryDataParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 954: {
              caffe.Caffe.SppParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = sppParam_.toBuilder();
              }
              sppParam_ = input.readMessage(caffe.Caffe.SppParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sppParam_);
                sppParam_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          bottom_ = bottom_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          top_ = top_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_LayerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_LayerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.LayerParameter.class, caffe.Caffe.LayerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<LayerParameter> PARSER =
        new com.google.protobuf.AbstractParser<LayerParameter>() {
      public LayerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LayerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LayerParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.LayerParameter.LayerType}
     *
     * <pre>
     * Add new LayerTypes to the enum below in lexicographical order (other than
     * starting with NONE), starting with the next available ID in the comment
     * line above the enum. Update the next available ID when you add a new
     * LayerType.
     * LayerType next available ID: 30 (last added: MEMORY_DATA)
     * </pre>
     */
    public enum LayerType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       *
       * <pre>
       * "NONE" layer type is 0th enum element so that we don't cause confusion
       * by defaulting to an existent LayerType (instead, should usually error if
       * the type is unspecified).
       * </pre>
       */
      NONE(0, 0),
      /**
       * <code>ACCURACY = 1;</code>
       */
      ACCURACY(1, 1),
      /**
       * <code>BNLL = 2;</code>
       */
      BNLL(2, 2),
      /**
       * <code>CONCAT = 3;</code>
       */
      CONCAT(3, 3),
      /**
       * <code>CONVOLUTION = 4;</code>
       */
      CONVOLUTION(4, 4),
      /**
       * <code>DATA = 5;</code>
       */
      DATA(5, 5),
      /**
       * <code>DROPOUT = 6;</code>
       */
      DROPOUT(6, 6),
      /**
       * <code>EUCLIDEAN_LOSS = 7;</code>
       */
      EUCLIDEAN_LOSS(7, 7),
      /**
       * <code>ELTWISE_PRODUCT = 25;</code>
       */
      ELTWISE_PRODUCT(8, 25),
      /**
       * <code>FLATTEN = 8;</code>
       */
      FLATTEN(9, 8),
      /**
       * <code>HDF5_DATA = 9;</code>
       */
      HDF5_DATA(10, 9),
      /**
       * <code>HDF5_OUTPUT = 10;</code>
       */
      HDF5_OUTPUT(11, 10),
      /**
       * <code>HINGE_LOSS = 28;</code>
       */
      HINGE_LOSS(12, 28),
      /**
       * <code>IM2COL = 11;</code>
       */
      IM2COL(13, 11),
      /**
       * <code>IMAGE_DATA = 12;</code>
       */
      IMAGE_DATA(14, 12),
      /**
       * <code>INFOGAIN_LOSS = 13;</code>
       */
      INFOGAIN_LOSS(15, 13),
      /**
       * <code>INNER_PRODUCT = 14;</code>
       */
      INNER_PRODUCT(16, 14),
      /**
       * <code>LRN = 15;</code>
       */
      LRN(17, 15),
      /**
       * <code>MEMORY_DATA = 29;</code>
       */
      MEMORY_DATA(18, 29),
      /**
       * <code>MULTINOMIAL_LOGISTIC_LOSS = 16;</code>
       */
      MULTINOMIAL_LOGISTIC_LOSS(19, 16),
      /**
       * <code>POOLING = 17;</code>
       */
      POOLING(20, 17),
      /**
       * <code>SPP = 130;</code>
       */
      SPP(21, 130),
      /**
       * <code>POWER = 26;</code>
       */
      POWER(22, 26),
      /**
       * <code>RELU = 18;</code>
       */
      RELU(23, 18),
      /**
       * <code>SIGMOID = 19;</code>
       */
      SIGMOID(24, 19),
      /**
       * <code>SIGMOID_CROSS_ENTROPY_LOSS = 27;</code>
       */
      SIGMOID_CROSS_ENTROPY_LOSS(25, 27),
      /**
       * <code>SOFTMAX = 20;</code>
       */
      SOFTMAX(26, 20),
      /**
       * <code>SOFTMAX_LOSS = 21;</code>
       */
      SOFTMAX_LOSS(27, 21),
      /**
       * <code>SPLIT = 22;</code>
       */
      SPLIT(28, 22),
      /**
       * <code>TANH = 23;</code>
       */
      TANH(29, 23),
      /**
       * <code>WINDOW_DATA = 24;</code>
       */
      WINDOW_DATA(30, 24),
      /**
       * <code>SOFTPLUS = 129;</code>
       */
      SOFTPLUS(31, 129),
      ;

      /**
       * <code>NONE = 0;</code>
       *
       * <pre>
       * "NONE" layer type is 0th enum element so that we don't cause confusion
       * by defaulting to an existent LayerType (instead, should usually error if
       * the type is unspecified).
       * </pre>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>ACCURACY = 1;</code>
       */
      public static final int ACCURACY_VALUE = 1;
      /**
       * <code>BNLL = 2;</code>
       */
      public static final int BNLL_VALUE = 2;
      /**
       * <code>CONCAT = 3;</code>
       */
      public static final int CONCAT_VALUE = 3;
      /**
       * <code>CONVOLUTION = 4;</code>
       */
      public static final int CONVOLUTION_VALUE = 4;
      /**
       * <code>DATA = 5;</code>
       */
      public static final int DATA_VALUE = 5;
      /**
       * <code>DROPOUT = 6;</code>
       */
      public static final int DROPOUT_VALUE = 6;
      /**
       * <code>EUCLIDEAN_LOSS = 7;</code>
       */
      public static final int EUCLIDEAN_LOSS_VALUE = 7;
      /**
       * <code>ELTWISE_PRODUCT = 25;</code>
       */
      public static final int ELTWISE_PRODUCT_VALUE = 25;
      /**
       * <code>FLATTEN = 8;</code>
       */
      public static final int FLATTEN_VALUE = 8;
      /**
       * <code>HDF5_DATA = 9;</code>
       */
      public static final int HDF5_DATA_VALUE = 9;
      /**
       * <code>HDF5_OUTPUT = 10;</code>
       */
      public static final int HDF5_OUTPUT_VALUE = 10;
      /**
       * <code>HINGE_LOSS = 28;</code>
       */
      public static final int HINGE_LOSS_VALUE = 28;
      /**
       * <code>IM2COL = 11;</code>
       */
      public static final int IM2COL_VALUE = 11;
      /**
       * <code>IMAGE_DATA = 12;</code>
       */
      public static final int IMAGE_DATA_VALUE = 12;
      /**
       * <code>INFOGAIN_LOSS = 13;</code>
       */
      public static final int INFOGAIN_LOSS_VALUE = 13;
      /**
       * <code>INNER_PRODUCT = 14;</code>
       */
      public static final int INNER_PRODUCT_VALUE = 14;
      /**
       * <code>LRN = 15;</code>
       */
      public static final int LRN_VALUE = 15;
      /**
       * <code>MEMORY_DATA = 29;</code>
       */
      public static final int MEMORY_DATA_VALUE = 29;
      /**
       * <code>MULTINOMIAL_LOGISTIC_LOSS = 16;</code>
       */
      public static final int MULTINOMIAL_LOGISTIC_LOSS_VALUE = 16;
      /**
       * <code>POOLING = 17;</code>
       */
      public static final int POOLING_VALUE = 17;
      /**
       * <code>SPP = 130;</code>
       */
      public static final int SPP_VALUE = 130;
      /**
       * <code>POWER = 26;</code>
       */
      public static final int POWER_VALUE = 26;
      /**
       * <code>RELU = 18;</code>
       */
      public static final int RELU_VALUE = 18;
      /**
       * <code>SIGMOID = 19;</code>
       */
      public static final int SIGMOID_VALUE = 19;
      /**
       * <code>SIGMOID_CROSS_ENTROPY_LOSS = 27;</code>
       */
      public static final int SIGMOID_CROSS_ENTROPY_LOSS_VALUE = 27;
      /**
       * <code>SOFTMAX = 20;</code>
       */
      public static final int SOFTMAX_VALUE = 20;
      /**
       * <code>SOFTMAX_LOSS = 21;</code>
       */
      public static final int SOFTMAX_LOSS_VALUE = 21;
      /**
       * <code>SPLIT = 22;</code>
       */
      public static final int SPLIT_VALUE = 22;
      /**
       * <code>TANH = 23;</code>
       */
      public static final int TANH_VALUE = 23;
      /**
       * <code>WINDOW_DATA = 24;</code>
       */
      public static final int WINDOW_DATA_VALUE = 24;
      /**
       * <code>SOFTPLUS = 129;</code>
       */
      public static final int SOFTPLUS_VALUE = 129;


      public final int getNumber() { return value; }

      public static LayerType valueOf(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return ACCURACY;
          case 2: return BNLL;
          case 3: return CONCAT;
          case 4: return CONVOLUTION;
          case 5: return DATA;
          case 6: return DROPOUT;
          case 7: return EUCLIDEAN_LOSS;
          case 25: return ELTWISE_PRODUCT;
          case 8: return FLATTEN;
          case 9: return HDF5_DATA;
          case 10: return HDF5_OUTPUT;
          case 28: return HINGE_LOSS;
          case 11: return IM2COL;
          case 12: return IMAGE_DATA;
          case 13: return INFOGAIN_LOSS;
          case 14: return INNER_PRODUCT;
          case 15: return LRN;
          case 29: return MEMORY_DATA;
          case 16: return MULTINOMIAL_LOGISTIC_LOSS;
          case 17: return POOLING;
          case 130: return SPP;
          case 26: return POWER;
          case 18: return RELU;
          case 19: return SIGMOID;
          case 27: return SIGMOID_CROSS_ENTROPY_LOSS;
          case 20: return SOFTMAX;
          case 21: return SOFTMAX_LOSS;
          case 22: return SPLIT;
          case 23: return TANH;
          case 24: return WINDOW_DATA;
          case 129: return SOFTPLUS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<LayerType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LayerType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LayerType>() {
              public LayerType findValueByNumber(int number) {
                return LayerType.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.LayerParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final LayerType[] VALUES = values();

      public static LayerType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private LayerType(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.LayerParameter.LayerType)
    }

    private int bitField0_;
    public static final int BOTTOM_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList bottom_;
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getBottomList() {
      return bottom_;
    }
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public int getBottomCount() {
      return bottom_.size();
    }
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public java.lang.String getBottom(int index) {
      return bottom_.get(index);
    }
    /**
     * <code>repeated string bottom = 2;</code>
     *
     * <pre>
     * the name of the bottom blobs
     * </pre>
     */
    public com.google.protobuf.ByteString
        getBottomBytes(int index) {
      return bottom_.getByteString(index);
    }

    public static final int TOP_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList top_;
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getTopList() {
      return top_;
    }
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public int getTopCount() {
      return top_.size();
    }
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public java.lang.String getTop(int index) {
      return top_.get(index);
    }
    /**
     * <code>repeated string top = 3;</code>
     *
     * <pre>
     * the name of the top blobs
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTopBytes(int index) {
      return top_.getByteString(index);
    }

    public static final int NAME_FIELD_NUMBER = 4;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 4;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 4;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 4;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 5;
    private caffe.Caffe.LayerParameter.LayerType type_;
    /**
     * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
     *
     * <pre>
     * the layer type from the enum above
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
     *
     * <pre>
     * the layer type from the enum above
     * </pre>
     */
    public caffe.Caffe.LayerParameter.LayerType getType() {
      return type_;
    }

    public static final int BLOBS_FIELD_NUMBER = 6;
    private java.util.List<caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 6;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    public static final int BLOBS_LR_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Float> blobsLr_;
    /**
     * <code>repeated float blobs_lr = 7;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getBlobsLrList() {
      return blobsLr_;
    }
    /**
     * <code>repeated float blobs_lr = 7;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public int getBlobsLrCount() {
      return blobsLr_.size();
    }
    /**
     * <code>repeated float blobs_lr = 7;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public float getBlobsLr(int index) {
      return blobsLr_.get(index);
    }

    public static final int WEIGHT_DECAY_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Float> weightDecay_;
    /**
     * <code>repeated float weight_decay = 8;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getWeightDecayList() {
      return weightDecay_;
    }
    /**
     * <code>repeated float weight_decay = 8;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public int getWeightDecayCount() {
      return weightDecay_.size();
    }
    /**
     * <code>repeated float weight_decay = 8;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public float getWeightDecay(int index) {
      return weightDecay_.get(index);
    }

    public static final int CONCAT_PARAM_FIELD_NUMBER = 9;
    private caffe.Caffe.ConcatParameter concatParam_;
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     *
     * <pre>
     * Parameters for particular layer types.
     * </pre>
     */
    public boolean hasConcatParam() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     *
     * <pre>
     * Parameters for particular layer types.
     * </pre>
     */
    public caffe.Caffe.ConcatParameter getConcatParam() {
      return concatParam_;
    }
    /**
     * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
     *
     * <pre>
     * Parameters for particular layer types.
     * </pre>
     */
    public caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder() {
      return concatParam_;
    }

    public static final int CONVOLUTION_PARAM_FIELD_NUMBER = 10;
    private caffe.Caffe.ConvolutionParameter convolutionParam_;
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    public boolean hasConvolutionParam() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    public caffe.Caffe.ConvolutionParameter getConvolutionParam() {
      return convolutionParam_;
    }
    /**
     * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
     */
    public caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder() {
      return convolutionParam_;
    }

    public static final int DATA_PARAM_FIELD_NUMBER = 11;
    private caffe.Caffe.DataParameter dataParam_;
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    public boolean hasDataParam() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    public caffe.Caffe.DataParameter getDataParam() {
      return dataParam_;
    }
    /**
     * <code>optional .caffe.DataParameter data_param = 11;</code>
     */
    public caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder() {
      return dataParam_;
    }

    public static final int DROPOUT_PARAM_FIELD_NUMBER = 12;
    private caffe.Caffe.DropoutParameter dropoutParam_;
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    public boolean hasDropoutParam() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    public caffe.Caffe.DropoutParameter getDropoutParam() {
      return dropoutParam_;
    }
    /**
     * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
     */
    public caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder() {
      return dropoutParam_;
    }

    public static final int HDF5_DATA_PARAM_FIELD_NUMBER = 13;
    private caffe.Caffe.HDF5DataParameter hdf5DataParam_;
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    public boolean hasHdf5DataParam() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    public caffe.Caffe.HDF5DataParameter getHdf5DataParam() {
      return hdf5DataParam_;
    }
    /**
     * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
     */
    public caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder() {
      return hdf5DataParam_;
    }

    public static final int HDF5_OUTPUT_PARAM_FIELD_NUMBER = 14;
    private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    public boolean hasHdf5OutputParam() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
      return hdf5OutputParam_;
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
     */
    public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
      return hdf5OutputParam_;
    }

    public static final int IMAGE_DATA_PARAM_FIELD_NUMBER = 15;
    private caffe.Caffe.ImageDataParameter imageDataParam_;
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    public boolean hasImageDataParam() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    public caffe.Caffe.ImageDataParameter getImageDataParam() {
      return imageDataParam_;
    }
    /**
     * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
     */
    public caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder() {
      return imageDataParam_;
    }

    public static final int INFOGAIN_LOSS_PARAM_FIELD_NUMBER = 16;
    private caffe.Caffe.InfogainLossParameter infogainLossParam_;
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    public boolean hasInfogainLossParam() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    public caffe.Caffe.InfogainLossParameter getInfogainLossParam() {
      return infogainLossParam_;
    }
    /**
     * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
     */
    public caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder() {
      return infogainLossParam_;
    }

    public static final int INNER_PRODUCT_PARAM_FIELD_NUMBER = 17;
    private caffe.Caffe.InnerProductParameter innerProductParam_;
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    public boolean hasInnerProductParam() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    public caffe.Caffe.InnerProductParameter getInnerProductParam() {
      return innerProductParam_;
    }
    /**
     * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
     */
    public caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder() {
      return innerProductParam_;
    }

    public static final int LRN_PARAM_FIELD_NUMBER = 18;
    private caffe.Caffe.LRNParameter lrnParam_;
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    public boolean hasLrnParam() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    public caffe.Caffe.LRNParameter getLrnParam() {
      return lrnParam_;
    }
    /**
     * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
     */
    public caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder() {
      return lrnParam_;
    }

    public static final int MEMORY_DATA_PARAM_FIELD_NUMBER = 22;
    private caffe.Caffe.MemoryDataParameter memoryDataParam_;
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    public boolean hasMemoryDataParam() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    public caffe.Caffe.MemoryDataParameter getMemoryDataParam() {
      return memoryDataParam_;
    }
    /**
     * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
     */
    public caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder() {
      return memoryDataParam_;
    }

    public static final int POOLING_PARAM_FIELD_NUMBER = 19;
    private caffe.Caffe.PoolingParameter poolingParam_;
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    public boolean hasPoolingParam() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    public caffe.Caffe.PoolingParameter getPoolingParam() {
      return poolingParam_;
    }
    /**
     * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
     */
    public caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder() {
      return poolingParam_;
    }

    public static final int SPP_PARAM_FIELD_NUMBER = 119;
    private caffe.Caffe.SppParameter sppParam_;
    /**
     * <code>optional .caffe.SppParameter spp_param = 119;</code>
     */
    public boolean hasSppParam() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .caffe.SppParameter spp_param = 119;</code>
     */
    public caffe.Caffe.SppParameter getSppParam() {
      return sppParam_;
    }
    /**
     * <code>optional .caffe.SppParameter spp_param = 119;</code>
     */
    public caffe.Caffe.SppParameterOrBuilder getSppParamOrBuilder() {
      return sppParam_;
    }

    public static final int POWER_PARAM_FIELD_NUMBER = 21;
    private caffe.Caffe.PowerParameter powerParam_;
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    public boolean hasPowerParam() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    public caffe.Caffe.PowerParameter getPowerParam() {
      return powerParam_;
    }
    /**
     * <code>optional .caffe.PowerParameter power_param = 21;</code>
     */
    public caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder() {
      return powerParam_;
    }

    public static final int WINDOW_DATA_PARAM_FIELD_NUMBER = 20;
    private caffe.Caffe.WindowDataParameter windowDataParam_;
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    public boolean hasWindowDataParam() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    public caffe.Caffe.WindowDataParameter getWindowDataParam() {
      return windowDataParam_;
    }
    /**
     * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
     */
    public caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder() {
      return windowDataParam_;
    }

    public static final int LAYER_FIELD_NUMBER = 1;
    private caffe.Caffe.V0LayerParameter layer_;
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     *
     * <pre>
     * DEPRECATED: The layer parameters specified as a V0LayerParameter.
     * This should never be used by any code except to upgrade to the new
     * LayerParameter specification.
     * </pre>
     */
    public boolean hasLayer() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     *
     * <pre>
     * DEPRECATED: The layer parameters specified as a V0LayerParameter.
     * This should never be used by any code except to upgrade to the new
     * LayerParameter specification.
     * </pre>
     */
    public caffe.Caffe.V0LayerParameter getLayer() {
      return layer_;
    }
    /**
     * <code>optional .caffe.V0LayerParameter layer = 1;</code>
     *
     * <pre>
     * DEPRECATED: The layer parameters specified as a V0LayerParameter.
     * This should never be used by any code except to upgrade to the new
     * LayerParameter specification.
     * </pre>
     */
    public caffe.Caffe.V0LayerParameterOrBuilder getLayerOrBuilder() {
      return layer_;
    }

    private void initFields() {
      bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      name_ = "";
      type_ = caffe.Caffe.LayerParameter.LayerType.NONE;
      blobs_ = java.util.Collections.emptyList();
      blobsLr_ = java.util.Collections.emptyList();
      weightDecay_ = java.util.Collections.emptyList();
      concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
      convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
      dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
      hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
      infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
      lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
      memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
      sppParam_ = caffe.Caffe.SppParameter.getDefaultInstance();
      powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
      windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
      layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(1, layer_);
      }
      for (int i = 0; i < bottom_.size(); i++) {
        output.writeBytes(2, bottom_.getByteString(i));
      }
      for (int i = 0; i < top_.size(); i++) {
        output.writeBytes(3, top_.getByteString(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(4, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(5, type_.getNumber());
      }
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(6, blobs_.get(i));
      }
      for (int i = 0; i < blobsLr_.size(); i++) {
        output.writeFloat(7, blobsLr_.get(i));
      }
      for (int i = 0; i < weightDecay_.size(); i++) {
        output.writeFloat(8, weightDecay_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(9, concatParam_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(10, convolutionParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(11, dataParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(12, dropoutParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(13, hdf5DataParam_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(14, hdf5OutputParam_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(15, imageDataParam_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(16, infogainLossParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(17, innerProductParam_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(18, lrnParam_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(19, poolingParam_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(20, windowDataParam_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(21, powerParam_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(22, memoryDataParam_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(119, sppParam_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, layer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bottom_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(bottom_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getBottomList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < top_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(top_.getByteString(i));
        }
        size += dataSize;
        size += 1 * getTopList().size();
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, type_.getNumber());
      }
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, blobs_.get(i));
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBlobsLrList().size();
        size += dataSize;
        size += 1 * getBlobsLrList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getWeightDecayList().size();
        size += dataSize;
        size += 1 * getWeightDecayList().size();
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, concatParam_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, convolutionParam_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, dataParam_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, dropoutParam_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, hdf5DataParam_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, hdf5OutputParam_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, imageDataParam_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, infogainLossParam_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, innerProductParam_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, lrnParam_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, poolingParam_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, windowDataParam_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, powerParam_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, memoryDataParam_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(119, sppParam_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.LayerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.LayerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.LayerParameter}
     *
     * <pre>
     * Update the next available ID when you add a new LayerParameter field.
     * LayerParameter next available ID: 23 (last added: memory_data_param)
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.LayerParameter)
        caffe.Caffe.LayerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_LayerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_LayerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.LayerParameter.class, caffe.Caffe.LayerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.LayerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getBlobsFieldBuilder();
          getConcatParamFieldBuilder();
          getConvolutionParamFieldBuilder();
          getDataParamFieldBuilder();
          getDropoutParamFieldBuilder();
          getHdf5DataParamFieldBuilder();
          getHdf5OutputParamFieldBuilder();
          getImageDataParamFieldBuilder();
          getInfogainLossParamFieldBuilder();
          getInnerProductParamFieldBuilder();
          getLrnParamFieldBuilder();
          getMemoryDataParamFieldBuilder();
          getPoolingParamFieldBuilder();
          getSppParamFieldBuilder();
          getPowerParamFieldBuilder();
          getWindowDataParamFieldBuilder();
          getLayerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        type_ = caffe.Caffe.LayerParameter.LayerType.NONE;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          blobsBuilder_.clear();
        }
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        if (concatParamBuilder_ == null) {
          concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
        } else {
          concatParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
        } else {
          convolutionParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (dataParamBuilder_ == null) {
          dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
        } else {
          dataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
        } else {
          dropoutParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
        } else {
          hdf5DataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
        } else {
          imageDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
        } else {
          infogainLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
        } else {
          innerProductParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (lrnParamBuilder_ == null) {
          lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
        } else {
          lrnParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
        } else {
          memoryDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (poolingParamBuilder_ == null) {
          poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
        } else {
          poolingParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (sppParamBuilder_ == null) {
          sppParam_ = caffe.Caffe.SppParameter.getDefaultInstance();
        } else {
          sppParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (powerParamBuilder_ == null) {
          powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
        } else {
          powerParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
        } else {
          windowDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (layerBuilder_ == null) {
          layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
        } else {
          layerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_LayerParameter_descriptor;
      }

      public caffe.Caffe.LayerParameter getDefaultInstanceForType() {
        return caffe.Caffe.LayerParameter.getDefaultInstance();
      }

      public caffe.Caffe.LayerParameter build() {
        caffe.Caffe.LayerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.LayerParameter buildPartial() {
        caffe.Caffe.LayerParameter result = new caffe.Caffe.LayerParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          bottom_ = bottom_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.bottom_ = bottom_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          top_ = top_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.top_ = top_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.blobsLr_ = blobsLr_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.weightDecay_ = weightDecay_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000004;
        }
        if (concatParamBuilder_ == null) {
          result.concatParam_ = concatParam_;
        } else {
          result.concatParam_ = concatParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000008;
        }
        if (convolutionParamBuilder_ == null) {
          result.convolutionParam_ = convolutionParam_;
        } else {
          result.convolutionParam_ = convolutionParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000010;
        }
        if (dataParamBuilder_ == null) {
          result.dataParam_ = dataParam_;
        } else {
          result.dataParam_ = dataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000020;
        }
        if (dropoutParamBuilder_ == null) {
          result.dropoutParam_ = dropoutParam_;
        } else {
          result.dropoutParam_ = dropoutParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000040;
        }
        if (hdf5DataParamBuilder_ == null) {
          result.hdf5DataParam_ = hdf5DataParam_;
        } else {
          result.hdf5DataParam_ = hdf5DataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000080;
        }
        if (hdf5OutputParamBuilder_ == null) {
          result.hdf5OutputParam_ = hdf5OutputParam_;
        } else {
          result.hdf5OutputParam_ = hdf5OutputParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000100;
        }
        if (imageDataParamBuilder_ == null) {
          result.imageDataParam_ = imageDataParam_;
        } else {
          result.imageDataParam_ = imageDataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000200;
        }
        if (infogainLossParamBuilder_ == null) {
          result.infogainLossParam_ = infogainLossParam_;
        } else {
          result.infogainLossParam_ = infogainLossParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00000400;
        }
        if (innerProductParamBuilder_ == null) {
          result.innerProductParam_ = innerProductParam_;
        } else {
          result.innerProductParam_ = innerProductParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00000800;
        }
        if (lrnParamBuilder_ == null) {
          result.lrnParam_ = lrnParam_;
        } else {
          result.lrnParam_ = lrnParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (memoryDataParamBuilder_ == null) {
          result.memoryDataParam_ = memoryDataParam_;
        } else {
          result.memoryDataParam_ = memoryDataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (poolingParamBuilder_ == null) {
          result.poolingParam_ = poolingParam_;
        } else {
          result.poolingParam_ = poolingParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (sppParamBuilder_ == null) {
          result.sppParam_ = sppParam_;
        } else {
          result.sppParam_ = sppParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (powerParamBuilder_ == null) {
          result.powerParam_ = powerParam_;
        } else {
          result.powerParam_ = powerParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (windowDataParamBuilder_ == null) {
          result.windowDataParam_ = windowDataParam_;
        } else {
          result.windowDataParam_ = windowDataParamBuilder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (layerBuilder_ == null) {
          result.layer_ = layer_;
        } else {
          result.layer_ = layerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.LayerParameter) {
          return mergeFrom((caffe.Caffe.LayerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.LayerParameter other) {
        if (other == caffe.Caffe.LayerParameter.getDefaultInstance()) return this;
        if (!other.bottom_.isEmpty()) {
          if (bottom_.isEmpty()) {
            bottom_ = other.bottom_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBottomIsMutable();
            bottom_.addAll(other.bottom_);
          }
          onChanged();
        }
        if (!other.top_.isEmpty()) {
          if (top_.isEmpty()) {
            top_ = other.top_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTopIsMutable();
            top_.addAll(other.top_);
          }
          onChanged();
        }
        if (other.hasName()) {
          bitField0_ |= 0x00000004;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00000010);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        if (!other.blobsLr_.isEmpty()) {
          if (blobsLr_.isEmpty()) {
            blobsLr_ = other.blobsLr_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureBlobsLrIsMutable();
            blobsLr_.addAll(other.blobsLr_);
          }
          onChanged();
        }
        if (!other.weightDecay_.isEmpty()) {
          if (weightDecay_.isEmpty()) {
            weightDecay_ = other.weightDecay_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureWeightDecayIsMutable();
            weightDecay_.addAll(other.weightDecay_);
          }
          onChanged();
        }
        if (other.hasConcatParam()) {
          mergeConcatParam(other.getConcatParam());
        }
        if (other.hasConvolutionParam()) {
          mergeConvolutionParam(other.getConvolutionParam());
        }
        if (other.hasDataParam()) {
          mergeDataParam(other.getDataParam());
        }
        if (other.hasDropoutParam()) {
          mergeDropoutParam(other.getDropoutParam());
        }
        if (other.hasHdf5DataParam()) {
          mergeHdf5DataParam(other.getHdf5DataParam());
        }
        if (other.hasHdf5OutputParam()) {
          mergeHdf5OutputParam(other.getHdf5OutputParam());
        }
        if (other.hasImageDataParam()) {
          mergeImageDataParam(other.getImageDataParam());
        }
        if (other.hasInfogainLossParam()) {
          mergeInfogainLossParam(other.getInfogainLossParam());
        }
        if (other.hasInnerProductParam()) {
          mergeInnerProductParam(other.getInnerProductParam());
        }
        if (other.hasLrnParam()) {
          mergeLrnParam(other.getLrnParam());
        }
        if (other.hasMemoryDataParam()) {
          mergeMemoryDataParam(other.getMemoryDataParam());
        }
        if (other.hasPoolingParam()) {
          mergePoolingParam(other.getPoolingParam());
        }
        if (other.hasSppParam()) {
          mergeSppParam(other.getSppParam());
        }
        if (other.hasPowerParam()) {
          mergePowerParam(other.getPowerParam());
        }
        if (other.hasWindowDataParam()) {
          mergeWindowDataParam(other.getWindowDataParam());
        }
        if (other.hasLayer()) {
          mergeLayer(other.getLayer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.LayerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.LayerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.LazyStringList bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBottomIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          bottom_ = new com.google.protobuf.LazyStringArrayList(bottom_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getBottomList() {
        return bottom_.getUnmodifiableView();
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public int getBottomCount() {
        return bottom_.size();
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public java.lang.String getBottom(int index) {
        return bottom_.get(index);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public com.google.protobuf.ByteString
          getBottomBytes(int index) {
        return bottom_.getByteString(index);
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder setBottom(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder addBottom(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder addAllBottom(
          java.lang.Iterable<java.lang.String> values) {
        ensureBottomIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bottom_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder clearBottom() {
        bottom_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string bottom = 2;</code>
       *
       * <pre>
       * the name of the bottom blobs
       * </pre>
       */
      public Builder addBottomBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBottomIsMutable();
        bottom_.add(value);
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTopIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          top_ = new com.google.protobuf.LazyStringArrayList(top_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public com.google.protobuf.ProtocolStringList
          getTopList() {
        return top_.getUnmodifiableView();
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public int getTopCount() {
        return top_.size();
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public java.lang.String getTop(int index) {
        return top_.get(index);
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTopBytes(int index) {
        return top_.getByteString(index);
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder setTop(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder addTop(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder addAllTop(
          java.lang.Iterable<java.lang.String> values) {
        ensureTopIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, top_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder clearTop() {
        top_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string top = 3;</code>
       *
       * <pre>
       * the name of the top blobs
       * </pre>
       */
      public Builder addTopBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopIsMutable();
        top_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 4;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 4;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 4;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 4;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 4;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 4;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        name_ = value;
        onChanged();
        return this;
      }

      private caffe.Caffe.LayerParameter.LayerType type_ = caffe.Caffe.LayerParameter.LayerType.NONE;
      /**
       * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
       *
       * <pre>
       * the layer type from the enum above
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
       *
       * <pre>
       * the layer type from the enum above
       * </pre>
       */
      public caffe.Caffe.LayerParameter.LayerType getType() {
        return type_;
      }
      /**
       * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
       *
       * <pre>
       * the layer type from the enum above
       * </pre>
       */
      public Builder setType(caffe.Caffe.LayerParameter.LayerType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.LayerParameter.LayerType type = 5;</code>
       *
       * <pre>
       * the layer type from the enum above
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        type_ = caffe.Caffe.LayerParameter.LayerType.NONE;
        onChanged();
        return this;
      }

      private java.util.List<caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 6;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      private java.util.List<java.lang.Float> blobsLr_ = java.util.Collections.emptyList();
      private void ensureBlobsLrIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          blobsLr_ = new java.util.ArrayList<java.lang.Float>(blobsLr_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getBlobsLrList() {
        return java.util.Collections.unmodifiableList(blobsLr_);
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public int getBlobsLrCount() {
        return blobsLr_.size();
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public float getBlobsLr(int index) {
        return blobsLr_.get(index);
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder setBlobsLr(
          int index, float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addBlobsLr(float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addAllBlobsLr(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureBlobsLrIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blobsLr_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 7;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder clearBlobsLr() {
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> weightDecay_ = java.util.Collections.emptyList();
      private void ensureWeightDecayIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          weightDecay_ = new java.util.ArrayList<java.lang.Float>(weightDecay_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getWeightDecayList() {
        return java.util.Collections.unmodifiableList(weightDecay_);
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public int getWeightDecayCount() {
        return weightDecay_.size();
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public float getWeightDecay(int index) {
        return weightDecay_.get(index);
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder setWeightDecay(
          int index, float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addWeightDecay(float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addAllWeightDecay(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureWeightDecayIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, weightDecay_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 8;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder clearWeightDecay() {
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private caffe.Caffe.ConcatParameter concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder> concatParamBuilder_;
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public boolean hasConcatParam() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public caffe.Caffe.ConcatParameter getConcatParam() {
        if (concatParamBuilder_ == null) {
          return concatParam_;
        } else {
          return concatParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public Builder setConcatParam(caffe.Caffe.ConcatParameter value) {
        if (concatParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          concatParam_ = value;
          onChanged();
        } else {
          concatParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public Builder setConcatParam(
          caffe.Caffe.ConcatParameter.Builder builderForValue) {
        if (concatParamBuilder_ == null) {
          concatParam_ = builderForValue.build();
          onChanged();
        } else {
          concatParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public Builder mergeConcatParam(caffe.Caffe.ConcatParameter value) {
        if (concatParamBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              concatParam_ != caffe.Caffe.ConcatParameter.getDefaultInstance()) {
            concatParam_ =
              caffe.Caffe.ConcatParameter.newBuilder(concatParam_).mergeFrom(value).buildPartial();
          } else {
            concatParam_ = value;
          }
          onChanged();
        } else {
          concatParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public Builder clearConcatParam() {
        if (concatParamBuilder_ == null) {
          concatParam_ = caffe.Caffe.ConcatParameter.getDefaultInstance();
          onChanged();
        } else {
          concatParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public caffe.Caffe.ConcatParameter.Builder getConcatParamBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getConcatParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      public caffe.Caffe.ConcatParameterOrBuilder getConcatParamOrBuilder() {
        if (concatParamBuilder_ != null) {
          return concatParamBuilder_.getMessageOrBuilder();
        } else {
          return concatParam_;
        }
      }
      /**
       * <code>optional .caffe.ConcatParameter concat_param = 9;</code>
       *
       * <pre>
       * Parameters for particular layer types.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder> 
          getConcatParamFieldBuilder() {
        if (concatParamBuilder_ == null) {
          concatParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ConcatParameter, caffe.Caffe.ConcatParameter.Builder, caffe.Caffe.ConcatParameterOrBuilder>(
                  getConcatParam(),
                  getParentForChildren(),
                  isClean());
          concatParam_ = null;
        }
        return concatParamBuilder_;
      }

      private caffe.Caffe.ConvolutionParameter convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder> convolutionParamBuilder_;
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public boolean hasConvolutionParam() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public caffe.Caffe.ConvolutionParameter getConvolutionParam() {
        if (convolutionParamBuilder_ == null) {
          return convolutionParam_;
        } else {
          return convolutionParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder setConvolutionParam(caffe.Caffe.ConvolutionParameter value) {
        if (convolutionParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          convolutionParam_ = value;
          onChanged();
        } else {
          convolutionParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder setConvolutionParam(
          caffe.Caffe.ConvolutionParameter.Builder builderForValue) {
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = builderForValue.build();
          onChanged();
        } else {
          convolutionParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder mergeConvolutionParam(caffe.Caffe.ConvolutionParameter value) {
        if (convolutionParamBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              convolutionParam_ != caffe.Caffe.ConvolutionParameter.getDefaultInstance()) {
            convolutionParam_ =
              caffe.Caffe.ConvolutionParameter.newBuilder(convolutionParam_).mergeFrom(value).buildPartial();
          } else {
            convolutionParam_ = value;
          }
          onChanged();
        } else {
          convolutionParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public Builder clearConvolutionParam() {
        if (convolutionParamBuilder_ == null) {
          convolutionParam_ = caffe.Caffe.ConvolutionParameter.getDefaultInstance();
          onChanged();
        } else {
          convolutionParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public caffe.Caffe.ConvolutionParameter.Builder getConvolutionParamBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getConvolutionParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      public caffe.Caffe.ConvolutionParameterOrBuilder getConvolutionParamOrBuilder() {
        if (convolutionParamBuilder_ != null) {
          return convolutionParamBuilder_.getMessageOrBuilder();
        } else {
          return convolutionParam_;
        }
      }
      /**
       * <code>optional .caffe.ConvolutionParameter convolution_param = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder> 
          getConvolutionParamFieldBuilder() {
        if (convolutionParamBuilder_ == null) {
          convolutionParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ConvolutionParameter, caffe.Caffe.ConvolutionParameter.Builder, caffe.Caffe.ConvolutionParameterOrBuilder>(
                  getConvolutionParam(),
                  getParentForChildren(),
                  isClean());
          convolutionParam_ = null;
        }
        return convolutionParamBuilder_;
      }

      private caffe.Caffe.DataParameter dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder> dataParamBuilder_;
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public boolean hasDataParam() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public caffe.Caffe.DataParameter getDataParam() {
        if (dataParamBuilder_ == null) {
          return dataParam_;
        } else {
          return dataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder setDataParam(caffe.Caffe.DataParameter value) {
        if (dataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dataParam_ = value;
          onChanged();
        } else {
          dataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder setDataParam(
          caffe.Caffe.DataParameter.Builder builderForValue) {
        if (dataParamBuilder_ == null) {
          dataParam_ = builderForValue.build();
          onChanged();
        } else {
          dataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder mergeDataParam(caffe.Caffe.DataParameter value) {
        if (dataParamBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              dataParam_ != caffe.Caffe.DataParameter.getDefaultInstance()) {
            dataParam_ =
              caffe.Caffe.DataParameter.newBuilder(dataParam_).mergeFrom(value).buildPartial();
          } else {
            dataParam_ = value;
          }
          onChanged();
        } else {
          dataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public Builder clearDataParam() {
        if (dataParamBuilder_ == null) {
          dataParam_ = caffe.Caffe.DataParameter.getDefaultInstance();
          onChanged();
        } else {
          dataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public caffe.Caffe.DataParameter.Builder getDataParamBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      public caffe.Caffe.DataParameterOrBuilder getDataParamOrBuilder() {
        if (dataParamBuilder_ != null) {
          return dataParamBuilder_.getMessageOrBuilder();
        } else {
          return dataParam_;
        }
      }
      /**
       * <code>optional .caffe.DataParameter data_param = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder> 
          getDataParamFieldBuilder() {
        if (dataParamBuilder_ == null) {
          dataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DataParameter, caffe.Caffe.DataParameter.Builder, caffe.Caffe.DataParameterOrBuilder>(
                  getDataParam(),
                  getParentForChildren(),
                  isClean());
          dataParam_ = null;
        }
        return dataParamBuilder_;
      }

      private caffe.Caffe.DropoutParameter dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder> dropoutParamBuilder_;
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public boolean hasDropoutParam() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public caffe.Caffe.DropoutParameter getDropoutParam() {
        if (dropoutParamBuilder_ == null) {
          return dropoutParam_;
        } else {
          return dropoutParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder setDropoutParam(caffe.Caffe.DropoutParameter value) {
        if (dropoutParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          dropoutParam_ = value;
          onChanged();
        } else {
          dropoutParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder setDropoutParam(
          caffe.Caffe.DropoutParameter.Builder builderForValue) {
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = builderForValue.build();
          onChanged();
        } else {
          dropoutParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder mergeDropoutParam(caffe.Caffe.DropoutParameter value) {
        if (dropoutParamBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              dropoutParam_ != caffe.Caffe.DropoutParameter.getDefaultInstance()) {
            dropoutParam_ =
              caffe.Caffe.DropoutParameter.newBuilder(dropoutParam_).mergeFrom(value).buildPartial();
          } else {
            dropoutParam_ = value;
          }
          onChanged();
        } else {
          dropoutParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public Builder clearDropoutParam() {
        if (dropoutParamBuilder_ == null) {
          dropoutParam_ = caffe.Caffe.DropoutParameter.getDefaultInstance();
          onChanged();
        } else {
          dropoutParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public caffe.Caffe.DropoutParameter.Builder getDropoutParamBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getDropoutParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      public caffe.Caffe.DropoutParameterOrBuilder getDropoutParamOrBuilder() {
        if (dropoutParamBuilder_ != null) {
          return dropoutParamBuilder_.getMessageOrBuilder();
        } else {
          return dropoutParam_;
        }
      }
      /**
       * <code>optional .caffe.DropoutParameter dropout_param = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder> 
          getDropoutParamFieldBuilder() {
        if (dropoutParamBuilder_ == null) {
          dropoutParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.DropoutParameter, caffe.Caffe.DropoutParameter.Builder, caffe.Caffe.DropoutParameterOrBuilder>(
                  getDropoutParam(),
                  getParentForChildren(),
                  isClean());
          dropoutParam_ = null;
        }
        return dropoutParamBuilder_;
      }

      private caffe.Caffe.HDF5DataParameter hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder> hdf5DataParamBuilder_;
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public boolean hasHdf5DataParam() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public caffe.Caffe.HDF5DataParameter getHdf5DataParam() {
        if (hdf5DataParamBuilder_ == null) {
          return hdf5DataParam_;
        } else {
          return hdf5DataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder setHdf5DataParam(caffe.Caffe.HDF5DataParameter value) {
        if (hdf5DataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5DataParam_ = value;
          onChanged();
        } else {
          hdf5DataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder setHdf5DataParam(
          caffe.Caffe.HDF5DataParameter.Builder builderForValue) {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5DataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder mergeHdf5DataParam(caffe.Caffe.HDF5DataParameter value) {
        if (hdf5DataParamBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              hdf5DataParam_ != caffe.Caffe.HDF5DataParameter.getDefaultInstance()) {
            hdf5DataParam_ =
              caffe.Caffe.HDF5DataParameter.newBuilder(hdf5DataParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5DataParam_ = value;
          }
          onChanged();
        } else {
          hdf5DataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public Builder clearHdf5DataParam() {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParam_ = caffe.Caffe.HDF5DataParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5DataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public caffe.Caffe.HDF5DataParameter.Builder getHdf5DataParamBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getHdf5DataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      public caffe.Caffe.HDF5DataParameterOrBuilder getHdf5DataParamOrBuilder() {
        if (hdf5DataParamBuilder_ != null) {
          return hdf5DataParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5DataParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5DataParameter hdf5_data_param = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder> 
          getHdf5DataParamFieldBuilder() {
        if (hdf5DataParamBuilder_ == null) {
          hdf5DataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5DataParameter, caffe.Caffe.HDF5DataParameter.Builder, caffe.Caffe.HDF5DataParameterOrBuilder>(
                  getHdf5DataParam(),
                  getParentForChildren(),
                  isClean());
          hdf5DataParam_ = null;
        }
        return hdf5DataParamBuilder_;
      }

      private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> hdf5OutputParamBuilder_;
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public boolean hasHdf5OutputParam() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          return hdf5OutputParam_;
        } else {
          return hdf5OutputParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder setHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5OutputParam_ = value;
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder setHdf5OutputParam(
          caffe.Caffe.HDF5OutputParameter.Builder builderForValue) {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder mergeHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              hdf5OutputParam_ != caffe.Caffe.HDF5OutputParameter.getDefaultInstance()) {
            hdf5OutputParam_ =
              caffe.Caffe.HDF5OutputParameter.newBuilder(hdf5OutputParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5OutputParam_ = value;
          }
          onChanged();
        } else {
          hdf5OutputParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public Builder clearHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public caffe.Caffe.HDF5OutputParameter.Builder getHdf5OutputParamBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getHdf5OutputParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
        if (hdf5OutputParamBuilder_ != null) {
          return hdf5OutputParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5OutputParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> 
          getHdf5OutputParamFieldBuilder() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder>(
                  getHdf5OutputParam(),
                  getParentForChildren(),
                  isClean());
          hdf5OutputParam_ = null;
        }
        return hdf5OutputParamBuilder_;
      }

      private caffe.Caffe.ImageDataParameter imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder> imageDataParamBuilder_;
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public boolean hasImageDataParam() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public caffe.Caffe.ImageDataParameter getImageDataParam() {
        if (imageDataParamBuilder_ == null) {
          return imageDataParam_;
        } else {
          return imageDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder setImageDataParam(caffe.Caffe.ImageDataParameter value) {
        if (imageDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          imageDataParam_ = value;
          onChanged();
        } else {
          imageDataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder setImageDataParam(
          caffe.Caffe.ImageDataParameter.Builder builderForValue) {
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = builderForValue.build();
          onChanged();
        } else {
          imageDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder mergeImageDataParam(caffe.Caffe.ImageDataParameter value) {
        if (imageDataParamBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              imageDataParam_ != caffe.Caffe.ImageDataParameter.getDefaultInstance()) {
            imageDataParam_ =
              caffe.Caffe.ImageDataParameter.newBuilder(imageDataParam_).mergeFrom(value).buildPartial();
          } else {
            imageDataParam_ = value;
          }
          onChanged();
        } else {
          imageDataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public Builder clearImageDataParam() {
        if (imageDataParamBuilder_ == null) {
          imageDataParam_ = caffe.Caffe.ImageDataParameter.getDefaultInstance();
          onChanged();
        } else {
          imageDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public caffe.Caffe.ImageDataParameter.Builder getImageDataParamBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getImageDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      public caffe.Caffe.ImageDataParameterOrBuilder getImageDataParamOrBuilder() {
        if (imageDataParamBuilder_ != null) {
          return imageDataParamBuilder_.getMessageOrBuilder();
        } else {
          return imageDataParam_;
        }
      }
      /**
       * <code>optional .caffe.ImageDataParameter image_data_param = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder> 
          getImageDataParamFieldBuilder() {
        if (imageDataParamBuilder_ == null) {
          imageDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.ImageDataParameter, caffe.Caffe.ImageDataParameter.Builder, caffe.Caffe.ImageDataParameterOrBuilder>(
                  getImageDataParam(),
                  getParentForChildren(),
                  isClean());
          imageDataParam_ = null;
        }
        return imageDataParamBuilder_;
      }

      private caffe.Caffe.InfogainLossParameter infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder> infogainLossParamBuilder_;
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public boolean hasInfogainLossParam() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public caffe.Caffe.InfogainLossParameter getInfogainLossParam() {
        if (infogainLossParamBuilder_ == null) {
          return infogainLossParam_;
        } else {
          return infogainLossParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder setInfogainLossParam(caffe.Caffe.InfogainLossParameter value) {
        if (infogainLossParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          infogainLossParam_ = value;
          onChanged();
        } else {
          infogainLossParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder setInfogainLossParam(
          caffe.Caffe.InfogainLossParameter.Builder builderForValue) {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = builderForValue.build();
          onChanged();
        } else {
          infogainLossParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder mergeInfogainLossParam(caffe.Caffe.InfogainLossParameter value) {
        if (infogainLossParamBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              infogainLossParam_ != caffe.Caffe.InfogainLossParameter.getDefaultInstance()) {
            infogainLossParam_ =
              caffe.Caffe.InfogainLossParameter.newBuilder(infogainLossParam_).mergeFrom(value).buildPartial();
          } else {
            infogainLossParam_ = value;
          }
          onChanged();
        } else {
          infogainLossParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public Builder clearInfogainLossParam() {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParam_ = caffe.Caffe.InfogainLossParameter.getDefaultInstance();
          onChanged();
        } else {
          infogainLossParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public caffe.Caffe.InfogainLossParameter.Builder getInfogainLossParamBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getInfogainLossParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      public caffe.Caffe.InfogainLossParameterOrBuilder getInfogainLossParamOrBuilder() {
        if (infogainLossParamBuilder_ != null) {
          return infogainLossParamBuilder_.getMessageOrBuilder();
        } else {
          return infogainLossParam_;
        }
      }
      /**
       * <code>optional .caffe.InfogainLossParameter infogain_loss_param = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder> 
          getInfogainLossParamFieldBuilder() {
        if (infogainLossParamBuilder_ == null) {
          infogainLossParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.InfogainLossParameter, caffe.Caffe.InfogainLossParameter.Builder, caffe.Caffe.InfogainLossParameterOrBuilder>(
                  getInfogainLossParam(),
                  getParentForChildren(),
                  isClean());
          infogainLossParam_ = null;
        }
        return infogainLossParamBuilder_;
      }

      private caffe.Caffe.InnerProductParameter innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder> innerProductParamBuilder_;
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public boolean hasInnerProductParam() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public caffe.Caffe.InnerProductParameter getInnerProductParam() {
        if (innerProductParamBuilder_ == null) {
          return innerProductParam_;
        } else {
          return innerProductParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder setInnerProductParam(caffe.Caffe.InnerProductParameter value) {
        if (innerProductParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innerProductParam_ = value;
          onChanged();
        } else {
          innerProductParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder setInnerProductParam(
          caffe.Caffe.InnerProductParameter.Builder builderForValue) {
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = builderForValue.build();
          onChanged();
        } else {
          innerProductParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder mergeInnerProductParam(caffe.Caffe.InnerProductParameter value) {
        if (innerProductParamBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              innerProductParam_ != caffe.Caffe.InnerProductParameter.getDefaultInstance()) {
            innerProductParam_ =
              caffe.Caffe.InnerProductParameter.newBuilder(innerProductParam_).mergeFrom(value).buildPartial();
          } else {
            innerProductParam_ = value;
          }
          onChanged();
        } else {
          innerProductParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public Builder clearInnerProductParam() {
        if (innerProductParamBuilder_ == null) {
          innerProductParam_ = caffe.Caffe.InnerProductParameter.getDefaultInstance();
          onChanged();
        } else {
          innerProductParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public caffe.Caffe.InnerProductParameter.Builder getInnerProductParamBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getInnerProductParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      public caffe.Caffe.InnerProductParameterOrBuilder getInnerProductParamOrBuilder() {
        if (innerProductParamBuilder_ != null) {
          return innerProductParamBuilder_.getMessageOrBuilder();
        } else {
          return innerProductParam_;
        }
      }
      /**
       * <code>optional .caffe.InnerProductParameter inner_product_param = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder> 
          getInnerProductParamFieldBuilder() {
        if (innerProductParamBuilder_ == null) {
          innerProductParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.InnerProductParameter, caffe.Caffe.InnerProductParameter.Builder, caffe.Caffe.InnerProductParameterOrBuilder>(
                  getInnerProductParam(),
                  getParentForChildren(),
                  isClean());
          innerProductParam_ = null;
        }
        return innerProductParamBuilder_;
      }

      private caffe.Caffe.LRNParameter lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder> lrnParamBuilder_;
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public boolean hasLrnParam() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public caffe.Caffe.LRNParameter getLrnParam() {
        if (lrnParamBuilder_ == null) {
          return lrnParam_;
        } else {
          return lrnParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder setLrnParam(caffe.Caffe.LRNParameter value) {
        if (lrnParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lrnParam_ = value;
          onChanged();
        } else {
          lrnParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder setLrnParam(
          caffe.Caffe.LRNParameter.Builder builderForValue) {
        if (lrnParamBuilder_ == null) {
          lrnParam_ = builderForValue.build();
          onChanged();
        } else {
          lrnParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder mergeLrnParam(caffe.Caffe.LRNParameter value) {
        if (lrnParamBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              lrnParam_ != caffe.Caffe.LRNParameter.getDefaultInstance()) {
            lrnParam_ =
              caffe.Caffe.LRNParameter.newBuilder(lrnParam_).mergeFrom(value).buildPartial();
          } else {
            lrnParam_ = value;
          }
          onChanged();
        } else {
          lrnParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public Builder clearLrnParam() {
        if (lrnParamBuilder_ == null) {
          lrnParam_ = caffe.Caffe.LRNParameter.getDefaultInstance();
          onChanged();
        } else {
          lrnParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public caffe.Caffe.LRNParameter.Builder getLrnParamBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getLrnParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      public caffe.Caffe.LRNParameterOrBuilder getLrnParamOrBuilder() {
        if (lrnParamBuilder_ != null) {
          return lrnParamBuilder_.getMessageOrBuilder();
        } else {
          return lrnParam_;
        }
      }
      /**
       * <code>optional .caffe.LRNParameter lrn_param = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder> 
          getLrnParamFieldBuilder() {
        if (lrnParamBuilder_ == null) {
          lrnParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.LRNParameter, caffe.Caffe.LRNParameter.Builder, caffe.Caffe.LRNParameterOrBuilder>(
                  getLrnParam(),
                  getParentForChildren(),
                  isClean());
          lrnParam_ = null;
        }
        return lrnParamBuilder_;
      }

      private caffe.Caffe.MemoryDataParameter memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder> memoryDataParamBuilder_;
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public boolean hasMemoryDataParam() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public caffe.Caffe.MemoryDataParameter getMemoryDataParam() {
        if (memoryDataParamBuilder_ == null) {
          return memoryDataParam_;
        } else {
          return memoryDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder setMemoryDataParam(caffe.Caffe.MemoryDataParameter value) {
        if (memoryDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          memoryDataParam_ = value;
          onChanged();
        } else {
          memoryDataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder setMemoryDataParam(
          caffe.Caffe.MemoryDataParameter.Builder builderForValue) {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = builderForValue.build();
          onChanged();
        } else {
          memoryDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder mergeMemoryDataParam(caffe.Caffe.MemoryDataParameter value) {
        if (memoryDataParamBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              memoryDataParam_ != caffe.Caffe.MemoryDataParameter.getDefaultInstance()) {
            memoryDataParam_ =
              caffe.Caffe.MemoryDataParameter.newBuilder(memoryDataParam_).mergeFrom(value).buildPartial();
          } else {
            memoryDataParam_ = value;
          }
          onChanged();
        } else {
          memoryDataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public Builder clearMemoryDataParam() {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParam_ = caffe.Caffe.MemoryDataParameter.getDefaultInstance();
          onChanged();
        } else {
          memoryDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public caffe.Caffe.MemoryDataParameter.Builder getMemoryDataParamBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getMemoryDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      public caffe.Caffe.MemoryDataParameterOrBuilder getMemoryDataParamOrBuilder() {
        if (memoryDataParamBuilder_ != null) {
          return memoryDataParamBuilder_.getMessageOrBuilder();
        } else {
          return memoryDataParam_;
        }
      }
      /**
       * <code>optional .caffe.MemoryDataParameter memory_data_param = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder> 
          getMemoryDataParamFieldBuilder() {
        if (memoryDataParamBuilder_ == null) {
          memoryDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.MemoryDataParameter, caffe.Caffe.MemoryDataParameter.Builder, caffe.Caffe.MemoryDataParameterOrBuilder>(
                  getMemoryDataParam(),
                  getParentForChildren(),
                  isClean());
          memoryDataParam_ = null;
        }
        return memoryDataParamBuilder_;
      }

      private caffe.Caffe.PoolingParameter poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder> poolingParamBuilder_;
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public boolean hasPoolingParam() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public caffe.Caffe.PoolingParameter getPoolingParam() {
        if (poolingParamBuilder_ == null) {
          return poolingParam_;
        } else {
          return poolingParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder setPoolingParam(caffe.Caffe.PoolingParameter value) {
        if (poolingParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          poolingParam_ = value;
          onChanged();
        } else {
          poolingParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder setPoolingParam(
          caffe.Caffe.PoolingParameter.Builder builderForValue) {
        if (poolingParamBuilder_ == null) {
          poolingParam_ = builderForValue.build();
          onChanged();
        } else {
          poolingParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder mergePoolingParam(caffe.Caffe.PoolingParameter value) {
        if (poolingParamBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              poolingParam_ != caffe.Caffe.PoolingParameter.getDefaultInstance()) {
            poolingParam_ =
              caffe.Caffe.PoolingParameter.newBuilder(poolingParam_).mergeFrom(value).buildPartial();
          } else {
            poolingParam_ = value;
          }
          onChanged();
        } else {
          poolingParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public Builder clearPoolingParam() {
        if (poolingParamBuilder_ == null) {
          poolingParam_ = caffe.Caffe.PoolingParameter.getDefaultInstance();
          onChanged();
        } else {
          poolingParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public caffe.Caffe.PoolingParameter.Builder getPoolingParamBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getPoolingParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      public caffe.Caffe.PoolingParameterOrBuilder getPoolingParamOrBuilder() {
        if (poolingParamBuilder_ != null) {
          return poolingParamBuilder_.getMessageOrBuilder();
        } else {
          return poolingParam_;
        }
      }
      /**
       * <code>optional .caffe.PoolingParameter pooling_param = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder> 
          getPoolingParamFieldBuilder() {
        if (poolingParamBuilder_ == null) {
          poolingParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PoolingParameter, caffe.Caffe.PoolingParameter.Builder, caffe.Caffe.PoolingParameterOrBuilder>(
                  getPoolingParam(),
                  getParentForChildren(),
                  isClean());
          poolingParam_ = null;
        }
        return poolingParamBuilder_;
      }

      private caffe.Caffe.SppParameter sppParam_ = caffe.Caffe.SppParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SppParameter, caffe.Caffe.SppParameter.Builder, caffe.Caffe.SppParameterOrBuilder> sppParamBuilder_;
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public boolean hasSppParam() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public caffe.Caffe.SppParameter getSppParam() {
        if (sppParamBuilder_ == null) {
          return sppParam_;
        } else {
          return sppParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public Builder setSppParam(caffe.Caffe.SppParameter value) {
        if (sppParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sppParam_ = value;
          onChanged();
        } else {
          sppParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public Builder setSppParam(
          caffe.Caffe.SppParameter.Builder builderForValue) {
        if (sppParamBuilder_ == null) {
          sppParam_ = builderForValue.build();
          onChanged();
        } else {
          sppParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public Builder mergeSppParam(caffe.Caffe.SppParameter value) {
        if (sppParamBuilder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              sppParam_ != caffe.Caffe.SppParameter.getDefaultInstance()) {
            sppParam_ =
              caffe.Caffe.SppParameter.newBuilder(sppParam_).mergeFrom(value).buildPartial();
          } else {
            sppParam_ = value;
          }
          onChanged();
        } else {
          sppParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public Builder clearSppParam() {
        if (sppParamBuilder_ == null) {
          sppParam_ = caffe.Caffe.SppParameter.getDefaultInstance();
          onChanged();
        } else {
          sppParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public caffe.Caffe.SppParameter.Builder getSppParamBuilder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getSppParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      public caffe.Caffe.SppParameterOrBuilder getSppParamOrBuilder() {
        if (sppParamBuilder_ != null) {
          return sppParamBuilder_.getMessageOrBuilder();
        } else {
          return sppParam_;
        }
      }
      /**
       * <code>optional .caffe.SppParameter spp_param = 119;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.SppParameter, caffe.Caffe.SppParameter.Builder, caffe.Caffe.SppParameterOrBuilder> 
          getSppParamFieldBuilder() {
        if (sppParamBuilder_ == null) {
          sppParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.SppParameter, caffe.Caffe.SppParameter.Builder, caffe.Caffe.SppParameterOrBuilder>(
                  getSppParam(),
                  getParentForChildren(),
                  isClean());
          sppParam_ = null;
        }
        return sppParamBuilder_;
      }

      private caffe.Caffe.PowerParameter powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder> powerParamBuilder_;
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public boolean hasPowerParam() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public caffe.Caffe.PowerParameter getPowerParam() {
        if (powerParamBuilder_ == null) {
          return powerParam_;
        } else {
          return powerParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder setPowerParam(caffe.Caffe.PowerParameter value) {
        if (powerParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          powerParam_ = value;
          onChanged();
        } else {
          powerParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder setPowerParam(
          caffe.Caffe.PowerParameter.Builder builderForValue) {
        if (powerParamBuilder_ == null) {
          powerParam_ = builderForValue.build();
          onChanged();
        } else {
          powerParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder mergePowerParam(caffe.Caffe.PowerParameter value) {
        if (powerParamBuilder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              powerParam_ != caffe.Caffe.PowerParameter.getDefaultInstance()) {
            powerParam_ =
              caffe.Caffe.PowerParameter.newBuilder(powerParam_).mergeFrom(value).buildPartial();
          } else {
            powerParam_ = value;
          }
          onChanged();
        } else {
          powerParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public Builder clearPowerParam() {
        if (powerParamBuilder_ == null) {
          powerParam_ = caffe.Caffe.PowerParameter.getDefaultInstance();
          onChanged();
        } else {
          powerParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public caffe.Caffe.PowerParameter.Builder getPowerParamBuilder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getPowerParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      public caffe.Caffe.PowerParameterOrBuilder getPowerParamOrBuilder() {
        if (powerParamBuilder_ != null) {
          return powerParamBuilder_.getMessageOrBuilder();
        } else {
          return powerParam_;
        }
      }
      /**
       * <code>optional .caffe.PowerParameter power_param = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder> 
          getPowerParamFieldBuilder() {
        if (powerParamBuilder_ == null) {
          powerParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.PowerParameter, caffe.Caffe.PowerParameter.Builder, caffe.Caffe.PowerParameterOrBuilder>(
                  getPowerParam(),
                  getParentForChildren(),
                  isClean());
          powerParam_ = null;
        }
        return powerParamBuilder_;
      }

      private caffe.Caffe.WindowDataParameter windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder> windowDataParamBuilder_;
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public boolean hasWindowDataParam() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public caffe.Caffe.WindowDataParameter getWindowDataParam() {
        if (windowDataParamBuilder_ == null) {
          return windowDataParam_;
        } else {
          return windowDataParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder setWindowDataParam(caffe.Caffe.WindowDataParameter value) {
        if (windowDataParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          windowDataParam_ = value;
          onChanged();
        } else {
          windowDataParamBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder setWindowDataParam(
          caffe.Caffe.WindowDataParameter.Builder builderForValue) {
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = builderForValue.build();
          onChanged();
        } else {
          windowDataParamBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder mergeWindowDataParam(caffe.Caffe.WindowDataParameter value) {
        if (windowDataParamBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              windowDataParam_ != caffe.Caffe.WindowDataParameter.getDefaultInstance()) {
            windowDataParam_ =
              caffe.Caffe.WindowDataParameter.newBuilder(windowDataParam_).mergeFrom(value).buildPartial();
          } else {
            windowDataParam_ = value;
          }
          onChanged();
        } else {
          windowDataParamBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public Builder clearWindowDataParam() {
        if (windowDataParamBuilder_ == null) {
          windowDataParam_ = caffe.Caffe.WindowDataParameter.getDefaultInstance();
          onChanged();
        } else {
          windowDataParamBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public caffe.Caffe.WindowDataParameter.Builder getWindowDataParamBuilder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getWindowDataParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      public caffe.Caffe.WindowDataParameterOrBuilder getWindowDataParamOrBuilder() {
        if (windowDataParamBuilder_ != null) {
          return windowDataParamBuilder_.getMessageOrBuilder();
        } else {
          return windowDataParam_;
        }
      }
      /**
       * <code>optional .caffe.WindowDataParameter window_data_param = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder> 
          getWindowDataParamFieldBuilder() {
        if (windowDataParamBuilder_ == null) {
          windowDataParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.WindowDataParameter, caffe.Caffe.WindowDataParameter.Builder, caffe.Caffe.WindowDataParameterOrBuilder>(
                  getWindowDataParam(),
                  getParentForChildren(),
                  isClean());
          windowDataParam_ = null;
        }
        return windowDataParamBuilder_;
      }

      private caffe.Caffe.V0LayerParameter layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.V0LayerParameter, caffe.Caffe.V0LayerParameter.Builder, caffe.Caffe.V0LayerParameterOrBuilder> layerBuilder_;
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public boolean hasLayer() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public caffe.Caffe.V0LayerParameter getLayer() {
        if (layerBuilder_ == null) {
          return layer_;
        } else {
          return layerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public Builder setLayer(caffe.Caffe.V0LayerParameter value) {
        if (layerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          layer_ = value;
          onChanged();
        } else {
          layerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public Builder setLayer(
          caffe.Caffe.V0LayerParameter.Builder builderForValue) {
        if (layerBuilder_ == null) {
          layer_ = builderForValue.build();
          onChanged();
        } else {
          layerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public Builder mergeLayer(caffe.Caffe.V0LayerParameter value) {
        if (layerBuilder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000) &&
              layer_ != caffe.Caffe.V0LayerParameter.getDefaultInstance()) {
            layer_ =
              caffe.Caffe.V0LayerParameter.newBuilder(layer_).mergeFrom(value).buildPartial();
          } else {
            layer_ = value;
          }
          onChanged();
        } else {
          layerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public Builder clearLayer() {
        if (layerBuilder_ == null) {
          layer_ = caffe.Caffe.V0LayerParameter.getDefaultInstance();
          onChanged();
        } else {
          layerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public caffe.Caffe.V0LayerParameter.Builder getLayerBuilder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      public caffe.Caffe.V0LayerParameterOrBuilder getLayerOrBuilder() {
        if (layerBuilder_ != null) {
          return layerBuilder_.getMessageOrBuilder();
        } else {
          return layer_;
        }
      }
      /**
       * <code>optional .caffe.V0LayerParameter layer = 1;</code>
       *
       * <pre>
       * DEPRECATED: The layer parameters specified as a V0LayerParameter.
       * This should never be used by any code except to upgrade to the new
       * LayerParameter specification.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.V0LayerParameter, caffe.Caffe.V0LayerParameter.Builder, caffe.Caffe.V0LayerParameterOrBuilder> 
          getLayerFieldBuilder() {
        if (layerBuilder_ == null) {
          layerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.V0LayerParameter, caffe.Caffe.V0LayerParameter.Builder, caffe.Caffe.V0LayerParameterOrBuilder>(
                  getLayer(),
                  getParentForChildren(),
                  isClean());
          layer_ = null;
        }
        return layerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.LayerParameter)
    }

    static {
      defaultInstance = new LayerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.LayerParameter)
  }

  public interface ConcatParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.ConcatParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * Concat Layer needs to specify the dimension along the concat will happen,
     * the other dimensions must be the same for all the bottom blobs
     * By default it will concatenate blobs along channels dimension
     * </pre>
     */
    boolean hasConcatDim();
    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * Concat Layer needs to specify the dimension along the concat will happen,
     * the other dimensions must be the same for all the bottom blobs
     * By default it will concatenate blobs along channels dimension
     * </pre>
     */
    int getConcatDim();
  }
  /**
   * Protobuf type {@code caffe.ConcatParameter}
   *
   * <pre>
   * Message that stores parameters used by ConcatLayer
   * </pre>
   */
  public static final class ConcatParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.ConcatParameter)
      ConcatParameterOrBuilder {
    // Use ConcatParameter.newBuilder() to construct.
    private ConcatParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ConcatParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ConcatParameter defaultInstance;
    public static ConcatParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ConcatParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ConcatParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              concatDim_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ConcatParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ConcatParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ConcatParameter.class, caffe.Caffe.ConcatParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ConcatParameter> PARSER =
        new com.google.protobuf.AbstractParser<ConcatParameter>() {
      public ConcatParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConcatParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ConcatParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CONCAT_DIM_FIELD_NUMBER = 1;
    private int concatDim_;
    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * Concat Layer needs to specify the dimension along the concat will happen,
     * the other dimensions must be the same for all the bottom blobs
     * By default it will concatenate blobs along channels dimension
     * </pre>
     */
    public boolean hasConcatDim() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 concat_dim = 1 [default = 1];</code>
     *
     * <pre>
     * Concat Layer needs to specify the dimension along the concat will happen,
     * the other dimensions must be the same for all the bottom blobs
     * By default it will concatenate blobs along channels dimension
     * </pre>
     */
    public int getConcatDim() {
      return concatDim_;
    }

    private void initFields() {
      concatDim_ = 1;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, concatDim_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, concatDim_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ConcatParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConcatParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ConcatParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ConcatParameter}
     *
     * <pre>
     * Message that stores parameters used by ConcatLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.ConcatParameter)
        caffe.Caffe.ConcatParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ConcatParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ConcatParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ConcatParameter.class, caffe.Caffe.ConcatParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ConcatParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        concatDim_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ConcatParameter_descriptor;
      }

      public caffe.Caffe.ConcatParameter getDefaultInstanceForType() {
        return caffe.Caffe.ConcatParameter.getDefaultInstance();
      }

      public caffe.Caffe.ConcatParameter build() {
        caffe.Caffe.ConcatParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ConcatParameter buildPartial() {
        caffe.Caffe.ConcatParameter result = new caffe.Caffe.ConcatParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.concatDim_ = concatDim_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ConcatParameter) {
          return mergeFrom((caffe.Caffe.ConcatParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ConcatParameter other) {
        if (other == caffe.Caffe.ConcatParameter.getDefaultInstance()) return this;
        if (other.hasConcatDim()) {
          setConcatDim(other.getConcatDim());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ConcatParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ConcatParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int concatDim_ = 1;
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * Concat Layer needs to specify the dimension along the concat will happen,
       * the other dimensions must be the same for all the bottom blobs
       * By default it will concatenate blobs along channels dimension
       * </pre>
       */
      public boolean hasConcatDim() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * Concat Layer needs to specify the dimension along the concat will happen,
       * the other dimensions must be the same for all the bottom blobs
       * By default it will concatenate blobs along channels dimension
       * </pre>
       */
      public int getConcatDim() {
        return concatDim_;
      }
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * Concat Layer needs to specify the dimension along the concat will happen,
       * the other dimensions must be the same for all the bottom blobs
       * By default it will concatenate blobs along channels dimension
       * </pre>
       */
      public Builder setConcatDim(int value) {
        bitField0_ |= 0x00000001;
        concatDim_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 concat_dim = 1 [default = 1];</code>
       *
       * <pre>
       * Concat Layer needs to specify the dimension along the concat will happen,
       * the other dimensions must be the same for all the bottom blobs
       * By default it will concatenate blobs along channels dimension
       * </pre>
       */
      public Builder clearConcatDim() {
        bitField0_ = (bitField0_ & ~0x00000001);
        concatDim_ = 1;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ConcatParameter)
    }

    static {
      defaultInstance = new ConcatParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ConcatParameter)
  }

  public interface ConvolutionParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.ConvolutionParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    int getNumOutput();

    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean hasBiasTerm();
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean getBiasTerm();

    /**
     * <code>optional uint32 pad = 3 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    boolean hasPad();
    /**
     * <code>optional uint32 pad = 3 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    int getPad();

    /**
     * <code>optional uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    boolean hasKernelSize();
    /**
     * <code>optional uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    int getKernelSize();

    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    boolean hasGroup();
    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    int getGroup();

    /**
     * <code>optional uint32 stride = 6 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    boolean hasStride();
    /**
     * <code>optional uint32 stride = 6 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    int getStride();

    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.ConvolutionParameter}
   *
   * <pre>
   * Message that stores parameters used by ConvolutionLayer
   * </pre>
   */
  public static final class ConvolutionParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.ConvolutionParameter)
      ConvolutionParameterOrBuilder {
    // Use ConvolutionParameter.newBuilder() to construct.
    private ConvolutionParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ConvolutionParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ConvolutionParameter defaultInstance;
    public static ConvolutionParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ConvolutionParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ConvolutionParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numOutput_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              biasTerm_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              pad_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              kernelSize_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              group_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              stride_ = input.readUInt32();
              break;
            }
            case 58: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ConvolutionParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ConvolutionParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ConvolutionParameter.class, caffe.Caffe.ConvolutionParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ConvolutionParameter> PARSER =
        new com.google.protobuf.AbstractParser<ConvolutionParameter>() {
      public ConvolutionParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConvolutionParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ConvolutionParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NUM_OUTPUT_FIELD_NUMBER = 1;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    public static final int BIAS_TERM_FIELD_NUMBER = 2;
    private boolean biasTerm_;
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean hasBiasTerm() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean getBiasTerm() {
      return biasTerm_;
    }

    public static final int PAD_FIELD_NUMBER = 3;
    private int pad_;
    /**
     * <code>optional uint32 pad = 3 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public boolean hasPad() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 pad = 3 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public int getPad() {
      return pad_;
    }

    public static final int KERNEL_SIZE_FIELD_NUMBER = 4;
    private int kernelSize_;
    /**
     * <code>optional uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public boolean hasKernelSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 kernel_size = 4;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public int getKernelSize() {
      return kernelSize_;
    }

    public static final int GROUP_FIELD_NUMBER = 5;
    private int group_;
    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 group = 5 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public int getGroup() {
      return group_;
    }

    public static final int STRIDE_FIELD_NUMBER = 6;
    private int stride_;
    /**
     * <code>optional uint32 stride = 6 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public boolean hasStride() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 stride = 6 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public int getStride() {
      return stride_;
    }

    public static final int WEIGHT_FILLER_FIELD_NUMBER = 7;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    public static final int BIAS_FILLER_FIELD_NUMBER = 8;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    private void initFields() {
      numOutput_ = 0;
      biasTerm_ = true;
      pad_ = 0;
      kernelSize_ = 0;
      group_ = 1;
      stride_ = 1;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, biasTerm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, pad_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, kernelSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, group_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, stride_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, weightFiller_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, biasFiller_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, biasTerm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, pad_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, kernelSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, group_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, stride_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, weightFiller_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, biasFiller_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ConvolutionParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ConvolutionParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ConvolutionParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ConvolutionParameter}
     *
     * <pre>
     * Message that stores parameters used by ConvolutionLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.ConvolutionParameter)
        caffe.Caffe.ConvolutionParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ConvolutionParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ConvolutionParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ConvolutionParameter.class, caffe.Caffe.ConvolutionParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ConvolutionParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        biasTerm_ = true;
        bitField0_ = (bitField0_ & ~0x00000002);
        pad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        kernelSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        group_ = 1;
        bitField0_ = (bitField0_ & ~0x00000010);
        stride_ = 1;
        bitField0_ = (bitField0_ & ~0x00000020);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ConvolutionParameter_descriptor;
      }

      public caffe.Caffe.ConvolutionParameter getDefaultInstanceForType() {
        return caffe.Caffe.ConvolutionParameter.getDefaultInstance();
      }

      public caffe.Caffe.ConvolutionParameter build() {
        caffe.Caffe.ConvolutionParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ConvolutionParameter buildPartial() {
        caffe.Caffe.ConvolutionParameter result = new caffe.Caffe.ConvolutionParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.biasTerm_ = biasTerm_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pad_ = pad_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.kernelSize_ = kernelSize_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.group_ = group_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.stride_ = stride_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ConvolutionParameter) {
          return mergeFrom((caffe.Caffe.ConvolutionParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ConvolutionParameter other) {
        if (other == caffe.Caffe.ConvolutionParameter.getDefaultInstance()) return this;
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasBiasTerm()) {
          setBiasTerm(other.getBiasTerm());
        }
        if (other.hasPad()) {
          setPad(other.getPad());
        }
        if (other.hasKernelSize()) {
          setKernelSize(other.getKernelSize());
        }
        if (other.hasGroup()) {
          setGroup(other.getGroup());
        }
        if (other.hasStride()) {
          setStride(other.getStride());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ConvolutionParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ConvolutionParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000001;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      private boolean biasTerm_ = true;
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean hasBiasTerm() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean getBiasTerm() {
        return biasTerm_;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder setBiasTerm(boolean value) {
        bitField0_ |= 0x00000002;
        biasTerm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder clearBiasTerm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        biasTerm_ = true;
        onChanged();
        return this;
      }

      private int pad_ ;
      /**
       * <code>optional uint32 pad = 3 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public boolean hasPad() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 pad = 3 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public int getPad() {
        return pad_;
      }
      /**
       * <code>optional uint32 pad = 3 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder setPad(int value) {
        bitField0_ |= 0x00000004;
        pad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad = 3 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder clearPad() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pad_ = 0;
        onChanged();
        return this;
      }

      private int kernelSize_ ;
      /**
       * <code>optional uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public boolean hasKernelSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public int getKernelSize() {
        return kernelSize_;
      }
      /**
       * <code>optional uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder setKernelSize(int value) {
        bitField0_ |= 0x00000008;
        kernelSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernel_size = 4;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder clearKernelSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        kernelSize_ = 0;
        onChanged();
        return this;
      }

      private int group_ = 1;
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public int getGroup() {
        return group_;
      }
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder setGroup(int value) {
        bitField0_ |= 0x00000010;
        group_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 group = 5 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder clearGroup() {
        bitField0_ = (bitField0_ & ~0x00000010);
        group_ = 1;
        onChanged();
        return this;
      }

      private int stride_ = 1;
      /**
       * <code>optional uint32 stride = 6 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public boolean hasStride() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 stride = 6 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public int getStride() {
        return stride_;
      }
      /**
       * <code>optional uint32 stride = 6 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder setStride(int value) {
        bitField0_ |= 0x00000020;
        stride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride = 6 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder clearStride() {
        bitField0_ = (bitField0_ & ~0x00000020);
        stride_ = 1;
        onChanged();
        return this;
      }

      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 7;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  getWeightFiller(),
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 8;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  getBiasFiller(),
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ConvolutionParameter)
    }

    static {
      defaultInstance = new ConvolutionParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ConvolutionParameter)
  }

  public interface DataParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.DataParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    /**
     * <code>optional string mean_file = 3;</code>
     */
    boolean hasMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    java.lang.String getMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    com.google.protobuf.ByteString
        getMeanFileBytes();

    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();

    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropSize();
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropSize();

    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    boolean hasRandSkip();
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    int getRandSkip();
  }
  /**
   * Protobuf type {@code caffe.DataParameter}
   *
   * <pre>
   * Message that stores parameters used by DataLayer
   * </pre>
   */
  public static final class DataParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.DataParameter)
      DataParameterOrBuilder {
    // Use DataParameter.newBuilder() to construct.
    private DataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DataParameter defaultInstance;
    public static DataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public DataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              source_ = bs;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              meanFile_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              batchSize_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              cropSize_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mirror_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              randSkip_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_DataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_DataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.DataParameter.class, caffe.Caffe.DataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<DataParameter> PARSER =
        new com.google.protobuf.AbstractParser<DataParameter>() {
      public DataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    public static final int MEAN_FILE_FIELD_NUMBER = 3;
    private java.lang.Object meanFile_;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public boolean hasMeanFile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public java.lang.String getMeanFile() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMeanFileBytes() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BATCH_SIZE_FIELD_NUMBER = 4;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    public static final int CROP_SIZE_FIELD_NUMBER = 5;
    private int cropSize_;
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropSize() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropSize() {
      return cropSize_;
    }

    public static final int MIRROR_FIELD_NUMBER = 6;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    public static final int RAND_SKIP_FIELD_NUMBER = 7;
    private int randSkip_;
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public boolean hasRandSkip() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public int getRandSkip() {
      return randSkip_;
    }

    private void initFields() {
      source_ = "";
      scale_ = 1F;
      meanFile_ = "";
      batchSize_ = 0;
      cropSize_ = 0;
      mirror_ = false;
      randSkip_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, randSkip_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, randSkip_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.DataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.DataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.DataParameter}
     *
     * <pre>
     * Message that stores parameters used by DataLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.DataParameter)
        caffe.Caffe.DataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_DataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_DataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.DataParameter.class, caffe.Caffe.DataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.DataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        meanFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cropSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        randSkip_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_DataParameter_descriptor;
      }

      public caffe.Caffe.DataParameter getDefaultInstanceForType() {
        return caffe.Caffe.DataParameter.getDefaultInstance();
      }

      public caffe.Caffe.DataParameter build() {
        caffe.Caffe.DataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.DataParameter buildPartial() {
        caffe.Caffe.DataParameter result = new caffe.Caffe.DataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.meanFile_ = meanFile_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cropSize_ = cropSize_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mirror_ = mirror_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.randSkip_ = randSkip_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.DataParameter) {
          return mergeFrom((caffe.Caffe.DataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.DataParameter other) {
        if (other == caffe.Caffe.DataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanFile()) {
          bitField0_ |= 0x00000004;
          meanFile_ = other.meanFile_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasCropSize()) {
          setCropSize(other.getCropSize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (other.hasRandSkip()) {
          setRandSkip(other.getRandSkip());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.DataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.DataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            source_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      private java.lang.Object meanFile_ = "";
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public boolean hasMeanFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public java.lang.String getMeanFile() {
        java.lang.Object ref = meanFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            meanFile_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMeanFileBytes() {
        java.lang.Object ref = meanFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder clearMeanFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        meanFile_ = getDefaultInstance().getMeanFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }

      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000008;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      private int cropSize_ ;
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropSize() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropSize() {
        return cropSize_;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropSize(int value) {
        bitField0_ |= 0x00000010;
        cropSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropSize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cropSize_ = 0;
        onChanged();
        return this;
      }

      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00000020;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mirror_ = false;
        onChanged();
        return this;
      }

      private int randSkip_ ;
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public boolean hasRandSkip() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public int getRandSkip() {
        return randSkip_;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder setRandSkip(int value) {
        bitField0_ |= 0x00000040;
        randSkip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder clearRandSkip() {
        bitField0_ = (bitField0_ & ~0x00000040);
        randSkip_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.DataParameter)
    }

    static {
      defaultInstance = new DataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.DataParameter)
  }

  public interface DropoutParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.DropoutParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    boolean hasDropoutRatio();
    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    float getDropoutRatio();
  }
  /**
   * Protobuf type {@code caffe.DropoutParameter}
   *
   * <pre>
   * Message that stores parameters used by DropoutLayer
   * </pre>
   */
  public static final class DropoutParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.DropoutParameter)
      DropoutParameterOrBuilder {
    // Use DropoutParameter.newBuilder() to construct.
    private DropoutParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DropoutParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DropoutParameter defaultInstance;
    public static DropoutParameter getDefaultInstance() {
      return defaultInstance;
    }

    public DropoutParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DropoutParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              dropoutRatio_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_DropoutParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_DropoutParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.DropoutParameter.class, caffe.Caffe.DropoutParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<DropoutParameter> PARSER =
        new com.google.protobuf.AbstractParser<DropoutParameter>() {
      public DropoutParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DropoutParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DropoutParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DROPOUT_RATIO_FIELD_NUMBER = 1;
    private float dropoutRatio_;
    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public boolean hasDropoutRatio() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public float getDropoutRatio() {
      return dropoutRatio_;
    }

    private void initFields() {
      dropoutRatio_ = 0.5F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, dropoutRatio_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, dropoutRatio_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.DropoutParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.DropoutParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.DropoutParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.DropoutParameter}
     *
     * <pre>
     * Message that stores parameters used by DropoutLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.DropoutParameter)
        caffe.Caffe.DropoutParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_DropoutParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_DropoutParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.DropoutParameter.class, caffe.Caffe.DropoutParameter.Builder.class);
      }

      // Construct using caffe.Caffe.DropoutParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        dropoutRatio_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_DropoutParameter_descriptor;
      }

      public caffe.Caffe.DropoutParameter getDefaultInstanceForType() {
        return caffe.Caffe.DropoutParameter.getDefaultInstance();
      }

      public caffe.Caffe.DropoutParameter build() {
        caffe.Caffe.DropoutParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.DropoutParameter buildPartial() {
        caffe.Caffe.DropoutParameter result = new caffe.Caffe.DropoutParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dropoutRatio_ = dropoutRatio_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.DropoutParameter) {
          return mergeFrom((caffe.Caffe.DropoutParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.DropoutParameter other) {
        if (other == caffe.Caffe.DropoutParameter.getDefaultInstance()) return this;
        if (other.hasDropoutRatio()) {
          setDropoutRatio(other.getDropoutRatio());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.DropoutParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.DropoutParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float dropoutRatio_ = 0.5F;
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public boolean hasDropoutRatio() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public float getDropoutRatio() {
        return dropoutRatio_;
      }
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder setDropoutRatio(float value) {
        bitField0_ |= 0x00000001;
        dropoutRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dropout_ratio = 1 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder clearDropoutRatio() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dropoutRatio_ = 0.5F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.DropoutParameter)
    }

    static {
      defaultInstance = new DropoutParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.DropoutParameter)
  }

  public interface HDF5DataParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.HDF5DataParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();
  }
  /**
   * Protobuf type {@code caffe.HDF5DataParameter}
   *
   * <pre>
   * Message that stores parameters used by HDF5DataLayer
   * </pre>
   */
  public static final class HDF5DataParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.HDF5DataParameter)
      HDF5DataParameterOrBuilder {
    // Use HDF5DataParameter.newBuilder() to construct.
    private HDF5DataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HDF5DataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HDF5DataParameter defaultInstance;
    public static HDF5DataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public HDF5DataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HDF5DataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              source_ = bs;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              batchSize_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_HDF5DataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_HDF5DataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.HDF5DataParameter.class, caffe.Caffe.HDF5DataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<HDF5DataParameter> PARSER =
        new com.google.protobuf.AbstractParser<HDF5DataParameter>() {
      public HDF5DataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HDF5DataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HDF5DataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BATCH_SIZE_FIELD_NUMBER = 2;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 batch_size = 2;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    private void initFields() {
      source_ = "";
      batchSize_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, batchSize_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, batchSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.HDF5DataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5DataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.HDF5DataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.HDF5DataParameter}
     *
     * <pre>
     * Message that stores parameters used by HDF5DataLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.HDF5DataParameter)
        caffe.Caffe.HDF5DataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_HDF5DataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_HDF5DataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.HDF5DataParameter.class, caffe.Caffe.HDF5DataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.HDF5DataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_HDF5DataParameter_descriptor;
      }

      public caffe.Caffe.HDF5DataParameter getDefaultInstanceForType() {
        return caffe.Caffe.HDF5DataParameter.getDefaultInstance();
      }

      public caffe.Caffe.HDF5DataParameter build() {
        caffe.Caffe.HDF5DataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.HDF5DataParameter buildPartial() {
        caffe.Caffe.HDF5DataParameter result = new caffe.Caffe.HDF5DataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.batchSize_ = batchSize_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.HDF5DataParameter) {
          return mergeFrom((caffe.Caffe.HDF5DataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.HDF5DataParameter other) {
        if (other == caffe.Caffe.HDF5DataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.HDF5DataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.HDF5DataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            source_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000002;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 2;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.HDF5DataParameter)
    }

    static {
      defaultInstance = new HDF5DataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.HDF5DataParameter)
  }

  public interface HDF5OutputParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.HDF5OutputParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string file_name = 1;</code>
     */
    boolean hasFileName();
    /**
     * <code>optional string file_name = 1;</code>
     */
    java.lang.String getFileName();
    /**
     * <code>optional string file_name = 1;</code>
     */
    com.google.protobuf.ByteString
        getFileNameBytes();
  }
  /**
   * Protobuf type {@code caffe.HDF5OutputParameter}
   *
   * <pre>
   * Message that stores parameters used by HDF5OutputLayer
   * </pre>
   */
  public static final class HDF5OutputParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.HDF5OutputParameter)
      HDF5OutputParameterOrBuilder {
    // Use HDF5OutputParameter.newBuilder() to construct.
    private HDF5OutputParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private HDF5OutputParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final HDF5OutputParameter defaultInstance;
    public static HDF5OutputParameter getDefaultInstance() {
      return defaultInstance;
    }

    public HDF5OutputParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private HDF5OutputParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              fileName_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.HDF5OutputParameter.class, caffe.Caffe.HDF5OutputParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<HDF5OutputParameter> PARSER =
        new com.google.protobuf.AbstractParser<HDF5OutputParameter>() {
      public HDF5OutputParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HDF5OutputParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<HDF5OutputParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FILE_NAME_FIELD_NUMBER = 1;
    private java.lang.Object fileName_;
    /**
     * <code>optional string file_name = 1;</code>
     */
    public boolean hasFileName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string file_name = 1;</code>
     */
    public java.lang.String getFileName() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fileName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string file_name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFileNameBytes() {
      java.lang.Object ref = fileName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fileName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      fileName_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getFileNameBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getFileNameBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.HDF5OutputParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.HDF5OutputParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.HDF5OutputParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.HDF5OutputParameter}
     *
     * <pre>
     * Message that stores parameters used by HDF5OutputLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.HDF5OutputParameter)
        caffe.Caffe.HDF5OutputParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.HDF5OutputParameter.class, caffe.Caffe.HDF5OutputParameter.Builder.class);
      }

      // Construct using caffe.Caffe.HDF5OutputParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        fileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_HDF5OutputParameter_descriptor;
      }

      public caffe.Caffe.HDF5OutputParameter getDefaultInstanceForType() {
        return caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      }

      public caffe.Caffe.HDF5OutputParameter build() {
        caffe.Caffe.HDF5OutputParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.HDF5OutputParameter buildPartial() {
        caffe.Caffe.HDF5OutputParameter result = new caffe.Caffe.HDF5OutputParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fileName_ = fileName_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.HDF5OutputParameter) {
          return mergeFrom((caffe.Caffe.HDF5OutputParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.HDF5OutputParameter other) {
        if (other == caffe.Caffe.HDF5OutputParameter.getDefaultInstance()) return this;
        if (other.hasFileName()) {
          bitField0_ |= 0x00000001;
          fileName_ = other.fileName_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.HDF5OutputParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.HDF5OutputParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object fileName_ = "";
      /**
       * <code>optional string file_name = 1;</code>
       */
      public boolean hasFileName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public java.lang.String getFileName() {
        java.lang.Object ref = fileName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFileNameBytes() {
        java.lang.Object ref = fileName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fileName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public Builder setFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        fileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public Builder clearFileName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fileName_ = getDefaultInstance().getFileName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string file_name = 1;</code>
       */
      public Builder setFileNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        fileName_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.HDF5OutputParameter)
    }

    static {
      defaultInstance = new HDF5OutputParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.HDF5OutputParameter)
  }

  public interface ImageDataParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.ImageDataParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    /**
     * <code>optional string mean_file = 3;</code>
     */
    boolean hasMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    java.lang.String getMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    com.google.protobuf.ByteString
        getMeanFileBytes();

    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();

    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropSize();
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropSize();

    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    boolean hasRandSkip();
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    int getRandSkip();

    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    boolean hasShuffle();
    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    boolean getShuffle();

    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    boolean hasNewHeight();
    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    int getNewHeight();

    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    boolean hasNewWidth();
    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    int getNewWidth();
  }
  /**
   * Protobuf type {@code caffe.ImageDataParameter}
   *
   * <pre>
   * Message that stores parameters used by ImageDataLayer
   * </pre>
   */
  public static final class ImageDataParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.ImageDataParameter)
      ImageDataParameterOrBuilder {
    // Use ImageDataParameter.newBuilder() to construct.
    private ImageDataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ImageDataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ImageDataParameter defaultInstance;
    public static ImageDataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public ImageDataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ImageDataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              source_ = bs;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              meanFile_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              batchSize_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              cropSize_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mirror_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              randSkip_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              shuffle_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              newHeight_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              newWidth_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_ImageDataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_ImageDataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.ImageDataParameter.class, caffe.Caffe.ImageDataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<ImageDataParameter> PARSER =
        new com.google.protobuf.AbstractParser<ImageDataParameter>() {
      public ImageDataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImageDataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ImageDataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    public static final int MEAN_FILE_FIELD_NUMBER = 3;
    private java.lang.Object meanFile_;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public boolean hasMeanFile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public java.lang.String getMeanFile() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMeanFileBytes() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BATCH_SIZE_FIELD_NUMBER = 4;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    public static final int CROP_SIZE_FIELD_NUMBER = 5;
    private int cropSize_;
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropSize() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropSize() {
      return cropSize_;
    }

    public static final int MIRROR_FIELD_NUMBER = 6;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    public static final int RAND_SKIP_FIELD_NUMBER = 7;
    private int randSkip_;
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public boolean hasRandSkip() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 rand_skip = 7 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public int getRandSkip() {
      return randSkip_;
    }

    public static final int SHUFFLE_FIELD_NUMBER = 8;
    private boolean shuffle_;
    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    public boolean hasShuffle() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool shuffle = 8 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * </pre>
     */
    public boolean getShuffle() {
      return shuffle_;
    }

    public static final int NEW_HEIGHT_FIELD_NUMBER = 9;
    private int newHeight_;
    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public boolean hasNewHeight() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 new_height = 9 [default = 0];</code>
     *
     * <pre>
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public int getNewHeight() {
      return newHeight_;
    }

    public static final int NEW_WIDTH_FIELD_NUMBER = 10;
    private int newWidth_;
    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    public boolean hasNewWidth() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 new_width = 10 [default = 0];</code>
     */
    public int getNewWidth() {
      return newWidth_;
    }

    private void initFields() {
      source_ = "";
      scale_ = 1F;
      meanFile_ = "";
      batchSize_ = 0;
      cropSize_ = 0;
      mirror_ = false;
      randSkip_ = 0;
      shuffle_ = false;
      newHeight_ = 0;
      newWidth_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, randSkip_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, shuffle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, newHeight_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, newWidth_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, randSkip_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, shuffle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, newHeight_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, newWidth_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.ImageDataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.ImageDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.ImageDataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.ImageDataParameter}
     *
     * <pre>
     * Message that stores parameters used by ImageDataLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.ImageDataParameter)
        caffe.Caffe.ImageDataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_ImageDataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_ImageDataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.ImageDataParameter.class, caffe.Caffe.ImageDataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.ImageDataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        meanFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cropSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        randSkip_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        shuffle_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        newHeight_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        newWidth_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_ImageDataParameter_descriptor;
      }

      public caffe.Caffe.ImageDataParameter getDefaultInstanceForType() {
        return caffe.Caffe.ImageDataParameter.getDefaultInstance();
      }

      public caffe.Caffe.ImageDataParameter build() {
        caffe.Caffe.ImageDataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.ImageDataParameter buildPartial() {
        caffe.Caffe.ImageDataParameter result = new caffe.Caffe.ImageDataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.meanFile_ = meanFile_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cropSize_ = cropSize_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mirror_ = mirror_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.randSkip_ = randSkip_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.shuffle_ = shuffle_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.newHeight_ = newHeight_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.newWidth_ = newWidth_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.ImageDataParameter) {
          return mergeFrom((caffe.Caffe.ImageDataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.ImageDataParameter other) {
        if (other == caffe.Caffe.ImageDataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanFile()) {
          bitField0_ |= 0x00000004;
          meanFile_ = other.meanFile_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasCropSize()) {
          setCropSize(other.getCropSize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (other.hasRandSkip()) {
          setRandSkip(other.getRandSkip());
        }
        if (other.hasShuffle()) {
          setShuffle(other.getShuffle());
        }
        if (other.hasNewHeight()) {
          setNewHeight(other.getNewHeight());
        }
        if (other.hasNewWidth()) {
          setNewWidth(other.getNewWidth());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.ImageDataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.ImageDataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            source_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      private java.lang.Object meanFile_ = "";
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public boolean hasMeanFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public java.lang.String getMeanFile() {
        java.lang.Object ref = meanFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            meanFile_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMeanFileBytes() {
        java.lang.Object ref = meanFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder clearMeanFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        meanFile_ = getDefaultInstance().getMeanFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }

      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000008;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      private int cropSize_ ;
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropSize() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropSize() {
        return cropSize_;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropSize(int value) {
        bitField0_ |= 0x00000010;
        cropSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropSize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cropSize_ = 0;
        onChanged();
        return this;
      }

      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00000020;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mirror_ = false;
        onChanged();
        return this;
      }

      private int randSkip_ ;
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public boolean hasRandSkip() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public int getRandSkip() {
        return randSkip_;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder setRandSkip(int value) {
        bitField0_ |= 0x00000040;
        randSkip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rand_skip = 7 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder clearRandSkip() {
        bitField0_ = (bitField0_ & ~0x00000040);
        randSkip_ = 0;
        onChanged();
        return this;
      }

      private boolean shuffle_ ;
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public boolean hasShuffle() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public boolean getShuffle() {
        return shuffle_;
      }
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public Builder setShuffle(boolean value) {
        bitField0_ |= 0x00000080;
        shuffle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shuffle = 8 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * </pre>
       */
      public Builder clearShuffle() {
        bitField0_ = (bitField0_ & ~0x00000080);
        shuffle_ = false;
        onChanged();
        return this;
      }

      private int newHeight_ ;
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public boolean hasNewHeight() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public int getNewHeight() {
        return newHeight_;
      }
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder setNewHeight(int value) {
        bitField0_ |= 0x00000100;
        newHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 new_height = 9 [default = 0];</code>
       *
       * <pre>
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder clearNewHeight() {
        bitField0_ = (bitField0_ & ~0x00000100);
        newHeight_ = 0;
        onChanged();
        return this;
      }

      private int newWidth_ ;
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public boolean hasNewWidth() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public int getNewWidth() {
        return newWidth_;
      }
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public Builder setNewWidth(int value) {
        bitField0_ |= 0x00000200;
        newWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 new_width = 10 [default = 0];</code>
       */
      public Builder clearNewWidth() {
        bitField0_ = (bitField0_ & ~0x00000200);
        newWidth_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.ImageDataParameter)
    }

    static {
      defaultInstance = new ImageDataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.ImageDataParameter)
  }

  public interface InfogainLossParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.InfogainLossParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();
  }
  /**
   * Protobuf type {@code caffe.InfogainLossParameter}
   *
   * <pre>
   * Message that stores parameters InfogainLossLayer
   * </pre>
   */
  public static final class InfogainLossParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.InfogainLossParameter)
      InfogainLossParameterOrBuilder {
    // Use InfogainLossParameter.newBuilder() to construct.
    private InfogainLossParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InfogainLossParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InfogainLossParameter defaultInstance;
    public static InfogainLossParameter getDefaultInstance() {
      return defaultInstance;
    }

    public InfogainLossParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InfogainLossParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              source_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_InfogainLossParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_InfogainLossParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.InfogainLossParameter.class, caffe.Caffe.InfogainLossParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<InfogainLossParameter> PARSER =
        new com.google.protobuf.AbstractParser<InfogainLossParameter>() {
      public InfogainLossParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InfogainLossParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InfogainLossParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the infogain matrix source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      source_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.InfogainLossParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InfogainLossParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.InfogainLossParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.InfogainLossParameter}
     *
     * <pre>
     * Message that stores parameters InfogainLossLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.InfogainLossParameter)
        caffe.Caffe.InfogainLossParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_InfogainLossParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_InfogainLossParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.InfogainLossParameter.class, caffe.Caffe.InfogainLossParameter.Builder.class);
      }

      // Construct using caffe.Caffe.InfogainLossParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_InfogainLossParameter_descriptor;
      }

      public caffe.Caffe.InfogainLossParameter getDefaultInstanceForType() {
        return caffe.Caffe.InfogainLossParameter.getDefaultInstance();
      }

      public caffe.Caffe.InfogainLossParameter build() {
        caffe.Caffe.InfogainLossParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.InfogainLossParameter buildPartial() {
        caffe.Caffe.InfogainLossParameter result = new caffe.Caffe.InfogainLossParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.InfogainLossParameter) {
          return mergeFrom((caffe.Caffe.InfogainLossParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.InfogainLossParameter other) {
        if (other == caffe.Caffe.InfogainLossParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.InfogainLossParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.InfogainLossParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            source_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the infogain matrix source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.InfogainLossParameter)
    }

    static {
      defaultInstance = new InfogainLossParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.InfogainLossParameter)
  }

  public interface InnerProductParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.InnerProductParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    int getNumOutput();

    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean hasBiasTerm();
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean getBiasTerm();

    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.InnerProductParameter}
   *
   * <pre>
   * Message that stores parameters used by InnerProductLayer
   * </pre>
   */
  public static final class InnerProductParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.InnerProductParameter)
      InnerProductParameterOrBuilder {
    // Use InnerProductParameter.newBuilder() to construct.
    private InnerProductParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InnerProductParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InnerProductParameter defaultInstance;
    public static InnerProductParameter getDefaultInstance() {
      return defaultInstance;
    }

    public InnerProductParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InnerProductParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              numOutput_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              biasTerm_ = input.readBool();
              break;
            }
            case 26: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_InnerProductParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_InnerProductParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.InnerProductParameter.class, caffe.Caffe.InnerProductParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<InnerProductParameter> PARSER =
        new com.google.protobuf.AbstractParser<InnerProductParameter>() {
      public InnerProductParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InnerProductParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InnerProductParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int NUM_OUTPUT_FIELD_NUMBER = 1;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 num_output = 1;</code>
     *
     * <pre>
     * The number of outputs for the layer
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    public static final int BIAS_TERM_FIELD_NUMBER = 2;
    private boolean biasTerm_;
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean hasBiasTerm() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool bias_term = 2 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean getBiasTerm() {
      return biasTerm_;
    }

    public static final int WEIGHT_FILLER_FIELD_NUMBER = 3;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    public static final int BIAS_FILLER_FIELD_NUMBER = 4;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    private void initFields() {
      numOutput_ = 0;
      biasTerm_ = true;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, biasTerm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, weightFiller_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, biasFiller_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, numOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, biasTerm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, weightFiller_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, biasFiller_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.InnerProductParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.InnerProductParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.InnerProductParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.InnerProductParameter}
     *
     * <pre>
     * Message that stores parameters used by InnerProductLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.InnerProductParameter)
        caffe.Caffe.InnerProductParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_InnerProductParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_InnerProductParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.InnerProductParameter.class, caffe.Caffe.InnerProductParameter.Builder.class);
      }

      // Construct using caffe.Caffe.InnerProductParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        biasTerm_ = true;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_InnerProductParameter_descriptor;
      }

      public caffe.Caffe.InnerProductParameter getDefaultInstanceForType() {
        return caffe.Caffe.InnerProductParameter.getDefaultInstance();
      }

      public caffe.Caffe.InnerProductParameter build() {
        caffe.Caffe.InnerProductParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.InnerProductParameter buildPartial() {
        caffe.Caffe.InnerProductParameter result = new caffe.Caffe.InnerProductParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.biasTerm_ = biasTerm_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.InnerProductParameter) {
          return mergeFrom((caffe.Caffe.InnerProductParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.InnerProductParameter other) {
        if (other == caffe.Caffe.InnerProductParameter.getDefaultInstance()) return this;
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasBiasTerm()) {
          setBiasTerm(other.getBiasTerm());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.InnerProductParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.InnerProductParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000001;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 1;</code>
       *
       * <pre>
       * The number of outputs for the layer
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000001);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      private boolean biasTerm_ = true;
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean hasBiasTerm() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean getBiasTerm() {
        return biasTerm_;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder setBiasTerm(boolean value) {
        bitField0_ |= 0x00000002;
        biasTerm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bias_term = 2 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder clearBiasTerm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        biasTerm_ = true;
        onChanged();
        return this;
      }

      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 3;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  getWeightFiller(),
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 4;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  getBiasFiller(),
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.InnerProductParameter)
    }

    static {
      defaultInstance = new InnerProductParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.InnerProductParameter)
  }

  public interface LRNParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.LRNParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    boolean hasLocalSize();
    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    int getLocalSize();

    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    boolean hasAlpha();
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    float getAlpha();

    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    boolean hasBeta();
    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    float getBeta();

    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    boolean hasNormRegion();
    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    caffe.Caffe.LRNParameter.NormRegion getNormRegion();
  }
  /**
   * Protobuf type {@code caffe.LRNParameter}
   *
   * <pre>
   * Message that stores parameters used by LRNLayer
   * </pre>
   */
  public static final class LRNParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.LRNParameter)
      LRNParameterOrBuilder {
    // Use LRNParameter.newBuilder() to construct.
    private LRNParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LRNParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LRNParameter defaultInstance;
    public static LRNParameter getDefaultInstance() {
      return defaultInstance;
    }

    public LRNParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LRNParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              localSize_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              alpha_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              beta_ = input.readFloat();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              caffe.Caffe.LRNParameter.NormRegion value = caffe.Caffe.LRNParameter.NormRegion.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                normRegion_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_LRNParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_LRNParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.LRNParameter.class, caffe.Caffe.LRNParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<LRNParameter> PARSER =
        new com.google.protobuf.AbstractParser<LRNParameter>() {
      public LRNParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LRNParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LRNParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.LRNParameter.NormRegion}
     */
    public enum NormRegion
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ACROSS_CHANNELS = 0;</code>
       */
      ACROSS_CHANNELS(0, 0),
      /**
       * <code>WITHIN_CHANNEL = 1;</code>
       */
      WITHIN_CHANNEL(1, 1),
      ;

      /**
       * <code>ACROSS_CHANNELS = 0;</code>
       */
      public static final int ACROSS_CHANNELS_VALUE = 0;
      /**
       * <code>WITHIN_CHANNEL = 1;</code>
       */
      public static final int WITHIN_CHANNEL_VALUE = 1;


      public final int getNumber() { return value; }

      public static NormRegion valueOf(int value) {
        switch (value) {
          case 0: return ACROSS_CHANNELS;
          case 1: return WITHIN_CHANNEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<NormRegion>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<NormRegion>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NormRegion>() {
              public NormRegion findValueByNumber(int number) {
                return NormRegion.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.LRNParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final NormRegion[] VALUES = values();

      public static NormRegion valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private NormRegion(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.LRNParameter.NormRegion)
    }

    private int bitField0_;
    public static final int LOCAL_SIZE_FIELD_NUMBER = 1;
    private int localSize_;
    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    public boolean hasLocalSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 local_size = 1 [default = 5];</code>
     */
    public int getLocalSize() {
      return localSize_;
    }

    public static final int ALPHA_FIELD_NUMBER = 2;
    private float alpha_;
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    public boolean hasAlpha() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    public float getAlpha() {
      return alpha_;
    }

    public static final int BETA_FIELD_NUMBER = 3;
    private float beta_;
    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    public boolean hasBeta() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float beta = 3 [default = 0.75];</code>
     */
    public float getBeta() {
      return beta_;
    }

    public static final int NORM_REGION_FIELD_NUMBER = 4;
    private caffe.Caffe.LRNParameter.NormRegion normRegion_;
    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    public boolean hasNormRegion() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
     */
    public caffe.Caffe.LRNParameter.NormRegion getNormRegion() {
      return normRegion_;
    }

    private void initFields() {
      localSize_ = 5;
      alpha_ = 1F;
      beta_ = 0.75F;
      normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, localSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, alpha_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, beta_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, normRegion_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, localSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, alpha_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, beta_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, normRegion_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.LRNParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.LRNParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.LRNParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.LRNParameter}
     *
     * <pre>
     * Message that stores parameters used by LRNLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.LRNParameter)
        caffe.Caffe.LRNParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_LRNParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_LRNParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.LRNParameter.class, caffe.Caffe.LRNParameter.Builder.class);
      }

      // Construct using caffe.Caffe.LRNParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        localSize_ = 5;
        bitField0_ = (bitField0_ & ~0x00000001);
        alpha_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        beta_ = 0.75F;
        bitField0_ = (bitField0_ & ~0x00000004);
        normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_LRNParameter_descriptor;
      }

      public caffe.Caffe.LRNParameter getDefaultInstanceForType() {
        return caffe.Caffe.LRNParameter.getDefaultInstance();
      }

      public caffe.Caffe.LRNParameter build() {
        caffe.Caffe.LRNParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.LRNParameter buildPartial() {
        caffe.Caffe.LRNParameter result = new caffe.Caffe.LRNParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.localSize_ = localSize_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.alpha_ = alpha_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.beta_ = beta_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.normRegion_ = normRegion_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.LRNParameter) {
          return mergeFrom((caffe.Caffe.LRNParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.LRNParameter other) {
        if (other == caffe.Caffe.LRNParameter.getDefaultInstance()) return this;
        if (other.hasLocalSize()) {
          setLocalSize(other.getLocalSize());
        }
        if (other.hasAlpha()) {
          setAlpha(other.getAlpha());
        }
        if (other.hasBeta()) {
          setBeta(other.getBeta());
        }
        if (other.hasNormRegion()) {
          setNormRegion(other.getNormRegion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.LRNParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.LRNParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int localSize_ = 5;
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public boolean hasLocalSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public int getLocalSize() {
        return localSize_;
      }
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public Builder setLocalSize(int value) {
        bitField0_ |= 0x00000001;
        localSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 local_size = 1 [default = 5];</code>
       */
      public Builder clearLocalSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        localSize_ = 5;
        onChanged();
        return this;
      }

      private float alpha_ = 1F;
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public boolean hasAlpha() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public float getAlpha() {
        return alpha_;
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public Builder setAlpha(float value) {
        bitField0_ |= 0x00000002;
        alpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public Builder clearAlpha() {
        bitField0_ = (bitField0_ & ~0x00000002);
        alpha_ = 1F;
        onChanged();
        return this;
      }

      private float beta_ = 0.75F;
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public boolean hasBeta() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public float getBeta() {
        return beta_;
      }
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public Builder setBeta(float value) {
        bitField0_ |= 0x00000004;
        beta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float beta = 3 [default = 0.75];</code>
       */
      public Builder clearBeta() {
        bitField0_ = (bitField0_ & ~0x00000004);
        beta_ = 0.75F;
        onChanged();
        return this;
      }

      private caffe.Caffe.LRNParameter.NormRegion normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public boolean hasNormRegion() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public caffe.Caffe.LRNParameter.NormRegion getNormRegion() {
        return normRegion_;
      }
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public Builder setNormRegion(caffe.Caffe.LRNParameter.NormRegion value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        normRegion_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.LRNParameter.NormRegion norm_region = 4 [default = ACROSS_CHANNELS];</code>
       */
      public Builder clearNormRegion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        normRegion_ = caffe.Caffe.LRNParameter.NormRegion.ACROSS_CHANNELS;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.LRNParameter)
    }

    static {
      defaultInstance = new LRNParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.LRNParameter)
  }

  public interface MemoryDataParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.MemoryDataParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    int getBatchSize();

    /**
     * <code>optional uint32 channels = 2;</code>
     */
    boolean hasChannels();
    /**
     * <code>optional uint32 channels = 2;</code>
     */
    int getChannels();

    /**
     * <code>optional uint32 height = 3;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional uint32 height = 3;</code>
     */
    int getHeight();

    /**
     * <code>optional uint32 width = 4;</code>
     */
    boolean hasWidth();
    /**
     * <code>optional uint32 width = 4;</code>
     */
    int getWidth();
  }
  /**
   * Protobuf type {@code caffe.MemoryDataParameter}
   *
   * <pre>
   * Message that stores parameters used by MemoryDataLayer
   * </pre>
   */
  public static final class MemoryDataParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.MemoryDataParameter)
      MemoryDataParameterOrBuilder {
    // Use MemoryDataParameter.newBuilder() to construct.
    private MemoryDataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MemoryDataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MemoryDataParameter defaultInstance;
    public static MemoryDataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public MemoryDataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MemoryDataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              batchSize_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              channels_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              height_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              width_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_MemoryDataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_MemoryDataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.MemoryDataParameter.class, caffe.Caffe.MemoryDataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<MemoryDataParameter> PARSER =
        new com.google.protobuf.AbstractParser<MemoryDataParameter>() {
      public MemoryDataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MemoryDataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MemoryDataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BATCH_SIZE_FIELD_NUMBER = 1;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 batch_size = 1;</code>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    public static final int CHANNELS_FIELD_NUMBER = 2;
    private int channels_;
    /**
     * <code>optional uint32 channels = 2;</code>
     */
    public boolean hasChannels() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 channels = 2;</code>
     */
    public int getChannels() {
      return channels_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 3;
    private int height_;
    /**
     * <code>optional uint32 height = 3;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 height = 3;</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int WIDTH_FIELD_NUMBER = 4;
    private int width_;
    /**
     * <code>optional uint32 width = 4;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 width = 4;</code>
     */
    public int getWidth() {
      return width_;
    }

    private void initFields() {
      batchSize_ = 0;
      channels_ = 0;
      height_ = 0;
      width_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, batchSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, width_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, batchSize_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, channels_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, height_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, width_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.MemoryDataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.MemoryDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.MemoryDataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.MemoryDataParameter}
     *
     * <pre>
     * Message that stores parameters used by MemoryDataLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.MemoryDataParameter)
        caffe.Caffe.MemoryDataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_MemoryDataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_MemoryDataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.MemoryDataParameter.class, caffe.Caffe.MemoryDataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.MemoryDataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        channels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_MemoryDataParameter_descriptor;
      }

      public caffe.Caffe.MemoryDataParameter getDefaultInstanceForType() {
        return caffe.Caffe.MemoryDataParameter.getDefaultInstance();
      }

      public caffe.Caffe.MemoryDataParameter build() {
        caffe.Caffe.MemoryDataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.MemoryDataParameter buildPartial() {
        caffe.Caffe.MemoryDataParameter result = new caffe.Caffe.MemoryDataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.channels_ = channels_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.width_ = width_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.MemoryDataParameter) {
          return mergeFrom((caffe.Caffe.MemoryDataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.MemoryDataParameter other) {
        if (other == caffe.Caffe.MemoryDataParameter.getDefaultInstance()) return this;
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasChannels()) {
          setChannels(other.getChannels());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.MemoryDataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.MemoryDataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000001;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 1;</code>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      private int channels_ ;
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public boolean hasChannels() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public int getChannels() {
        return channels_;
      }
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public Builder setChannels(int value) {
        bitField0_ |= 0x00000002;
        channels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 channels = 2;</code>
       */
      public Builder clearChannels() {
        bitField0_ = (bitField0_ & ~0x00000002);
        channels_ = 0;
        onChanged();
        return this;
      }

      private int height_ ;
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000004;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 height = 3;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000004);
        height_ = 0;
        onChanged();
        return this;
      }

      private int width_ ;
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000008;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 width = 4;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        width_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.MemoryDataParameter)
    }

    static {
      defaultInstance = new MemoryDataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.MemoryDataParameter)
  }

  public interface PoolingParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.PoolingParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    boolean hasPool();
    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    caffe.Caffe.PoolingParameter.PoolMethod getPool();

    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    boolean hasKernelSize();
    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    int getKernelSize();

    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    boolean hasStride();
    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    int getStride();

    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * The padding size -- currently implemented only for average pooling.
     * </pre>
     */
    boolean hasPad();
    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * The padding size -- currently implemented only for average pooling.
     * </pre>
     */
    int getPad();
  }
  /**
   * Protobuf type {@code caffe.PoolingParameter}
   *
   * <pre>
   * Message that stores parameters used by PoolingLayer
   * </pre>
   */
  public static final class PoolingParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.PoolingParameter)
      PoolingParameterOrBuilder {
    // Use PoolingParameter.newBuilder() to construct.
    private PoolingParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PoolingParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PoolingParameter defaultInstance;
    public static PoolingParameter getDefaultInstance() {
      return defaultInstance;
    }

    public PoolingParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PoolingParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              caffe.Caffe.PoolingParameter.PoolMethod value = caffe.Caffe.PoolingParameter.PoolMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                pool_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              kernelSize_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              stride_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              pad_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_PoolingParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_PoolingParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.PoolingParameter.class, caffe.Caffe.PoolingParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<PoolingParameter> PARSER =
        new com.google.protobuf.AbstractParser<PoolingParameter>() {
      public PoolingParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PoolingParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PoolingParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.PoolingParameter.PoolMethod}
     */
    public enum PoolMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MAX = 0;</code>
       */
      MAX(0, 0),
      /**
       * <code>AVE = 1;</code>
       */
      AVE(1, 1),
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      STOCHASTIC(2, 2),
      ;

      /**
       * <code>MAX = 0;</code>
       */
      public static final int MAX_VALUE = 0;
      /**
       * <code>AVE = 1;</code>
       */
      public static final int AVE_VALUE = 1;
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      public static final int STOCHASTIC_VALUE = 2;


      public final int getNumber() { return value; }

      public static PoolMethod valueOf(int value) {
        switch (value) {
          case 0: return MAX;
          case 1: return AVE;
          case 2: return STOCHASTIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PoolMethod>() {
              public PoolMethod findValueByNumber(int number) {
                return PoolMethod.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.PoolingParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final PoolMethod[] VALUES = values();

      public static PoolMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PoolMethod(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.PoolingParameter.PoolMethod)
    }

    private int bitField0_;
    public static final int POOL_FIELD_NUMBER = 1;
    private caffe.Caffe.PoolingParameter.PoolMethod pool_;
    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public boolean hasPool() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public caffe.Caffe.PoolingParameter.PoolMethod getPool() {
      return pool_;
    }

    public static final int KERNEL_SIZE_FIELD_NUMBER = 2;
    private int kernelSize_;
    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public boolean hasKernelSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 kernel_size = 2;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public int getKernelSize() {
      return kernelSize_;
    }

    public static final int STRIDE_FIELD_NUMBER = 3;
    private int stride_;
    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public boolean hasStride() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 stride = 3 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public int getStride() {
      return stride_;
    }

    public static final int PAD_FIELD_NUMBER = 4;
    private int pad_;
    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * The padding size -- currently implemented only for average pooling.
     * </pre>
     */
    public boolean hasPad() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 pad = 4 [default = 0];</code>
     *
     * <pre>
     * The padding size -- currently implemented only for average pooling.
     * </pre>
     */
    public int getPad() {
      return pad_;
    }

    private void initFields() {
      pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
      kernelSize_ = 0;
      stride_ = 1;
      pad_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, kernelSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, stride_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, pad_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, kernelSize_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, stride_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, pad_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.PoolingParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PoolingParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.PoolingParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.PoolingParameter}
     *
     * <pre>
     * Message that stores parameters used by PoolingLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.PoolingParameter)
        caffe.Caffe.PoolingParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_PoolingParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_PoolingParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.PoolingParameter.class, caffe.Caffe.PoolingParameter.Builder.class);
      }

      // Construct using caffe.Caffe.PoolingParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
        bitField0_ = (bitField0_ & ~0x00000001);
        kernelSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        stride_ = 1;
        bitField0_ = (bitField0_ & ~0x00000004);
        pad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_PoolingParameter_descriptor;
      }

      public caffe.Caffe.PoolingParameter getDefaultInstanceForType() {
        return caffe.Caffe.PoolingParameter.getDefaultInstance();
      }

      public caffe.Caffe.PoolingParameter build() {
        caffe.Caffe.PoolingParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.PoolingParameter buildPartial() {
        caffe.Caffe.PoolingParameter result = new caffe.Caffe.PoolingParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pool_ = pool_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.kernelSize_ = kernelSize_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stride_ = stride_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.pad_ = pad_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.PoolingParameter) {
          return mergeFrom((caffe.Caffe.PoolingParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.PoolingParameter other) {
        if (other == caffe.Caffe.PoolingParameter.getDefaultInstance()) return this;
        if (other.hasPool()) {
          setPool(other.getPool());
        }
        if (other.hasKernelSize()) {
          setKernelSize(other.getKernelSize());
        }
        if (other.hasStride()) {
          setStride(other.getStride());
        }
        if (other.hasPad()) {
          setPad(other.getPad());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.PoolingParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.PoolingParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private caffe.Caffe.PoolingParameter.PoolMethod pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public boolean hasPool() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public caffe.Caffe.PoolingParameter.PoolMethod getPool() {
        return pool_;
      }
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder setPool(caffe.Caffe.PoolingParameter.PoolMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        pool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.PoolingParameter.PoolMethod pool = 1 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder clearPool() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pool_ = caffe.Caffe.PoolingParameter.PoolMethod.MAX;
        onChanged();
        return this;
      }

      private int kernelSize_ ;
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public boolean hasKernelSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public int getKernelSize() {
        return kernelSize_;
      }
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder setKernelSize(int value) {
        bitField0_ |= 0x00000002;
        kernelSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernel_size = 2;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder clearKernelSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        kernelSize_ = 0;
        onChanged();
        return this;
      }

      private int stride_ = 1;
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public boolean hasStride() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public int getStride() {
        return stride_;
      }
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder setStride(int value) {
        bitField0_ |= 0x00000004;
        stride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride = 3 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder clearStride() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stride_ = 1;
        onChanged();
        return this;
      }

      private int pad_ ;
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * The padding size -- currently implemented only for average pooling.
       * </pre>
       */
      public boolean hasPad() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * The padding size -- currently implemented only for average pooling.
       * </pre>
       */
      public int getPad() {
        return pad_;
      }
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * The padding size -- currently implemented only for average pooling.
       * </pre>
       */
      public Builder setPad(int value) {
        bitField0_ |= 0x00000008;
        pad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad = 4 [default = 0];</code>
       *
       * <pre>
       * The padding size -- currently implemented only for average pooling.
       * </pre>
       */
      public Builder clearPad() {
        bitField0_ = (bitField0_ & ~0x00000008);
        pad_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.PoolingParameter)
    }

    static {
      defaultInstance = new PoolingParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.PoolingParameter)
  }

  public interface SppParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.SppParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 layers_num = 2 [default = 3];</code>
     *
     * <pre>
     * layers num
     * </pre>
     */
    boolean hasLayersNum();
    /**
     * <code>optional uint32 layers_num = 2 [default = 3];</code>
     *
     * <pre>
     * layers num
     * </pre>
     */
    int getLayersNum();
  }
  /**
   * Protobuf type {@code caffe.SppParameter}
   *
   * <pre>
   * Message that stores parameters used by SppLayer
   * </pre>
   */
  public static final class SppParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.SppParameter)
      SppParameterOrBuilder {
    // Use SppParameter.newBuilder() to construct.
    private SppParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SppParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SppParameter defaultInstance;
    public static SppParameter getDefaultInstance() {
      return defaultInstance;
    }

    public SppParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SppParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              layersNum_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_SppParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_SppParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.SppParameter.class, caffe.Caffe.SppParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<SppParameter> PARSER =
        new com.google.protobuf.AbstractParser<SppParameter>() {
      public SppParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SppParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SppParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LAYERS_NUM_FIELD_NUMBER = 2;
    private int layersNum_;
    /**
     * <code>optional uint32 layers_num = 2 [default = 3];</code>
     *
     * <pre>
     * layers num
     * </pre>
     */
    public boolean hasLayersNum() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 layers_num = 2 [default = 3];</code>
     *
     * <pre>
     * layers num
     * </pre>
     */
    public int getLayersNum() {
      return layersNum_;
    }

    private void initFields() {
      layersNum_ = 3;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(2, layersNum_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, layersNum_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.SppParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SppParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SppParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.SppParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.SppParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SppParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SppParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.SppParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.SppParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.SppParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.SppParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.SppParameter}
     *
     * <pre>
     * Message that stores parameters used by SppLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.SppParameter)
        caffe.Caffe.SppParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_SppParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_SppParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.SppParameter.class, caffe.Caffe.SppParameter.Builder.class);
      }

      // Construct using caffe.Caffe.SppParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        layersNum_ = 3;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_SppParameter_descriptor;
      }

      public caffe.Caffe.SppParameter getDefaultInstanceForType() {
        return caffe.Caffe.SppParameter.getDefaultInstance();
      }

      public caffe.Caffe.SppParameter build() {
        caffe.Caffe.SppParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.SppParameter buildPartial() {
        caffe.Caffe.SppParameter result = new caffe.Caffe.SppParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.layersNum_ = layersNum_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.SppParameter) {
          return mergeFrom((caffe.Caffe.SppParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.SppParameter other) {
        if (other == caffe.Caffe.SppParameter.getDefaultInstance()) return this;
        if (other.hasLayersNum()) {
          setLayersNum(other.getLayersNum());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.SppParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.SppParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int layersNum_ = 3;
      /**
       * <code>optional uint32 layers_num = 2 [default = 3];</code>
       *
       * <pre>
       * layers num
       * </pre>
       */
      public boolean hasLayersNum() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 layers_num = 2 [default = 3];</code>
       *
       * <pre>
       * layers num
       * </pre>
       */
      public int getLayersNum() {
        return layersNum_;
      }
      /**
       * <code>optional uint32 layers_num = 2 [default = 3];</code>
       *
       * <pre>
       * layers num
       * </pre>
       */
      public Builder setLayersNum(int value) {
        bitField0_ |= 0x00000001;
        layersNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 layers_num = 2 [default = 3];</code>
       *
       * <pre>
       * layers num
       * </pre>
       */
      public Builder clearLayersNum() {
        bitField0_ = (bitField0_ & ~0x00000001);
        layersNum_ = 3;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.SppParameter)
    }

    static {
      defaultInstance = new SppParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.SppParameter)
  }

  public interface PowerParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.PowerParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    boolean hasPower();
    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    float getPower();

    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    float getScale();

    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    boolean hasShift();
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    float getShift();
  }
  /**
   * Protobuf type {@code caffe.PowerParameter}
   *
   * <pre>
   * Message that stores parameters used by PowerLayer
   * </pre>
   */
  public static final class PowerParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.PowerParameter)
      PowerParameterOrBuilder {
    // Use PowerParameter.newBuilder() to construct.
    private PowerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PowerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PowerParameter defaultInstance;
    public static PowerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public PowerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PowerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              power_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              shift_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_PowerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_PowerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.PowerParameter.class, caffe.Caffe.PowerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<PowerParameter> PARSER =
        new com.google.protobuf.AbstractParser<PowerParameter>() {
      public PowerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PowerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PowerParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int POWER_FIELD_NUMBER = 1;
    private float power_;
    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    public boolean hasPower() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float power = 1 [default = 1];</code>
     *
     * <pre>
     * PowerLayer computes outputs y = (shift + scale * x) ^ power.
     * </pre>
     */
    public float getPower() {
      return power_;
    }

    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     */
    public float getScale() {
      return scale_;
    }

    public static final int SHIFT_FIELD_NUMBER = 3;
    private float shift_;
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public boolean hasShift() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float shift = 3 [default = 0];</code>
     */
    public float getShift() {
      return shift_;
    }

    private void initFields() {
      power_ = 1F;
      scale_ = 1F;
      shift_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, power_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, shift_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, power_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, shift_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.PowerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.PowerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.PowerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.PowerParameter}
     *
     * <pre>
     * Message that stores parameters used by PowerLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.PowerParameter)
        caffe.Caffe.PowerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_PowerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_PowerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.PowerParameter.class, caffe.Caffe.PowerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.PowerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        power_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        shift_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_PowerParameter_descriptor;
      }

      public caffe.Caffe.PowerParameter getDefaultInstanceForType() {
        return caffe.Caffe.PowerParameter.getDefaultInstance();
      }

      public caffe.Caffe.PowerParameter build() {
        caffe.Caffe.PowerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.PowerParameter buildPartial() {
        caffe.Caffe.PowerParameter result = new caffe.Caffe.PowerParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.power_ = power_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.shift_ = shift_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.PowerParameter) {
          return mergeFrom((caffe.Caffe.PowerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.PowerParameter other) {
        if (other == caffe.Caffe.PowerParameter.getDefaultInstance()) return this;
        if (other.hasPower()) {
          setPower(other.getPower());
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasShift()) {
          setShift(other.getShift());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.PowerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.PowerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float power_ = 1F;
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public float getPower() {
        return power_;
      }
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public Builder setPower(float value) {
        bitField0_ |= 0x00000001;
        power_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float power = 1 [default = 1];</code>
       *
       * <pre>
       * PowerLayer computes outputs y = (shift + scale * x) ^ power.
       * </pre>
       */
      public Builder clearPower() {
        bitField0_ = (bitField0_ & ~0x00000001);
        power_ = 1F;
        onChanged();
        return this;
      }

      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      private float shift_ ;
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public boolean hasShift() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public float getShift() {
        return shift_;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder setShift(float value) {
        bitField0_ |= 0x00000004;
        shift_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float shift = 3 [default = 0];</code>
       */
      public Builder clearShift() {
        bitField0_ = (bitField0_ & ~0x00000004);
        shift_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.PowerParameter)
    }

    static {
      defaultInstance = new PowerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.PowerParameter)
  }

  public interface WindowDataParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.WindowDataParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    /**
     * <code>optional string mean_file = 3;</code>
     */
    boolean hasMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    java.lang.String getMeanFile();
    /**
     * <code>optional string mean_file = 3;</code>
     */
    com.google.protobuf.ByteString
        getMeanFileBytes();

    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    boolean hasBatchSize();
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    int getBatchSize();

    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropSize();
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropSize();

    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    boolean hasFgThreshold();
    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    float getFgThreshold();

    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    boolean hasBgThreshold();
    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    float getBgThreshold();

    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    boolean hasFgFraction();
    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    float getFgFraction();

    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    boolean hasContextPad();
    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    int getContextPad();

    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    boolean hasCropMode();
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    java.lang.String getCropMode();
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    com.google.protobuf.ByteString
        getCropModeBytes();
  }
  /**
   * Protobuf type {@code caffe.WindowDataParameter}
   *
   * <pre>
   * Message that stores parameters used by WindowDataLayer
   * </pre>
   */
  public static final class WindowDataParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.WindowDataParameter)
      WindowDataParameterOrBuilder {
    // Use WindowDataParameter.newBuilder() to construct.
    private WindowDataParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private WindowDataParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final WindowDataParameter defaultInstance;
    public static WindowDataParameter getDefaultInstance() {
      return defaultInstance;
    }

    public WindowDataParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private WindowDataParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              source_ = bs;
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              scale_ = input.readFloat();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              meanFile_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              batchSize_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              cropSize_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              mirror_ = input.readBool();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              fgThreshold_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              bgThreshold_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              fgFraction_ = input.readFloat();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              contextPad_ = input.readUInt32();
              break;
            }
            case 90: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000400;
              cropMode_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_WindowDataParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_WindowDataParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.WindowDataParameter.class, caffe.Caffe.WindowDataParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<WindowDataParameter> PARSER =
        new com.google.protobuf.AbstractParser<WindowDataParameter>() {
      public WindowDataParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WindowDataParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WindowDataParameter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SOURCE_FIELD_NUMBER = 1;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 1;</code>
     *
     * <pre>
     * Specify the data source.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCALE_FIELD_NUMBER = 2;
    private float scale_;
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float scale = 2 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    public static final int MEAN_FILE_FIELD_NUMBER = 3;
    private java.lang.Object meanFile_;
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public boolean hasMeanFile() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public java.lang.String getMeanFile() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanFile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string mean_file = 3;</code>
     */
    public com.google.protobuf.ByteString
        getMeanFileBytes() {
      java.lang.Object ref = meanFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BATCH_SIZE_FIELD_NUMBER = 4;
    private int batchSize_;
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public boolean hasBatchSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 batch_size = 4;</code>
     *
     * <pre>
     * Specify the batch size.
     * </pre>
     */
    public int getBatchSize() {
      return batchSize_;
    }

    public static final int CROP_SIZE_FIELD_NUMBER = 5;
    private int cropSize_;
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropSize() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 crop_size = 5 [default = 0];</code>
     *
     * <pre>
     * Specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropSize() {
      return cropSize_;
    }

    public static final int MIRROR_FIELD_NUMBER = 6;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool mirror = 6 [default = false];</code>
     *
     * <pre>
     * Specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    public static final int FG_THRESHOLD_FIELD_NUMBER = 7;
    private float fgThreshold_;
    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    public boolean hasFgThreshold() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float fg_threshold = 7 [default = 0.5];</code>
     *
     * <pre>
     * Foreground (object) overlap threshold
     * </pre>
     */
    public float getFgThreshold() {
      return fgThreshold_;
    }

    public static final int BG_THRESHOLD_FIELD_NUMBER = 8;
    private float bgThreshold_;
    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    public boolean hasBgThreshold() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float bg_threshold = 8 [default = 0.5];</code>
     *
     * <pre>
     * Background (non-object) overlap threshold
     * </pre>
     */
    public float getBgThreshold() {
      return bgThreshold_;
    }

    public static final int FG_FRACTION_FIELD_NUMBER = 9;
    private float fgFraction_;
    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public boolean hasFgFraction() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float fg_fraction = 9 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public float getFgFraction() {
      return fgFraction_;
    }

    public static final int CONTEXT_PAD_FIELD_NUMBER = 10;
    private int contextPad_;
    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public boolean hasContextPad() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 context_pad = 10 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public int getContextPad() {
      return contextPad_;
    }

    public static final int CROP_MODE_FIELD_NUMBER = 11;
    private java.lang.Object cropMode_;
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public boolean hasCropMode() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public java.lang.String getCropMode() {
      java.lang.Object ref = cropMode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          cropMode_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string crop_mode = 11 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public com.google.protobuf.ByteString
        getCropModeBytes() {
      java.lang.Object ref = cropMode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cropMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      source_ = "";
      scale_ = 1F;
      meanFile_ = "";
      batchSize_ = 0;
      cropSize_ = 0;
      mirror_ = false;
      fgThreshold_ = 0.5F;
      bgThreshold_ = 0.5F;
      fgFraction_ = 0.25F;
      contextPad_ = 0;
      cropMode_ = "warp";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, fgThreshold_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, bgThreshold_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, fgFraction_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, contextPad_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBytes(11, getCropModeBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getSourceBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, scale_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getMeanFileBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, batchSize_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cropSize_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, mirror_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, fgThreshold_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, bgThreshold_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, fgFraction_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, contextPad_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, getCropModeBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.WindowDataParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.WindowDataParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.WindowDataParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.WindowDataParameter}
     *
     * <pre>
     * Message that stores parameters used by WindowDataLayer
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.WindowDataParameter)
        caffe.Caffe.WindowDataParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_WindowDataParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_WindowDataParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.WindowDataParameter.class, caffe.Caffe.WindowDataParameter.Builder.class);
      }

      // Construct using caffe.Caffe.WindowDataParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        meanFile_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        batchSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cropSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        fgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000040);
        bgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000080);
        fgFraction_ = 0.25F;
        bitField0_ = (bitField0_ & ~0x00000100);
        contextPad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        cropMode_ = "warp";
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_WindowDataParameter_descriptor;
      }

      public caffe.Caffe.WindowDataParameter getDefaultInstanceForType() {
        return caffe.Caffe.WindowDataParameter.getDefaultInstance();
      }

      public caffe.Caffe.WindowDataParameter build() {
        caffe.Caffe.WindowDataParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.WindowDataParameter buildPartial() {
        caffe.Caffe.WindowDataParameter result = new caffe.Caffe.WindowDataParameter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.meanFile_ = meanFile_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.batchSize_ = batchSize_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cropSize_ = cropSize_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.mirror_ = mirror_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fgThreshold_ = fgThreshold_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.bgThreshold_ = bgThreshold_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.fgFraction_ = fgFraction_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.contextPad_ = contextPad_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.cropMode_ = cropMode_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.WindowDataParameter) {
          return mergeFrom((caffe.Caffe.WindowDataParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.WindowDataParameter other) {
        if (other == caffe.Caffe.WindowDataParameter.getDefaultInstance()) return this;
        if (other.hasSource()) {
          bitField0_ |= 0x00000001;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanFile()) {
          bitField0_ |= 0x00000004;
          meanFile_ = other.meanFile_;
          onChanged();
        }
        if (other.hasBatchSize()) {
          setBatchSize(other.getBatchSize());
        }
        if (other.hasCropSize()) {
          setCropSize(other.getCropSize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (other.hasFgThreshold()) {
          setFgThreshold(other.getFgThreshold());
        }
        if (other.hasBgThreshold()) {
          setBgThreshold(other.getBgThreshold());
        }
        if (other.hasFgFraction()) {
          setFgFraction(other.getFgFraction());
        }
        if (other.hasContextPad()) {
          setContextPad(other.getContextPad());
        }
        if (other.hasCropMode()) {
          bitField0_ |= 0x00000400;
          cropMode_ = other.cropMode_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.WindowDataParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.WindowDataParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            source_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00000001);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 1;</code>
       *
       * <pre>
       * Specify the data source.
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        source_ = value;
        onChanged();
        return this;
      }

      private float scale_ = 1F;
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000002;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 2 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000002);
        scale_ = 1F;
        onChanged();
        return this;
      }

      private java.lang.Object meanFile_ = "";
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public boolean hasMeanFile() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public java.lang.String getMeanFile() {
        java.lang.Object ref = meanFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            meanFile_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public com.google.protobuf.ByteString
          getMeanFileBytes() {
        java.lang.Object ref = meanFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder clearMeanFile() {
        bitField0_ = (bitField0_ & ~0x00000004);
        meanFile_ = getDefaultInstance().getMeanFile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string mean_file = 3;</code>
       */
      public Builder setMeanFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        meanFile_ = value;
        onChanged();
        return this;
      }

      private int batchSize_ ;
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public boolean hasBatchSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public int getBatchSize() {
        return batchSize_;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder setBatchSize(int value) {
        bitField0_ |= 0x00000008;
        batchSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batch_size = 4;</code>
       *
       * <pre>
       * Specify the batch size.
       * </pre>
       */
      public Builder clearBatchSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        batchSize_ = 0;
        onChanged();
        return this;
      }

      private int cropSize_ ;
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropSize() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropSize() {
        return cropSize_;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropSize(int value) {
        bitField0_ |= 0x00000010;
        cropSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crop_size = 5 [default = 0];</code>
       *
       * <pre>
       * Specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropSize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cropSize_ = 0;
        onChanged();
        return this;
      }

      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00000020;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 6 [default = false];</code>
       *
       * <pre>
       * Specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00000020);
        mirror_ = false;
        onChanged();
        return this;
      }

      private float fgThreshold_ = 0.5F;
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public boolean hasFgThreshold() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public float getFgThreshold() {
        return fgThreshold_;
      }
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public Builder setFgThreshold(float value) {
        bitField0_ |= 0x00000040;
        fgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fg_threshold = 7 [default = 0.5];</code>
       *
       * <pre>
       * Foreground (object) overlap threshold
       * </pre>
       */
      public Builder clearFgThreshold() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      private float bgThreshold_ = 0.5F;
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public boolean hasBgThreshold() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public float getBgThreshold() {
        return bgThreshold_;
      }
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public Builder setBgThreshold(float value) {
        bitField0_ |= 0x00000080;
        bgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float bg_threshold = 8 [default = 0.5];</code>
       *
       * <pre>
       * Background (non-object) overlap threshold
       * </pre>
       */
      public Builder clearBgThreshold() {
        bitField0_ = (bitField0_ & ~0x00000080);
        bgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      private float fgFraction_ = 0.25F;
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public boolean hasFgFraction() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public float getFgFraction() {
        return fgFraction_;
      }
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder setFgFraction(float value) {
        bitField0_ |= 0x00000100;
        fgFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fg_fraction = 9 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder clearFgFraction() {
        bitField0_ = (bitField0_ & ~0x00000100);
        fgFraction_ = 0.25F;
        onChanged();
        return this;
      }

      private int contextPad_ ;
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public boolean hasContextPad() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public int getContextPad() {
        return contextPad_;
      }
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder setContextPad(int value) {
        bitField0_ |= 0x00000200;
        contextPad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 context_pad = 10 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder clearContextPad() {
        bitField0_ = (bitField0_ & ~0x00000200);
        contextPad_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object cropMode_ = "warp";
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public boolean hasCropMode() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public java.lang.String getCropMode() {
        java.lang.Object ref = cropMode_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            cropMode_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public com.google.protobuf.ByteString
          getCropModeBytes() {
        java.lang.Object ref = cropMode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cropMode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setCropMode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        cropMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder clearCropMode() {
        bitField0_ = (bitField0_ & ~0x00000400);
        cropMode_ = getDefaultInstance().getCropMode();
        onChanged();
        return this;
      }
      /**
       * <code>optional string crop_mode = 11 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setCropModeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
        cropMode_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:caffe.WindowDataParameter)
    }

    static {
      defaultInstance = new WindowDataParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.WindowDataParameter)
  }

  public interface V0LayerParameterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:caffe.V0LayerParameter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    boolean hasName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    java.lang.String getName();
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    boolean hasNumOutput();
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    int getNumOutput();

    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean hasBiasterm();
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    boolean getBiasterm();

    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    boolean hasWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameter getWeightFiller();
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder();

    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    boolean hasBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameter getBiasFiller();
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder();

    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    boolean hasPad();
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    int getPad();

    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    boolean hasKernelsize();
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    int getKernelsize();

    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    boolean hasGroup();
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    int getGroup();

    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    boolean hasStride();
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    int getStride();

    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    boolean hasPool();
    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    caffe.Caffe.V0LayerParameter.PoolMethod getPool();

    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    boolean hasDropoutRatio();
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    float getDropoutRatio();

    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasLocalSize();
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    int getLocalSize();

    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasAlpha();
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    float getAlpha();

    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    boolean hasBeta();
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    float getBeta();

    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    boolean hasSource();
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    java.lang.String getSource();
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    com.google.protobuf.ByteString
        getSourceBytes();

    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    float getScale();

    /**
     * <code>optional string meanfile = 18;</code>
     */
    boolean hasMeanfile();
    /**
     * <code>optional string meanfile = 18;</code>
     */
    java.lang.String getMeanfile();
    /**
     * <code>optional string meanfile = 18;</code>
     */
    com.google.protobuf.ByteString
        getMeanfileBytes();

    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    boolean hasBatchsize();
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    int getBatchsize();

    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    boolean hasCropsize();
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    int getCropsize();

    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    boolean hasMirror();
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    boolean getMirror();

    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<caffe.Caffe.BlobProto> 
        getBlobsList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    caffe.Caffe.BlobProto getBlobs(int index);
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    int getBlobsCount();
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList();
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index);

    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    java.util.List<java.lang.Float> getBlobsLrList();
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    int getBlobsLrCount();
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    float getBlobsLr(int index);

    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    java.util.List<java.lang.Float> getWeightDecayList();
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    int getWeightDecayCount();
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    float getWeightDecay(int index);

    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    boolean hasRandSkip();
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    int getRandSkip();

    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    boolean hasDetFgThreshold();
    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    float getDetFgThreshold();

    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    boolean hasDetBgThreshold();
    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    float getDetBgThreshold();

    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    boolean hasDetFgFraction();
    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    float getDetFgFraction();

    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    boolean hasDetContextPad();
    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    int getDetContextPad();

    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    boolean hasDetCropMode();
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    java.lang.String getDetCropMode();
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    com.google.protobuf.ByteString
        getDetCropModeBytes();

    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    boolean hasNewNum();
    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    int getNewNum();

    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    boolean hasNewChannels();
    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    int getNewChannels();

    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    boolean hasNewHeight();
    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    int getNewHeight();

    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    boolean hasNewWidth();
    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    int getNewWidth();

    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    boolean hasShuffleImages();
    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    boolean getShuffleImages();

    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    boolean hasConcatDim();
    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    int getConcatDim();

    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    boolean hasHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    caffe.Caffe.HDF5OutputParameter getHdf5OutputParam();
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder();
  }
  /**
   * Protobuf type {@code caffe.V0LayerParameter}
   *
   * <pre>
   * DEPRECATED: V0LayerParameter is the old way of specifying layer parameters
   * in Caffe.  We keep this message type around for legacy support.
   * </pre>
   */
  public static final class V0LayerParameter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:caffe.V0LayerParameter)
      V0LayerParameterOrBuilder {
    // Use V0LayerParameter.newBuilder() to construct.
    private V0LayerParameter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private V0LayerParameter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final V0LayerParameter defaultInstance;
    public static V0LayerParameter getDefaultInstance() {
      return defaultInstance;
    }

    public V0LayerParameter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private V0LayerParameter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              name_ = bs;
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              type_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              numOutput_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              biasterm_ = input.readBool();
              break;
            }
            case 42: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = weightFiller_.toBuilder();
              }
              weightFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(weightFiller_);
                weightFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              caffe.Caffe.FillerParameter.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = biasFiller_.toBuilder();
              }
              biasFiller_ = input.readMessage(caffe.Caffe.FillerParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(biasFiller_);
                biasFiller_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              pad_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              kernelsize_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              group_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              stride_ = input.readUInt32();
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              caffe.Caffe.V0LayerParameter.PoolMethod value = caffe.Caffe.V0LayerParameter.PoolMethod.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                pool_ = value;
              }
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              dropoutRatio_ = input.readFloat();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              localSize_ = input.readUInt32();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              alpha_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              beta_ = input.readFloat();
              break;
            }
            case 130: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00008000;
              source_ = bs;
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              scale_ = input.readFloat();
              break;
            }
            case 146: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00020000;
              meanfile_ = bs;
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              batchsize_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              cropsize_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              mirror_ = input.readBool();
              break;
            }
            case 402: {
              if (!((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
                blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>();
                mutable_bitField0_ |= 0x00200000;
              }
              blobs_.add(input.readMessage(caffe.Caffe.BlobProto.PARSER, extensionRegistry));
              break;
            }
            case 413: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00400000;
              }
              blobsLr_.add(input.readFloat());
              break;
            }
            case 410: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                blobsLr_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                blobsLr_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 421: {
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00800000;
              }
              weightDecay_.add(input.readFloat());
              break;
            }
            case 418: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00800000) == 0x00800000) && input.getBytesUntilLimit() > 0) {
                weightDecay_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00800000;
              }
              while (input.getBytesUntilLimit() > 0) {
                weightDecay_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 424: {
              bitField0_ |= 0x00200000;
              randSkip_ = input.readUInt32();
              break;
            }
            case 437: {
              bitField0_ |= 0x00400000;
              detFgThreshold_ = input.readFloat();
              break;
            }
            case 445: {
              bitField0_ |= 0x00800000;
              detBgThreshold_ = input.readFloat();
              break;
            }
            case 453: {
              bitField0_ |= 0x01000000;
              detFgFraction_ = input.readFloat();
              break;
            }
            case 464: {
              bitField0_ |= 0x02000000;
              detContextPad_ = input.readUInt32();
              break;
            }
            case 474: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x04000000;
              detCropMode_ = bs;
              break;
            }
            case 480: {
              bitField0_ |= 0x08000000;
              newNum_ = input.readInt32();
              break;
            }
            case 488: {
              bitField0_ |= 0x10000000;
              newChannels_ = input.readInt32();
              break;
            }
            case 496: {
              bitField0_ |= 0x20000000;
              newHeight_ = input.readInt32();
              break;
            }
            case 504: {
              bitField0_ |= 0x40000000;
              newWidth_ = input.readInt32();
              break;
            }
            case 512: {
              bitField0_ |= 0x80000000;
              shuffleImages_ = input.readBool();
              break;
            }
            case 520: {
              bitField1_ |= 0x00000001;
              concatDim_ = input.readUInt32();
              break;
            }
            case 8010: {
              caffe.Caffe.HDF5OutputParameter.Builder subBuilder = null;
              if (((bitField1_ & 0x00000002) == 0x00000002)) {
                subBuilder = hdf5OutputParam_.toBuilder();
              }
              hdf5OutputParam_ = input.readMessage(caffe.Caffe.HDF5OutputParameter.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hdf5OutputParam_);
                hdf5OutputParam_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00200000) == 0x00200000)) {
          blobs_ = java.util.Collections.unmodifiableList(blobs_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
        }
        if (((mutable_bitField0_ & 0x00800000) == 0x00800000)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return caffe.Caffe.internal_static_caffe_V0LayerParameter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return caffe.Caffe.internal_static_caffe_V0LayerParameter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              caffe.Caffe.V0LayerParameter.class, caffe.Caffe.V0LayerParameter.Builder.class);
    }

    public static com.google.protobuf.Parser<V0LayerParameter> PARSER =
        new com.google.protobuf.AbstractParser<V0LayerParameter>() {
      public V0LayerParameter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new V0LayerParameter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<V0LayerParameter> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code caffe.V0LayerParameter.PoolMethod}
     */
    public enum PoolMethod
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MAX = 0;</code>
       */
      MAX(0, 0),
      /**
       * <code>AVE = 1;</code>
       */
      AVE(1, 1),
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      STOCHASTIC(2, 2),
      ;

      /**
       * <code>MAX = 0;</code>
       */
      public static final int MAX_VALUE = 0;
      /**
       * <code>AVE = 1;</code>
       */
      public static final int AVE_VALUE = 1;
      /**
       * <code>STOCHASTIC = 2;</code>
       */
      public static final int STOCHASTIC_VALUE = 2;


      public final int getNumber() { return value; }

      public static PoolMethod valueOf(int value) {
        switch (value) {
          case 0: return MAX;
          case 1: return AVE;
          case 2: return STOCHASTIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PoolMethod>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PoolMethod>() {
              public PoolMethod findValueByNumber(int number) {
                return PoolMethod.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return caffe.Caffe.V0LayerParameter.getDescriptor().getEnumTypes().get(0);
      }

      private static final PoolMethod[] VALUES = values();

      public static PoolMethod valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PoolMethod(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:caffe.V0LayerParameter.PoolMethod)
    }

    private int bitField0_;
    private int bitField1_;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string name = 1;</code>
     *
     * <pre>
     * the layer name
     * </pre>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private java.lang.Object type_;
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string type = 2;</code>
     *
     * <pre>
     * the string to specify the layer type
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NUM_OUTPUT_FIELD_NUMBER = 3;
    private int numOutput_;
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    public boolean hasNumOutput() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 num_output = 3;</code>
     *
     * <pre>
     * Parameters to specify layers with inner products.
     * </pre>
     */
    public int getNumOutput() {
      return numOutput_;
    }

    public static final int BIASTERM_FIELD_NUMBER = 4;
    private boolean biasterm_;
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean hasBiasterm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool biasterm = 4 [default = true];</code>
     *
     * <pre>
     * whether to have bias terms
     * </pre>
     */
    public boolean getBiasterm() {
      return biasterm_;
    }

    public static final int WEIGHT_FILLER_FIELD_NUMBER = 5;
    private caffe.Caffe.FillerParameter weightFiller_;
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public boolean hasWeightFiller() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameter getWeightFiller() {
      return weightFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
     *
     * <pre>
     * The filler for the weight
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
      return weightFiller_;
    }

    public static final int BIAS_FILLER_FIELD_NUMBER = 6;
    private caffe.Caffe.FillerParameter biasFiller_;
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public boolean hasBiasFiller() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameter getBiasFiller() {
      return biasFiller_;
    }
    /**
     * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
     *
     * <pre>
     * The filler for the bias
     * </pre>
     */
    public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
      return biasFiller_;
    }

    public static final int PAD_FIELD_NUMBER = 7;
    private int pad_;
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public boolean hasPad() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 pad = 7 [default = 0];</code>
     *
     * <pre>
     * The padding size
     * </pre>
     */
    public int getPad() {
      return pad_;
    }

    public static final int KERNELSIZE_FIELD_NUMBER = 8;
    private int kernelsize_;
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public boolean hasKernelsize() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 kernelsize = 8;</code>
     *
     * <pre>
     * The kernel size
     * </pre>
     */
    public int getKernelsize() {
      return kernelsize_;
    }

    public static final int GROUP_FIELD_NUMBER = 9;
    private int group_;
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 group = 9 [default = 1];</code>
     *
     * <pre>
     * The group size for group conv
     * </pre>
     */
    public int getGroup() {
      return group_;
    }

    public static final int STRIDE_FIELD_NUMBER = 10;
    private int stride_;
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public boolean hasStride() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 stride = 10 [default = 1];</code>
     *
     * <pre>
     * The stride
     * </pre>
     */
    public int getStride() {
      return stride_;
    }

    public static final int POOL_FIELD_NUMBER = 11;
    private caffe.Caffe.V0LayerParameter.PoolMethod pool_;
    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public boolean hasPool() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
     *
     * <pre>
     * The pooling method
     * </pre>
     */
    public caffe.Caffe.V0LayerParameter.PoolMethod getPool() {
      return pool_;
    }

    public static final int DROPOUT_RATIO_FIELD_NUMBER = 12;
    private float dropoutRatio_;
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public boolean hasDropoutRatio() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
     *
     * <pre>
     * dropout ratio
     * </pre>
     */
    public float getDropoutRatio() {
      return dropoutRatio_;
    }

    public static final int LOCAL_SIZE_FIELD_NUMBER = 13;
    private int localSize_;
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasLocalSize() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 local_size = 13 [default = 5];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public int getLocalSize() {
      return localSize_;
    }

    public static final int ALPHA_FIELD_NUMBER = 14;
    private float alpha_;
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasAlpha() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float alpha = 14 [default = 1];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public float getAlpha() {
      return alpha_;
    }

    public static final int BETA_FIELD_NUMBER = 15;
    private float beta_;
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public boolean hasBeta() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float beta = 15 [default = 0.75];</code>
     *
     * <pre>
     * for local response norm
     * </pre>
     */
    public float getBeta() {
      return beta_;
    }

    public static final int SOURCE_FIELD_NUMBER = 16;
    private java.lang.Object source_;
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public java.lang.String getSource() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          source_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string source = 16;</code>
     *
     * <pre>
     * For data layers, specify the data source
     * </pre>
     */
    public com.google.protobuf.ByteString
        getSourceBytes() {
      java.lang.Object ref = source_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        source_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCALE_FIELD_NUMBER = 17;
    private float scale_;
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float scale = 17 [default = 1];</code>
     *
     * <pre>
     * For data pre-processing, we can do simple scaling and subtracting the
     * data mean, if provided. Note that the mean subtraction is always carried
     * out before scaling.
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    public static final int MEANFILE_FIELD_NUMBER = 18;
    private java.lang.Object meanfile_;
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public boolean hasMeanfile() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public java.lang.String getMeanfile() {
      java.lang.Object ref = meanfile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          meanfile_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string meanfile = 18;</code>
     */
    public com.google.protobuf.ByteString
        getMeanfileBytes() {
      java.lang.Object ref = meanfile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meanfile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BATCHSIZE_FIELD_NUMBER = 19;
    private int batchsize_;
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    public boolean hasBatchsize() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 batchsize = 19;</code>
     *
     * <pre>
     * For data layers, specify the batch size.
     * </pre>
     */
    public int getBatchsize() {
      return batchsize_;
    }

    public static final int CROPSIZE_FIELD_NUMBER = 20;
    private int cropsize_;
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    public boolean hasCropsize() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 cropsize = 20 [default = 0];</code>
     *
     * <pre>
     * For data layers, specify if we would like to randomly crop an image.
     * </pre>
     */
    public int getCropsize() {
      return cropsize_;
    }

    public static final int MIRROR_FIELD_NUMBER = 21;
    private boolean mirror_;
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean hasMirror() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional bool mirror = 21 [default = false];</code>
     *
     * <pre>
     * For data layers, specify if we want to randomly mirror data.
     * </pre>
     */
    public boolean getMirror() {
      return mirror_;
    }

    public static final int BLOBS_FIELD_NUMBER = 50;
    private java.util.List<caffe.Caffe.BlobProto> blobs_;
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
        getBlobsOrBuilderList() {
      return blobs_;
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public int getBlobsCount() {
      return blobs_.size();
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public caffe.Caffe.BlobProto getBlobs(int index) {
      return blobs_.get(index);
    }
    /**
     * <code>repeated .caffe.BlobProto blobs = 50;</code>
     *
     * <pre>
     * The blobs containing the numeric parameters of the layer
     * </pre>
     */
    public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
        int index) {
      return blobs_.get(index);
    }

    public static final int BLOBS_LR_FIELD_NUMBER = 51;
    private java.util.List<java.lang.Float> blobsLr_;
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getBlobsLrList() {
      return blobsLr_;
    }
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public int getBlobsLrCount() {
      return blobsLr_.size();
    }
    /**
     * <code>repeated float blobs_lr = 51;</code>
     *
     * <pre>
     * The ratio that is multiplied on the global learning rate. If you want to
     * set the learning ratio for one blob, you need to set it for all blobs.
     * </pre>
     */
    public float getBlobsLr(int index) {
      return blobsLr_.get(index);
    }

    public static final int WEIGHT_DECAY_FIELD_NUMBER = 52;
    private java.util.List<java.lang.Float> weightDecay_;
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public java.util.List<java.lang.Float>
        getWeightDecayList() {
      return weightDecay_;
    }
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public int getWeightDecayCount() {
      return weightDecay_.size();
    }
    /**
     * <code>repeated float weight_decay = 52;</code>
     *
     * <pre>
     * The weight decay that is multiplied on the global weight decay.
     * </pre>
     */
    public float getWeightDecay(int index) {
      return weightDecay_.get(index);
    }

    public static final int RAND_SKIP_FIELD_NUMBER = 53;
    private int randSkip_;
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public boolean hasRandSkip() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 rand_skip = 53 [default = 0];</code>
     *
     * <pre>
     * The rand_skip variable is for the data layer to skip a few data points
     * to avoid all asynchronous sgd clients to start at the same point. The skip
     * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
     * be larger than the number of keys in the leveldb.
     * </pre>
     */
    public int getRandSkip() {
      return randSkip_;
    }

    public static final int DET_FG_THRESHOLD_FIELD_NUMBER = 54;
    private float detFgThreshold_;
    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    public boolean hasDetFgThreshold() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
     *
     * <pre>
     * Fields related to detection (det_*)
     * foreground (object) overlap threshold
     * </pre>
     */
    public float getDetFgThreshold() {
      return detFgThreshold_;
    }

    public static final int DET_BG_THRESHOLD_FIELD_NUMBER = 55;
    private float detBgThreshold_;
    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    public boolean hasDetBgThreshold() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
     *
     * <pre>
     * background (non-object) overlap threshold
     * </pre>
     */
    public float getDetBgThreshold() {
      return detBgThreshold_;
    }

    public static final int DET_FG_FRACTION_FIELD_NUMBER = 56;
    private float detFgFraction_;
    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public boolean hasDetFgFraction() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
     *
     * <pre>
     * Fraction of batch that should be foreground objects
     * </pre>
     */
    public float getDetFgFraction() {
      return detFgFraction_;
    }

    public static final int DET_CONTEXT_PAD_FIELD_NUMBER = 58;
    private int detContextPad_;
    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public boolean hasDetContextPad() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
     *
     * <pre>
     * Amount of contextual padding to add around a window
     * (used only by the window_data_layer)
     * </pre>
     */
    public int getDetContextPad() {
      return detContextPad_;
    }

    public static final int DET_CROP_MODE_FIELD_NUMBER = 59;
    private java.lang.Object detCropMode_;
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public boolean hasDetCropMode() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public java.lang.String getDetCropMode() {
      java.lang.Object ref = detCropMode_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          detCropMode_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
     *
     * <pre>
     * Mode for cropping out a detection window
     * warp: cropped window is warped to a fixed size and aspect ratio
     * square: the tightest square around the window is cropped
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDetCropModeBytes() {
      java.lang.Object ref = detCropMode_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        detCropMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NEW_NUM_FIELD_NUMBER = 60;
    private int newNum_;
    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    public boolean hasNewNum() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional int32 new_num = 60 [default = 0];</code>
     *
     * <pre>
     * For ReshapeLayer, one needs to specify the new dimensions.
     * </pre>
     */
    public int getNewNum() {
      return newNum_;
    }

    public static final int NEW_CHANNELS_FIELD_NUMBER = 61;
    private int newChannels_;
    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    public boolean hasNewChannels() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional int32 new_channels = 61 [default = 0];</code>
     */
    public int getNewChannels() {
      return newChannels_;
    }

    public static final int NEW_HEIGHT_FIELD_NUMBER = 62;
    private int newHeight_;
    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    public boolean hasNewHeight() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional int32 new_height = 62 [default = 0];</code>
     */
    public int getNewHeight() {
      return newHeight_;
    }

    public static final int NEW_WIDTH_FIELD_NUMBER = 63;
    private int newWidth_;
    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    public boolean hasNewWidth() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional int32 new_width = 63 [default = 0];</code>
     */
    public int getNewWidth() {
      return newWidth_;
    }

    public static final int SHUFFLE_IMAGES_FIELD_NUMBER = 64;
    private boolean shuffleImages_;
    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public boolean hasShuffleImages() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional bool shuffle_images = 64 [default = false];</code>
     *
     * <pre>
     * Whether or not ImageLayer should shuffle the list of files at every epoch.
     * It will also resize images if new_height or new_width are not zero.
     * </pre>
     */
    public boolean getShuffleImages() {
      return shuffleImages_;
    }

    public static final int CONCAT_DIM_FIELD_NUMBER = 65;
    private int concatDim_;
    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    public boolean hasConcatDim() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 concat_dim = 65 [default = 1];</code>
     *
     * <pre>
     * For ConcatLayer, one needs to specify the dimension for concatenation, and
     * the other dimensions must be the same for all the bottom blobs.
     * By default it will concatenate blobs along the channels dimension.
     * </pre>
     */
    public int getConcatDim() {
      return concatDim_;
    }

    public static final int HDF5_OUTPUT_PARAM_FIELD_NUMBER = 1001;
    private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_;
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    public boolean hasHdf5OutputParam() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
      return hdf5OutputParam_;
    }
    /**
     * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
     */
    public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
      return hdf5OutputParam_;
    }

    private void initFields() {
      name_ = "";
      type_ = "";
      numOutput_ = 0;
      biasterm_ = true;
      weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      pad_ = 0;
      kernelsize_ = 0;
      group_ = 1;
      stride_ = 1;
      pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
      dropoutRatio_ = 0.5F;
      localSize_ = 5;
      alpha_ = 1F;
      beta_ = 0.75F;
      source_ = "";
      scale_ = 1F;
      meanfile_ = "";
      batchsize_ = 0;
      cropsize_ = 0;
      mirror_ = false;
      blobs_ = java.util.Collections.emptyList();
      blobsLr_ = java.util.Collections.emptyList();
      weightDecay_ = java.util.Collections.emptyList();
      randSkip_ = 0;
      detFgThreshold_ = 0.5F;
      detBgThreshold_ = 0.5F;
      detFgFraction_ = 0.25F;
      detContextPad_ = 0;
      detCropMode_ = "warp";
      newNum_ = 0;
      newChannels_ = 0;
      newHeight_ = 0;
      newWidth_ = 0;
      shuffleImages_ = false;
      concatDim_ = 1;
      hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, numOutput_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, biasterm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, weightFiller_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, biasFiller_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, pad_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, kernelsize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, group_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, stride_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, dropoutRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, localSize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, alpha_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, beta_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBytes(16, getSourceBytes());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, scale_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBytes(18, getMeanfileBytes());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, batchsize_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, cropsize_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeBool(21, mirror_);
      }
      for (int i = 0; i < blobs_.size(); i++) {
        output.writeMessage(50, blobs_.get(i));
      }
      for (int i = 0; i < blobsLr_.size(); i++) {
        output.writeFloat(51, blobsLr_.get(i));
      }
      for (int i = 0; i < weightDecay_.size(); i++) {
        output.writeFloat(52, weightDecay_.get(i));
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(53, randSkip_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(54, detFgThreshold_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeFloat(55, detBgThreshold_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeFloat(56, detFgFraction_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(58, detContextPad_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeBytes(59, getDetCropModeBytes());
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeInt32(60, newNum_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeInt32(61, newChannels_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeInt32(62, newHeight_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeInt32(63, newWidth_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeBool(64, shuffleImages_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(65, concatDim_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(1001, hdf5OutputParam_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, numOutput_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, biasterm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, weightFiller_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, biasFiller_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, pad_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, kernelsize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, group_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, stride_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, pool_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, dropoutRatio_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, localSize_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, alpha_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, beta_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(16, getSourceBytes());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, scale_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(18, getMeanfileBytes());
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, batchsize_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, cropsize_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, mirror_);
      }
      for (int i = 0; i < blobs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, blobs_.get(i));
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBlobsLrList().size();
        size += dataSize;
        size += 2 * getBlobsLrList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getWeightDecayList().size();
        size += dataSize;
        size += 2 * getWeightDecayList().size();
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(53, randSkip_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(54, detFgThreshold_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(55, detBgThreshold_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(56, detFgFraction_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(58, detContextPad_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(59, getDetCropModeBytes());
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(60, newNum_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(61, newChannels_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(62, newHeight_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(63, newWidth_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(64, shuffleImages_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(65, concatDim_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1001, hdf5OutputParam_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static caffe.Caffe.V0LayerParameter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static caffe.Caffe.V0LayerParameter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(caffe.Caffe.V0LayerParameter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code caffe.V0LayerParameter}
     *
     * <pre>
     * DEPRECATED: V0LayerParameter is the old way of specifying layer parameters
     * in Caffe.  We keep this message type around for legacy support.
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:caffe.V0LayerParameter)
        caffe.Caffe.V0LayerParameterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return caffe.Caffe.internal_static_caffe_V0LayerParameter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return caffe.Caffe.internal_static_caffe_V0LayerParameter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                caffe.Caffe.V0LayerParameter.class, caffe.Caffe.V0LayerParameter.Builder.class);
      }

      // Construct using caffe.Caffe.V0LayerParameter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWeightFillerFieldBuilder();
          getBiasFillerFieldBuilder();
          getBlobsFieldBuilder();
          getHdf5OutputParamFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        numOutput_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        biasterm_ = true;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        pad_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        kernelsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        group_ = 1;
        bitField0_ = (bitField0_ & ~0x00000100);
        stride_ = 1;
        bitField0_ = (bitField0_ & ~0x00000200);
        pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
        bitField0_ = (bitField0_ & ~0x00000400);
        dropoutRatio_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x00000800);
        localSize_ = 5;
        bitField0_ = (bitField0_ & ~0x00001000);
        alpha_ = 1F;
        bitField0_ = (bitField0_ & ~0x00002000);
        beta_ = 0.75F;
        bitField0_ = (bitField0_ & ~0x00004000);
        source_ = "";
        bitField0_ = (bitField0_ & ~0x00008000);
        scale_ = 1F;
        bitField0_ = (bitField0_ & ~0x00010000);
        meanfile_ = "";
        bitField0_ = (bitField0_ & ~0x00020000);
        batchsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        cropsize_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        mirror_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
        } else {
          blobsBuilder_.clear();
        }
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        randSkip_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        detFgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x02000000);
        detBgThreshold_ = 0.5F;
        bitField0_ = (bitField0_ & ~0x04000000);
        detFgFraction_ = 0.25F;
        bitField0_ = (bitField0_ & ~0x08000000);
        detContextPad_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        detCropMode_ = "warp";
        bitField0_ = (bitField0_ & ~0x20000000);
        newNum_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        newChannels_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        newHeight_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        newWidth_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        shuffleImages_ = false;
        bitField1_ = (bitField1_ & ~0x00000004);
        concatDim_ = 1;
        bitField1_ = (bitField1_ & ~0x00000008);
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return caffe.Caffe.internal_static_caffe_V0LayerParameter_descriptor;
      }

      public caffe.Caffe.V0LayerParameter getDefaultInstanceForType() {
        return caffe.Caffe.V0LayerParameter.getDefaultInstance();
      }

      public caffe.Caffe.V0LayerParameter build() {
        caffe.Caffe.V0LayerParameter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public caffe.Caffe.V0LayerParameter buildPartial() {
        caffe.Caffe.V0LayerParameter result = new caffe.Caffe.V0LayerParameter(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numOutput_ = numOutput_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.biasterm_ = biasterm_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (weightFillerBuilder_ == null) {
          result.weightFiller_ = weightFiller_;
        } else {
          result.weightFiller_ = weightFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (biasFillerBuilder_ == null) {
          result.biasFiller_ = biasFiller_;
        } else {
          result.biasFiller_ = biasFillerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.pad_ = pad_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.kernelsize_ = kernelsize_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.group_ = group_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.stride_ = stride_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.pool_ = pool_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dropoutRatio_ = dropoutRatio_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.localSize_ = localSize_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.alpha_ = alpha_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.beta_ = beta_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.source_ = source_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.meanfile_ = meanfile_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.batchsize_ = batchsize_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.cropsize_ = cropsize_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.mirror_ = mirror_;
        if (blobsBuilder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000)) {
            blobs_ = java.util.Collections.unmodifiableList(blobs_);
            bitField0_ = (bitField0_ & ~0x00200000);
          }
          result.blobs_ = blobs_;
        } else {
          result.blobs_ = blobsBuilder_.build();
        }
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          blobsLr_ = java.util.Collections.unmodifiableList(blobsLr_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.blobsLr_ = blobsLr_;
        if (((bitField0_ & 0x00800000) == 0x00800000)) {
          weightDecay_ = java.util.Collections.unmodifiableList(weightDecay_);
          bitField0_ = (bitField0_ & ~0x00800000);
        }
        result.weightDecay_ = weightDecay_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.randSkip_ = randSkip_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.detFgThreshold_ = detFgThreshold_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.detBgThreshold_ = detBgThreshold_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.detFgFraction_ = detFgFraction_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.detContextPad_ = detContextPad_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.detCropMode_ = detCropMode_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.newNum_ = newNum_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.newChannels_ = newChannels_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x20000000;
        }
        result.newHeight_ = newHeight_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x40000000;
        }
        result.newWidth_ = newWidth_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x80000000;
        }
        result.shuffleImages_ = shuffleImages_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000001;
        }
        result.concatDim_ = concatDim_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000002;
        }
        if (hdf5OutputParamBuilder_ == null) {
          result.hdf5OutputParam_ = hdf5OutputParam_;
        } else {
          result.hdf5OutputParam_ = hdf5OutputParamBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof caffe.Caffe.V0LayerParameter) {
          return mergeFrom((caffe.Caffe.V0LayerParameter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(caffe.Caffe.V0LayerParameter other) {
        if (other == caffe.Caffe.V0LayerParameter.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasType()) {
          bitField0_ |= 0x00000002;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasNumOutput()) {
          setNumOutput(other.getNumOutput());
        }
        if (other.hasBiasterm()) {
          setBiasterm(other.getBiasterm());
        }
        if (other.hasWeightFiller()) {
          mergeWeightFiller(other.getWeightFiller());
        }
        if (other.hasBiasFiller()) {
          mergeBiasFiller(other.getBiasFiller());
        }
        if (other.hasPad()) {
          setPad(other.getPad());
        }
        if (other.hasKernelsize()) {
          setKernelsize(other.getKernelsize());
        }
        if (other.hasGroup()) {
          setGroup(other.getGroup());
        }
        if (other.hasStride()) {
          setStride(other.getStride());
        }
        if (other.hasPool()) {
          setPool(other.getPool());
        }
        if (other.hasDropoutRatio()) {
          setDropoutRatio(other.getDropoutRatio());
        }
        if (other.hasLocalSize()) {
          setLocalSize(other.getLocalSize());
        }
        if (other.hasAlpha()) {
          setAlpha(other.getAlpha());
        }
        if (other.hasBeta()) {
          setBeta(other.getBeta());
        }
        if (other.hasSource()) {
          bitField0_ |= 0x00008000;
          source_ = other.source_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasMeanfile()) {
          bitField0_ |= 0x00020000;
          meanfile_ = other.meanfile_;
          onChanged();
        }
        if (other.hasBatchsize()) {
          setBatchsize(other.getBatchsize());
        }
        if (other.hasCropsize()) {
          setCropsize(other.getCropsize());
        }
        if (other.hasMirror()) {
          setMirror(other.getMirror());
        }
        if (blobsBuilder_ == null) {
          if (!other.blobs_.isEmpty()) {
            if (blobs_.isEmpty()) {
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00200000);
            } else {
              ensureBlobsIsMutable();
              blobs_.addAll(other.blobs_);
            }
            onChanged();
          }
        } else {
          if (!other.blobs_.isEmpty()) {
            if (blobsBuilder_.isEmpty()) {
              blobsBuilder_.dispose();
              blobsBuilder_ = null;
              blobs_ = other.blobs_;
              bitField0_ = (bitField0_ & ~0x00200000);
              blobsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getBlobsFieldBuilder() : null;
            } else {
              blobsBuilder_.addAllMessages(other.blobs_);
            }
          }
        }
        if (!other.blobsLr_.isEmpty()) {
          if (blobsLr_.isEmpty()) {
            blobsLr_ = other.blobsLr_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureBlobsLrIsMutable();
            blobsLr_.addAll(other.blobsLr_);
          }
          onChanged();
        }
        if (!other.weightDecay_.isEmpty()) {
          if (weightDecay_.isEmpty()) {
            weightDecay_ = other.weightDecay_;
            bitField0_ = (bitField0_ & ~0x00800000);
          } else {
            ensureWeightDecayIsMutable();
            weightDecay_.addAll(other.weightDecay_);
          }
          onChanged();
        }
        if (other.hasRandSkip()) {
          setRandSkip(other.getRandSkip());
        }
        if (other.hasDetFgThreshold()) {
          setDetFgThreshold(other.getDetFgThreshold());
        }
        if (other.hasDetBgThreshold()) {
          setDetBgThreshold(other.getDetBgThreshold());
        }
        if (other.hasDetFgFraction()) {
          setDetFgFraction(other.getDetFgFraction());
        }
        if (other.hasDetContextPad()) {
          setDetContextPad(other.getDetContextPad());
        }
        if (other.hasDetCropMode()) {
          bitField0_ |= 0x20000000;
          detCropMode_ = other.detCropMode_;
          onChanged();
        }
        if (other.hasNewNum()) {
          setNewNum(other.getNewNum());
        }
        if (other.hasNewChannels()) {
          setNewChannels(other.getNewChannels());
        }
        if (other.hasNewHeight()) {
          setNewHeight(other.getNewHeight());
        }
        if (other.hasNewWidth()) {
          setNewWidth(other.getNewWidth());
        }
        if (other.hasShuffleImages()) {
          setShuffleImages(other.getShuffleImages());
        }
        if (other.hasConcatDim()) {
          setConcatDim(other.getConcatDim());
        }
        if (other.hasHdf5OutputParam()) {
          mergeHdf5OutputParam(other.getHdf5OutputParam());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        caffe.Caffe.V0LayerParameter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (caffe.Caffe.V0LayerParameter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private java.lang.Object name_ = "";
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string name = 1;</code>
       *
       * <pre>
       * the layer name
       * </pre>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object type_ = "";
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string type = 2;</code>
       *
       * <pre>
       * the string to specify the layer type
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        type_ = value;
        onChanged();
        return this;
      }

      private int numOutput_ ;
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public boolean hasNumOutput() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public int getNumOutput() {
        return numOutput_;
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public Builder setNumOutput(int value) {
        bitField0_ |= 0x00000004;
        numOutput_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 num_output = 3;</code>
       *
       * <pre>
       * Parameters to specify layers with inner products.
       * </pre>
       */
      public Builder clearNumOutput() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numOutput_ = 0;
        onChanged();
        return this;
      }

      private boolean biasterm_ = true;
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean hasBiasterm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public boolean getBiasterm() {
        return biasterm_;
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder setBiasterm(boolean value) {
        bitField0_ |= 0x00000008;
        biasterm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool biasterm = 4 [default = true];</code>
       *
       * <pre>
       * whether to have bias terms
       * </pre>
       */
      public Builder clearBiasterm() {
        bitField0_ = (bitField0_ & ~0x00000008);
        biasterm_ = true;
        onChanged();
        return this;
      }

      private caffe.Caffe.FillerParameter weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> weightFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public boolean hasWeightFiller() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter getWeightFiller() {
        if (weightFillerBuilder_ == null) {
          return weightFiller_;
        } else {
          return weightFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          weightFiller_ = value;
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder setWeightFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = builderForValue.build();
          onChanged();
        } else {
          weightFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder mergeWeightFiller(caffe.Caffe.FillerParameter value) {
        if (weightFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              weightFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            weightFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(weightFiller_).mergeFrom(value).buildPartial();
          } else {
            weightFiller_ = value;
          }
          onChanged();
        } else {
          weightFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public Builder clearWeightFiller() {
        if (weightFillerBuilder_ == null) {
          weightFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          weightFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getWeightFillerBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getWeightFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getWeightFillerOrBuilder() {
        if (weightFillerBuilder_ != null) {
          return weightFillerBuilder_.getMessageOrBuilder();
        } else {
          return weightFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter weight_filler = 5;</code>
       *
       * <pre>
       * The filler for the weight
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getWeightFillerFieldBuilder() {
        if (weightFillerBuilder_ == null) {
          weightFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  getWeightFiller(),
                  getParentForChildren(),
                  isClean());
          weightFiller_ = null;
        }
        return weightFillerBuilder_;
      }

      private caffe.Caffe.FillerParameter biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> biasFillerBuilder_;
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public boolean hasBiasFiller() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter getBiasFiller() {
        if (biasFillerBuilder_ == null) {
          return biasFiller_;
        } else {
          return biasFillerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          biasFiller_ = value;
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder setBiasFiller(
          caffe.Caffe.FillerParameter.Builder builderForValue) {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = builderForValue.build();
          onChanged();
        } else {
          biasFillerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder mergeBiasFiller(caffe.Caffe.FillerParameter value) {
        if (biasFillerBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              biasFiller_ != caffe.Caffe.FillerParameter.getDefaultInstance()) {
            biasFiller_ =
              caffe.Caffe.FillerParameter.newBuilder(biasFiller_).mergeFrom(value).buildPartial();
          } else {
            biasFiller_ = value;
          }
          onChanged();
        } else {
          biasFillerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public Builder clearBiasFiller() {
        if (biasFillerBuilder_ == null) {
          biasFiller_ = caffe.Caffe.FillerParameter.getDefaultInstance();
          onChanged();
        } else {
          biasFillerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameter.Builder getBiasFillerBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getBiasFillerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      public caffe.Caffe.FillerParameterOrBuilder getBiasFillerOrBuilder() {
        if (biasFillerBuilder_ != null) {
          return biasFillerBuilder_.getMessageOrBuilder();
        } else {
          return biasFiller_;
        }
      }
      /**
       * <code>optional .caffe.FillerParameter bias_filler = 6;</code>
       *
       * <pre>
       * The filler for the bias
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder> 
          getBiasFillerFieldBuilder() {
        if (biasFillerBuilder_ == null) {
          biasFillerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.FillerParameter, caffe.Caffe.FillerParameter.Builder, caffe.Caffe.FillerParameterOrBuilder>(
                  getBiasFiller(),
                  getParentForChildren(),
                  isClean());
          biasFiller_ = null;
        }
        return biasFillerBuilder_;
      }

      private int pad_ ;
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public boolean hasPad() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public int getPad() {
        return pad_;
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder setPad(int value) {
        bitField0_ |= 0x00000040;
        pad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pad = 7 [default = 0];</code>
       *
       * <pre>
       * The padding size
       * </pre>
       */
      public Builder clearPad() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pad_ = 0;
        onChanged();
        return this;
      }

      private int kernelsize_ ;
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public boolean hasKernelsize() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public int getKernelsize() {
        return kernelsize_;
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder setKernelsize(int value) {
        bitField0_ |= 0x00000080;
        kernelsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 kernelsize = 8;</code>
       *
       * <pre>
       * The kernel size
       * </pre>
       */
      public Builder clearKernelsize() {
        bitField0_ = (bitField0_ & ~0x00000080);
        kernelsize_ = 0;
        onChanged();
        return this;
      }

      private int group_ = 1;
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public boolean hasGroup() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public int getGroup() {
        return group_;
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder setGroup(int value) {
        bitField0_ |= 0x00000100;
        group_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 group = 9 [default = 1];</code>
       *
       * <pre>
       * The group size for group conv
       * </pre>
       */
      public Builder clearGroup() {
        bitField0_ = (bitField0_ & ~0x00000100);
        group_ = 1;
        onChanged();
        return this;
      }

      private int stride_ = 1;
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public boolean hasStride() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public int getStride() {
        return stride_;
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder setStride(int value) {
        bitField0_ |= 0x00000200;
        stride_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stride = 10 [default = 1];</code>
       *
       * <pre>
       * The stride
       * </pre>
       */
      public Builder clearStride() {
        bitField0_ = (bitField0_ & ~0x00000200);
        stride_ = 1;
        onChanged();
        return this;
      }

      private caffe.Caffe.V0LayerParameter.PoolMethod pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public boolean hasPool() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public caffe.Caffe.V0LayerParameter.PoolMethod getPool() {
        return pool_;
      }
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder setPool(caffe.Caffe.V0LayerParameter.PoolMethod value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        pool_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .caffe.V0LayerParameter.PoolMethod pool = 11 [default = MAX];</code>
       *
       * <pre>
       * The pooling method
       * </pre>
       */
      public Builder clearPool() {
        bitField0_ = (bitField0_ & ~0x00000400);
        pool_ = caffe.Caffe.V0LayerParameter.PoolMethod.MAX;
        onChanged();
        return this;
      }

      private float dropoutRatio_ = 0.5F;
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public boolean hasDropoutRatio() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public float getDropoutRatio() {
        return dropoutRatio_;
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder setDropoutRatio(float value) {
        bitField0_ |= 0x00000800;
        dropoutRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dropout_ratio = 12 [default = 0.5];</code>
       *
       * <pre>
       * dropout ratio
       * </pre>
       */
      public Builder clearDropoutRatio() {
        bitField0_ = (bitField0_ & ~0x00000800);
        dropoutRatio_ = 0.5F;
        onChanged();
        return this;
      }

      private int localSize_ = 5;
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasLocalSize() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public int getLocalSize() {
        return localSize_;
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setLocalSize(int value) {
        bitField0_ |= 0x00001000;
        localSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 local_size = 13 [default = 5];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearLocalSize() {
        bitField0_ = (bitField0_ & ~0x00001000);
        localSize_ = 5;
        onChanged();
        return this;
      }

      private float alpha_ = 1F;
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasAlpha() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public float getAlpha() {
        return alpha_;
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setAlpha(float value) {
        bitField0_ |= 0x00002000;
        alpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alpha = 14 [default = 1];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearAlpha() {
        bitField0_ = (bitField0_ & ~0x00002000);
        alpha_ = 1F;
        onChanged();
        return this;
      }

      private float beta_ = 0.75F;
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public boolean hasBeta() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public float getBeta() {
        return beta_;
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder setBeta(float value) {
        bitField0_ |= 0x00004000;
        beta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float beta = 15 [default = 0.75];</code>
       *
       * <pre>
       * for local response norm
       * </pre>
       */
      public Builder clearBeta() {
        bitField0_ = (bitField0_ & ~0x00004000);
        beta_ = 0.75F;
        onChanged();
        return this;
      }

      private java.lang.Object source_ = "";
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public boolean hasSource() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public java.lang.String getSource() {
        java.lang.Object ref = source_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            source_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSourceBytes() {
        java.lang.Object ref = source_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          source_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder setSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        source_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder clearSource() {
        bitField0_ = (bitField0_ & ~0x00008000);
        source_ = getDefaultInstance().getSource();
        onChanged();
        return this;
      }
      /**
       * <code>optional string source = 16;</code>
       *
       * <pre>
       * For data layers, specify the data source
       * </pre>
       */
      public Builder setSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00008000;
        source_ = value;
        onChanged();
        return this;
      }

      private float scale_ = 1F;
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00010000;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 17 [default = 1];</code>
       *
       * <pre>
       * For data pre-processing, we can do simple scaling and subtracting the
       * data mean, if provided. Note that the mean subtraction is always carried
       * out before scaling.
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00010000);
        scale_ = 1F;
        onChanged();
        return this;
      }

      private java.lang.Object meanfile_ = "";
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public boolean hasMeanfile() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public java.lang.String getMeanfile() {
        java.lang.Object ref = meanfile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            meanfile_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public com.google.protobuf.ByteString
          getMeanfileBytes() {
        java.lang.Object ref = meanfile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meanfile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder setMeanfile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        meanfile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder clearMeanfile() {
        bitField0_ = (bitField0_ & ~0x00020000);
        meanfile_ = getDefaultInstance().getMeanfile();
        onChanged();
        return this;
      }
      /**
       * <code>optional string meanfile = 18;</code>
       */
      public Builder setMeanfileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00020000;
        meanfile_ = value;
        onChanged();
        return this;
      }

      private int batchsize_ ;
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public boolean hasBatchsize() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public int getBatchsize() {
        return batchsize_;
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public Builder setBatchsize(int value) {
        bitField0_ |= 0x00040000;
        batchsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 batchsize = 19;</code>
       *
       * <pre>
       * For data layers, specify the batch size.
       * </pre>
       */
      public Builder clearBatchsize() {
        bitField0_ = (bitField0_ & ~0x00040000);
        batchsize_ = 0;
        onChanged();
        return this;
      }

      private int cropsize_ ;
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public boolean hasCropsize() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public int getCropsize() {
        return cropsize_;
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder setCropsize(int value) {
        bitField0_ |= 0x00080000;
        cropsize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cropsize = 20 [default = 0];</code>
       *
       * <pre>
       * For data layers, specify if we would like to randomly crop an image.
       * </pre>
       */
      public Builder clearCropsize() {
        bitField0_ = (bitField0_ & ~0x00080000);
        cropsize_ = 0;
        onChanged();
        return this;
      }

      private boolean mirror_ ;
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean hasMirror() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public boolean getMirror() {
        return mirror_;
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder setMirror(boolean value) {
        bitField0_ |= 0x00100000;
        mirror_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mirror = 21 [default = false];</code>
       *
       * <pre>
       * For data layers, specify if we want to randomly mirror data.
       * </pre>
       */
      public Builder clearMirror() {
        bitField0_ = (bitField0_ & ~0x00100000);
        mirror_ = false;
        onChanged();
        return this;
      }

      private java.util.List<caffe.Caffe.BlobProto> blobs_ =
        java.util.Collections.emptyList();
      private void ensureBlobsIsMutable() {
        if (!((bitField0_ & 0x00200000) == 0x00200000)) {
          blobs_ = new java.util.ArrayList<caffe.Caffe.BlobProto>(blobs_);
          bitField0_ |= 0x00200000;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> blobsBuilder_;

      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto> getBlobsList() {
        if (blobsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(blobs_);
        } else {
          return blobsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public int getBlobsCount() {
        if (blobsBuilder_ == null) {
          return blobs_.size();
        } else {
          return blobsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto getBlobs(int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);
        } else {
          return blobsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.set(index, value);
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder setBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.set(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto value) {
        if (blobsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBlobsIsMutable();
          blobs_.add(index, value);
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addBlobs(
          int index, caffe.Caffe.BlobProto.Builder builderForValue) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.add(index, builderForValue.build());
          onChanged();
        } else {
          blobsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder addAllBlobs(
          java.lang.Iterable<? extends caffe.Caffe.BlobProto> values) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, blobs_);
          onChanged();
        } else {
          blobsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder clearBlobs() {
        if (blobsBuilder_ == null) {
          blobs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00200000);
          onChanged();
        } else {
          blobsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public Builder removeBlobs(int index) {
        if (blobsBuilder_ == null) {
          ensureBlobsIsMutable();
          blobs_.remove(index);
          onChanged();
        } else {
          blobsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder getBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProtoOrBuilder getBlobsOrBuilder(
          int index) {
        if (blobsBuilder_ == null) {
          return blobs_.get(index);  } else {
          return blobsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<? extends caffe.Caffe.BlobProtoOrBuilder> 
           getBlobsOrBuilderList() {
        if (blobsBuilder_ != null) {
          return blobsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(blobs_);
        }
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder() {
        return getBlobsFieldBuilder().addBuilder(
            caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public caffe.Caffe.BlobProto.Builder addBlobsBuilder(
          int index) {
        return getBlobsFieldBuilder().addBuilder(
            index, caffe.Caffe.BlobProto.getDefaultInstance());
      }
      /**
       * <code>repeated .caffe.BlobProto blobs = 50;</code>
       *
       * <pre>
       * The blobs containing the numeric parameters of the layer
       * </pre>
       */
      public java.util.List<caffe.Caffe.BlobProto.Builder> 
           getBlobsBuilderList() {
        return getBlobsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder> 
          getBlobsFieldBuilder() {
        if (blobsBuilder_ == null) {
          blobsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              caffe.Caffe.BlobProto, caffe.Caffe.BlobProto.Builder, caffe.Caffe.BlobProtoOrBuilder>(
                  blobs_,
                  ((bitField0_ & 0x00200000) == 0x00200000),
                  getParentForChildren(),
                  isClean());
          blobs_ = null;
        }
        return blobsBuilder_;
      }

      private java.util.List<java.lang.Float> blobsLr_ = java.util.Collections.emptyList();
      private void ensureBlobsLrIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          blobsLr_ = new java.util.ArrayList<java.lang.Float>(blobsLr_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getBlobsLrList() {
        return java.util.Collections.unmodifiableList(blobsLr_);
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public int getBlobsLrCount() {
        return blobsLr_.size();
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public float getBlobsLr(int index) {
        return blobsLr_.get(index);
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder setBlobsLr(
          int index, float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addBlobsLr(float value) {
        ensureBlobsLrIsMutable();
        blobsLr_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder addAllBlobsLr(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureBlobsLrIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blobsLr_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float blobs_lr = 51;</code>
       *
       * <pre>
       * The ratio that is multiplied on the global learning rate. If you want to
       * set the learning ratio for one blob, you need to set it for all blobs.
       * </pre>
       */
      public Builder clearBlobsLr() {
        blobsLr_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> weightDecay_ = java.util.Collections.emptyList();
      private void ensureWeightDecayIsMutable() {
        if (!((bitField0_ & 0x00800000) == 0x00800000)) {
          weightDecay_ = new java.util.ArrayList<java.lang.Float>(weightDecay_);
          bitField0_ |= 0x00800000;
         }
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public java.util.List<java.lang.Float>
          getWeightDecayList() {
        return java.util.Collections.unmodifiableList(weightDecay_);
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public int getWeightDecayCount() {
        return weightDecay_.size();
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public float getWeightDecay(int index) {
        return weightDecay_.get(index);
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder setWeightDecay(
          int index, float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addWeightDecay(float value) {
        ensureWeightDecayIsMutable();
        weightDecay_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder addAllWeightDecay(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureWeightDecayIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, weightDecay_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float weight_decay = 52;</code>
       *
       * <pre>
       * The weight decay that is multiplied on the global weight decay.
       * </pre>
       */
      public Builder clearWeightDecay() {
        weightDecay_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00800000);
        onChanged();
        return this;
      }

      private int randSkip_ ;
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public boolean hasRandSkip() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public int getRandSkip() {
        return randSkip_;
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder setRandSkip(int value) {
        bitField0_ |= 0x01000000;
        randSkip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rand_skip = 53 [default = 0];</code>
       *
       * <pre>
       * The rand_skip variable is for the data layer to skip a few data points
       * to avoid all asynchronous sgd clients to start at the same point. The skip
       * point would be set as rand_skip * rand(0,1). Note that rand_skip should not
       * be larger than the number of keys in the leveldb.
       * </pre>
       */
      public Builder clearRandSkip() {
        bitField0_ = (bitField0_ & ~0x01000000);
        randSkip_ = 0;
        onChanged();
        return this;
      }

      private float detFgThreshold_ = 0.5F;
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public boolean hasDetFgThreshold() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public float getDetFgThreshold() {
        return detFgThreshold_;
      }
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public Builder setDetFgThreshold(float value) {
        bitField0_ |= 0x02000000;
        detFgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float det_fg_threshold = 54 [default = 0.5];</code>
       *
       * <pre>
       * Fields related to detection (det_*)
       * foreground (object) overlap threshold
       * </pre>
       */
      public Builder clearDetFgThreshold() {
        bitField0_ = (bitField0_ & ~0x02000000);
        detFgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      private float detBgThreshold_ = 0.5F;
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public boolean hasDetBgThreshold() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public float getDetBgThreshold() {
        return detBgThreshold_;
      }
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public Builder setDetBgThreshold(float value) {
        bitField0_ |= 0x04000000;
        detBgThreshold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float det_bg_threshold = 55 [default = 0.5];</code>
       *
       * <pre>
       * background (non-object) overlap threshold
       * </pre>
       */
      public Builder clearDetBgThreshold() {
        bitField0_ = (bitField0_ & ~0x04000000);
        detBgThreshold_ = 0.5F;
        onChanged();
        return this;
      }

      private float detFgFraction_ = 0.25F;
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public boolean hasDetFgFraction() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public float getDetFgFraction() {
        return detFgFraction_;
      }
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder setDetFgFraction(float value) {
        bitField0_ |= 0x08000000;
        detFgFraction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float det_fg_fraction = 56 [default = 0.25];</code>
       *
       * <pre>
       * Fraction of batch that should be foreground objects
       * </pre>
       */
      public Builder clearDetFgFraction() {
        bitField0_ = (bitField0_ & ~0x08000000);
        detFgFraction_ = 0.25F;
        onChanged();
        return this;
      }

      private int detContextPad_ ;
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public boolean hasDetContextPad() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public int getDetContextPad() {
        return detContextPad_;
      }
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder setDetContextPad(int value) {
        bitField0_ |= 0x10000000;
        detContextPad_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 det_context_pad = 58 [default = 0];</code>
       *
       * <pre>
       * Amount of contextual padding to add around a window
       * (used only by the window_data_layer)
       * </pre>
       */
      public Builder clearDetContextPad() {
        bitField0_ = (bitField0_ & ~0x10000000);
        detContextPad_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object detCropMode_ = "warp";
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public boolean hasDetCropMode() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public java.lang.String getDetCropMode() {
        java.lang.Object ref = detCropMode_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            detCropMode_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDetCropModeBytes() {
        java.lang.Object ref = detCropMode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          detCropMode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setDetCropMode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x20000000;
        detCropMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder clearDetCropMode() {
        bitField0_ = (bitField0_ & ~0x20000000);
        detCropMode_ = getDefaultInstance().getDetCropMode();
        onChanged();
        return this;
      }
      /**
       * <code>optional string det_crop_mode = 59 [default = "warp"];</code>
       *
       * <pre>
       * Mode for cropping out a detection window
       * warp: cropped window is warped to a fixed size and aspect ratio
       * square: the tightest square around the window is cropped
       * </pre>
       */
      public Builder setDetCropModeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x20000000;
        detCropMode_ = value;
        onChanged();
        return this;
      }

      private int newNum_ ;
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public boolean hasNewNum() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public int getNewNum() {
        return newNum_;
      }
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public Builder setNewNum(int value) {
        bitField0_ |= 0x40000000;
        newNum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_num = 60 [default = 0];</code>
       *
       * <pre>
       * For ReshapeLayer, one needs to specify the new dimensions.
       * </pre>
       */
      public Builder clearNewNum() {
        bitField0_ = (bitField0_ & ~0x40000000);
        newNum_ = 0;
        onChanged();
        return this;
      }

      private int newChannels_ ;
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public boolean hasNewChannels() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public int getNewChannels() {
        return newChannels_;
      }
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public Builder setNewChannels(int value) {
        bitField0_ |= 0x80000000;
        newChannels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_channels = 61 [default = 0];</code>
       */
      public Builder clearNewChannels() {
        bitField0_ = (bitField0_ & ~0x80000000);
        newChannels_ = 0;
        onChanged();
        return this;
      }

      private int newHeight_ ;
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public boolean hasNewHeight() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public int getNewHeight() {
        return newHeight_;
      }
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public Builder setNewHeight(int value) {
        bitField1_ |= 0x00000001;
        newHeight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_height = 62 [default = 0];</code>
       */
      public Builder clearNewHeight() {
        bitField1_ = (bitField1_ & ~0x00000001);
        newHeight_ = 0;
        onChanged();
        return this;
      }

      private int newWidth_ ;
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public boolean hasNewWidth() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public int getNewWidth() {
        return newWidth_;
      }
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public Builder setNewWidth(int value) {
        bitField1_ |= 0x00000002;
        newWidth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 new_width = 63 [default = 0];</code>
       */
      public Builder clearNewWidth() {
        bitField1_ = (bitField1_ & ~0x00000002);
        newWidth_ = 0;
        onChanged();
        return this;
      }

      private boolean shuffleImages_ ;
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public boolean hasShuffleImages() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public boolean getShuffleImages() {
        return shuffleImages_;
      }
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder setShuffleImages(boolean value) {
        bitField1_ |= 0x00000004;
        shuffleImages_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool shuffle_images = 64 [default = false];</code>
       *
       * <pre>
       * Whether or not ImageLayer should shuffle the list of files at every epoch.
       * It will also resize images if new_height or new_width are not zero.
       * </pre>
       */
      public Builder clearShuffleImages() {
        bitField1_ = (bitField1_ & ~0x00000004);
        shuffleImages_ = false;
        onChanged();
        return this;
      }

      private int concatDim_ = 1;
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public boolean hasConcatDim() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public int getConcatDim() {
        return concatDim_;
      }
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public Builder setConcatDim(int value) {
        bitField1_ |= 0x00000008;
        concatDim_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 concat_dim = 65 [default = 1];</code>
       *
       * <pre>
       * For ConcatLayer, one needs to specify the dimension for concatenation, and
       * the other dimensions must be the same for all the bottom blobs.
       * By default it will concatenate blobs along the channels dimension.
       * </pre>
       */
      public Builder clearConcatDim() {
        bitField1_ = (bitField1_ & ~0x00000008);
        concatDim_ = 1;
        onChanged();
        return this;
      }

      private caffe.Caffe.HDF5OutputParameter hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> hdf5OutputParamBuilder_;
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public boolean hasHdf5OutputParam() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public caffe.Caffe.HDF5OutputParameter getHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          return hdf5OutputParam_;
        } else {
          return hdf5OutputParamBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder setHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hdf5OutputParam_ = value;
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder setHdf5OutputParam(
          caffe.Caffe.HDF5OutputParameter.Builder builderForValue) {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = builderForValue.build();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder mergeHdf5OutputParam(caffe.Caffe.HDF5OutputParameter value) {
        if (hdf5OutputParamBuilder_ == null) {
          if (((bitField1_ & 0x00000010) == 0x00000010) &&
              hdf5OutputParam_ != caffe.Caffe.HDF5OutputParameter.getDefaultInstance()) {
            hdf5OutputParam_ =
              caffe.Caffe.HDF5OutputParameter.newBuilder(hdf5OutputParam_).mergeFrom(value).buildPartial();
          } else {
            hdf5OutputParam_ = value;
          }
          onChanged();
        } else {
          hdf5OutputParamBuilder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public Builder clearHdf5OutputParam() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParam_ = caffe.Caffe.HDF5OutputParameter.getDefaultInstance();
          onChanged();
        } else {
          hdf5OutputParamBuilder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public caffe.Caffe.HDF5OutputParameter.Builder getHdf5OutputParamBuilder() {
        bitField1_ |= 0x00000010;
        onChanged();
        return getHdf5OutputParamFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      public caffe.Caffe.HDF5OutputParameterOrBuilder getHdf5OutputParamOrBuilder() {
        if (hdf5OutputParamBuilder_ != null) {
          return hdf5OutputParamBuilder_.getMessageOrBuilder();
        } else {
          return hdf5OutputParam_;
        }
      }
      /**
       * <code>optional .caffe.HDF5OutputParameter hdf5_output_param = 1001;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder> 
          getHdf5OutputParamFieldBuilder() {
        if (hdf5OutputParamBuilder_ == null) {
          hdf5OutputParamBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              caffe.Caffe.HDF5OutputParameter, caffe.Caffe.HDF5OutputParameter.Builder, caffe.Caffe.HDF5OutputParameterOrBuilder>(
                  getHdf5OutputParam(),
                  getParentForChildren(),
                  isClean());
          hdf5OutputParam_ = null;
        }
        return hdf5OutputParamBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:caffe.V0LayerParameter)
    }

    static {
      defaultInstance = new V0LayerParameter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:caffe.V0LayerParameter)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_BlobProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_BlobProto_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_BlobProtoVector_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_BlobProtoVector_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_Datum_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_Datum_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_FillerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_FillerParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_NetParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_NetParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SolverParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SolverParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SolverState_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SolverState_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_LayerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_LayerParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ConcatParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ConcatParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ConvolutionParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ConvolutionParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_DataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_DataParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_DropoutParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_DropoutParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_HDF5DataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_HDF5DataParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_HDF5OutputParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_HDF5OutputParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_ImageDataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_ImageDataParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_InfogainLossParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_InfogainLossParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_InnerProductParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_InnerProductParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_LRNParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_LRNParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_MemoryDataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_MemoryDataParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_PoolingParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_PoolingParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_SppParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_SppParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_PowerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_PowerParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_WindowDataParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_WindowDataParameter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_caffe_V0LayerParameter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_caffe_V0LayerParameter_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\013caffe.proto\022\005caffe\"y\n\tBlobProto\022\016\n\003num" +
      "\030\001 \001(\005:\0010\022\023\n\010channels\030\002 \001(\005:\0010\022\021\n\006height" +
      "\030\003 \001(\005:\0010\022\020\n\005width\030\004 \001(\005:\0010\022\020\n\004data\030\005 \003(" +
      "\002B\002\020\001\022\020\n\004diff\030\006 \003(\002B\002\020\001\"2\n\017BlobProtoVect" +
      "or\022\037\n\005blobs\030\001 \003(\0132\020.caffe.BlobProto\"i\n\005D" +
      "atum\022\020\n\010channels\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\r" +
      "\n\005width\030\003 \001(\005\022\014\n\004data\030\004 \001(\014\022\r\n\005label\030\005 \001" +
      "(\005\022\022\n\nfloat_data\030\006 \003(\002\"\220\001\n\017FillerParamet" +
      "er\022\026\n\004type\030\001 \001(\t:\010constant\022\020\n\005value\030\002 \001(" +
      "\002:\0010\022\016\n\003min\030\003 \001(\002:\0010\022\016\n\003max\030\004 \001(\002:\0011\022\017\n\004",
      "mean\030\005 \001(\002:\0010\022\016\n\003std\030\006 \001(\002:\0011\022\022\n\006sparse\030" +
      "\007 \001(\005:\002-1\"\204\001\n\014NetParameter\022\014\n\004name\030\001 \001(\t" +
      "\022%\n\006layers\030\002 \003(\0132\025.caffe.LayerParameter\022" +
      "\r\n\005input\030\003 \003(\t\022\021\n\tinput_dim\030\004 \003(\005\022\035\n\016for" +
      "ce_backward\030\005 \001(\010:\005false\"\377\003\n\017SolverParam" +
      "eter\022\021\n\ttrain_net\030\001 \001(\t\022\020\n\010test_net\030\002 \001(" +
      "\t\022\024\n\ttest_iter\030\003 \001(\005:\0010\022\030\n\rtest_interval" +
      "\030\004 \001(\005:\0010\022 \n\021test_compute_loss\030\023 \001(\010:\005fa" +
      "lse\022\017\n\007base_lr\030\005 \001(\002\022\017\n\007display\030\006 \001(\005\022\020\n" +
      "\010max_iter\030\007 \001(\005\022\021\n\tlr_policy\030\010 \001(\t\022\r\n\005ga",
      "mma\030\t \001(\002\022\r\n\005power\030\n \001(\002\022\020\n\010momentum\030\013 \001" +
      "(\002\022\024\n\014weight_decay\030\014 \001(\002\022\020\n\010stepsize\030\r \001" +
      "(\005\022\023\n\010snapshot\030\016 \001(\005:\0010\022\027\n\017snapshot_pref" +
      "ix\030\017 \001(\t\022\034\n\rsnapshot_diff\030\020 \001(\010:\005false\022;" +
      "\n\013solver_mode\030\021 \001(\0162!.caffe.SolverParame" +
      "ter.SolverMode:\003GPU\022\024\n\tdevice_id\030\022 \001(\005:\001" +
      "0\022\027\n\013random_seed\030\024 \001(\003:\002-1\"\036\n\nSolverMode" +
      "\022\007\n\003CPU\020\000\022\007\n\003GPU\020\001\"S\n\013SolverState\022\014\n\004ite" +
      "r\030\001 \001(\005\022\023\n\013learned_net\030\002 \001(\t\022!\n\007history\030" +
      "\003 \003(\0132\020.caffe.BlobProto\"\274\013\n\016LayerParamet",
      "er\022\016\n\006bottom\030\002 \003(\t\022\013\n\003top\030\003 \003(\t\022\014\n\004name\030" +
      "\004 \001(\t\022-\n\004type\030\005 \001(\0162\037.caffe.LayerParamet" +
      "er.LayerType\022\037\n\005blobs\030\006 \003(\0132\020.caffe.Blob" +
      "Proto\022\020\n\010blobs_lr\030\007 \003(\002\022\024\n\014weight_decay\030" +
      "\010 \003(\002\022,\n\014concat_param\030\t \001(\0132\026.caffe.Conc" +
      "atParameter\0226\n\021convolution_param\030\n \001(\0132\033" +
      ".caffe.ConvolutionParameter\022(\n\ndata_para" +
      "m\030\013 \001(\0132\024.caffe.DataParameter\022.\n\rdropout" +
      "_param\030\014 \001(\0132\027.caffe.DropoutParameter\0221\n" +
      "\017hdf5_data_param\030\r \001(\0132\030.caffe.HDF5DataP",
      "arameter\0225\n\021hdf5_output_param\030\016 \001(\0132\032.ca" +
      "ffe.HDF5OutputParameter\0223\n\020image_data_pa" +
      "ram\030\017 \001(\0132\031.caffe.ImageDataParameter\0229\n\023" +
      "infogain_loss_param\030\020 \001(\0132\034.caffe.Infoga" +
      "inLossParameter\0229\n\023inner_product_param\030\021" +
      " \001(\0132\034.caffe.InnerProductParameter\022&\n\tlr" +
      "n_param\030\022 \001(\0132\023.caffe.LRNParameter\0225\n\021me" +
      "mory_data_param\030\026 \001(\0132\032.caffe.MemoryData" +
      "Parameter\022.\n\rpooling_param\030\023 \001(\0132\027.caffe" +
      ".PoolingParameter\022&\n\tspp_param\030w \001(\0132\023.c",
      "affe.SppParameter\022*\n\013power_param\030\025 \001(\0132\025" +
      ".caffe.PowerParameter\0225\n\021window_data_par" +
      "am\030\024 \001(\0132\032.caffe.WindowDataParameter\022&\n\005" +
      "layer\030\001 \001(\0132\027.caffe.V0LayerParameter\"\357\003\n" +
      "\tLayerType\022\010\n\004NONE\020\000\022\014\n\010ACCURACY\020\001\022\010\n\004BN" +
      "LL\020\002\022\n\n\006CONCAT\020\003\022\017\n\013CONVOLUTION\020\004\022\010\n\004DAT" +
      "A\020\005\022\013\n\007DROPOUT\020\006\022\022\n\016EUCLIDEAN_LOSS\020\007\022\023\n\017" +
      "ELTWISE_PRODUCT\020\031\022\013\n\007FLATTEN\020\010\022\r\n\tHDF5_D" +
      "ATA\020\t\022\017\n\013HDF5_OUTPUT\020\n\022\016\n\nHINGE_LOSS\020\034\022\n" +
      "\n\006IM2COL\020\013\022\016\n\nIMAGE_DATA\020\014\022\021\n\rINFOGAIN_L",
      "OSS\020\r\022\021\n\rINNER_PRODUCT\020\016\022\007\n\003LRN\020\017\022\017\n\013MEM" +
      "ORY_DATA\020\035\022\035\n\031MULTINOMIAL_LOGISTIC_LOSS\020" +
      "\020\022\013\n\007POOLING\020\021\022\010\n\003SPP\020\202\001\022\t\n\005POWER\020\032\022\010\n\004R" +
      "ELU\020\022\022\013\n\007SIGMOID\020\023\022\036\n\032SIGMOID_CROSS_ENTR" +
      "OPY_LOSS\020\033\022\013\n\007SOFTMAX\020\024\022\020\n\014SOFTMAX_LOSS\020" +
      "\025\022\t\n\005SPLIT\020\026\022\010\n\004TANH\020\027\022\017\n\013WINDOW_DATA\020\030\022" +
      "\r\n\010SOFTPLUS\020\201\001\"(\n\017ConcatParameter\022\025\n\ncon" +
      "cat_dim\030\001 \001(\r:\0011\"\351\001\n\024ConvolutionParamete" +
      "r\022\022\n\nnum_output\030\001 \001(\r\022\027\n\tbias_term\030\002 \001(\010" +
      ":\004true\022\016\n\003pad\030\003 \001(\r:\0010\022\023\n\013kernel_size\030\004 ",
      "\001(\r\022\020\n\005group\030\005 \001(\r:\0011\022\021\n\006stride\030\006 \001(\r:\0011" +
      "\022-\n\rweight_filler\030\007 \001(\0132\026.caffe.FillerPa" +
      "rameter\022+\n\013bias_filler\030\010 \001(\0132\026.caffe.Fil" +
      "lerParameter\"\233\001\n\rDataParameter\022\016\n\006source" +
      "\030\001 \001(\t\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 " +
      "\001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001" +
      "(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005false\022\024\n\trand_ski" +
      "p\030\007 \001(\r:\0010\".\n\020DropoutParameter\022\032\n\rdropou" +
      "t_ratio\030\001 \001(\002:\0030.5\"7\n\021HDF5DataParameter\022" +
      "\016\n\006source\030\001 \001(\t\022\022\n\nbatch_size\030\002 \001(\r\"(\n\023H",
      "DF5OutputParameter\022\021\n\tfile_name\030\001 \001(\t\"\345\001" +
      "\n\022ImageDataParameter\022\016\n\006source\030\001 \001(\t\022\020\n\005" +
      "scale\030\002 \001(\002:\0011\022\021\n\tmean_file\030\003 \001(\t\022\022\n\nbat" +
      "ch_size\030\004 \001(\r\022\024\n\tcrop_size\030\005 \001(\r:\0010\022\025\n\006m" +
      "irror\030\006 \001(\010:\005false\022\024\n\trand_skip\030\007 \001(\r:\0010" +
      "\022\026\n\007shuffle\030\010 \001(\010:\005false\022\025\n\nnew_height\030\t" +
      " \001(\r:\0010\022\024\n\tnew_width\030\n \001(\r:\0010\"\'\n\025Infogai" +
      "nLossParameter\022\016\n\006source\030\001 \001(\t\"\240\001\n\025Inner" +
      "ProductParameter\022\022\n\nnum_output\030\001 \001(\r\022\027\n\t" +
      "bias_term\030\002 \001(\010:\004true\022-\n\rweight_filler\030\003",
      " \001(\0132\026.caffe.FillerParameter\022+\n\013bias_fil" +
      "ler\030\004 \001(\0132\026.caffe.FillerParameter\"\310\001\n\014LR" +
      "NParameter\022\025\n\nlocal_size\030\001 \001(\r:\0015\022\020\n\005alp" +
      "ha\030\002 \001(\002:\0011\022\022\n\004beta\030\003 \001(\002:\0040.75\022D\n\013norm_" +
      "region\030\004 \001(\0162\036.caffe.LRNParameter.NormRe" +
      "gion:\017ACROSS_CHANNELS\"5\n\nNormRegion\022\023\n\017A" +
      "CROSS_CHANNELS\020\000\022\022\n\016WITHIN_CHANNEL\020\001\"Z\n\023" +
      "MemoryDataParameter\022\022\n\nbatch_size\030\001 \001(\r\022" +
      "\020\n\010channels\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\r\n\005wid" +
      "th\030\004 \001(\r\"\261\001\n\020PoolingParameter\0225\n\004pool\030\001 ",
      "\001(\0162\".caffe.PoolingParameter.PoolMethod:" +
      "\003MAX\022\023\n\013kernel_size\030\002 \001(\r\022\021\n\006stride\030\003 \001(" +
      "\r:\0011\022\016\n\003pad\030\004 \001(\r:\0010\".\n\nPoolMethod\022\007\n\003MA" +
      "X\020\000\022\007\n\003AVE\020\001\022\016\n\nSTOCHASTIC\020\002\"%\n\014SppParam" +
      "eter\022\025\n\nlayers_num\030\002 \001(\r:\0013\"F\n\016PowerPara" +
      "meter\022\020\n\005power\030\001 \001(\002:\0011\022\020\n\005scale\030\002 \001(\002:\001" +
      "1\022\020\n\005shift\030\003 \001(\002:\0010\"\215\002\n\023WindowDataParame" +
      "ter\022\016\n\006source\030\001 \001(\t\022\020\n\005scale\030\002 \001(\002:\0011\022\021\n" +
      "\tmean_file\030\003 \001(\t\022\022\n\nbatch_size\030\004 \001(\r\022\024\n\t" +
      "crop_size\030\005 \001(\r:\0010\022\025\n\006mirror\030\006 \001(\010:\005fals",
      "e\022\031\n\014fg_threshold\030\007 \001(\002:\0030.5\022\031\n\014bg_thres" +
      "hold\030\010 \001(\002:\0030.5\022\031\n\013fg_fraction\030\t \001(\002:\0040." +
      "25\022\026\n\013context_pad\030\n \001(\r:\0010\022\027\n\tcrop_mode\030" +
      "\013 \001(\t:\004warp\"\357\007\n\020V0LayerParameter\022\014\n\004name" +
      "\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\022\n\nnum_output\030\003 \001(\r" +
      "\022\026\n\010biasterm\030\004 \001(\010:\004true\022-\n\rweight_fille" +
      "r\030\005 \001(\0132\026.caffe.FillerParameter\022+\n\013bias_" +
      "filler\030\006 \001(\0132\026.caffe.FillerParameter\022\016\n\003" +
      "pad\030\007 \001(\r:\0010\022\022\n\nkernelsize\030\010 \001(\r\022\020\n\005grou" +
      "p\030\t \001(\r:\0011\022\021\n\006stride\030\n \001(\r:\0011\0225\n\004pool\030\013 ",
      "\001(\0162\".caffe.V0LayerParameter.PoolMethod:" +
      "\003MAX\022\032\n\rdropout_ratio\030\014 \001(\002:\0030.5\022\025\n\nloca" +
      "l_size\030\r \001(\r:\0015\022\020\n\005alpha\030\016 \001(\002:\0011\022\022\n\004bet" +
      "a\030\017 \001(\002:\0040.75\022\016\n\006source\030\020 \001(\t\022\020\n\005scale\030\021" +
      " \001(\002:\0011\022\020\n\010meanfile\030\022 \001(\t\022\021\n\tbatchsize\030\023" +
      " \001(\r\022\023\n\010cropsize\030\024 \001(\r:\0010\022\025\n\006mirror\030\025 \001(" +
      "\010:\005false\022\037\n\005blobs\0302 \003(\0132\020.caffe.BlobProt" +
      "o\022\020\n\010blobs_lr\0303 \003(\002\022\024\n\014weight_decay\0304 \003(" +
      "\002\022\024\n\trand_skip\0305 \001(\r:\0010\022\035\n\020det_fg_thresh" +
      "old\0306 \001(\002:\0030.5\022\035\n\020det_bg_threshold\0307 \001(\002",
      ":\0030.5\022\035\n\017det_fg_fraction\0308 \001(\002:\0040.25\022\032\n\017" +
      "det_context_pad\030: \001(\r:\0010\022\033\n\rdet_crop_mod" +
      "e\030; \001(\t:\004warp\022\022\n\007new_num\030< \001(\005:\0010\022\027\n\014new" +
      "_channels\030= \001(\005:\0010\022\025\n\nnew_height\030> \001(\005:\001" +
      "0\022\024\n\tnew_width\030? \001(\005:\0010\022\035\n\016shuffle_image" +
      "s\030@ \001(\010:\005false\022\025\n\nconcat_dim\030A \001(\r:\0011\0226\n" +
      "\021hdf5_output_param\030\351\007 \001(\0132\032.caffe.HDF5Ou" +
      "tputParameter\".\n\nPoolMethod\022\007\n\003MAX\020\000\022\007\n\003" +
      "AVE\020\001\022\016\n\nSTOCHASTIC\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_caffe_BlobProto_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_caffe_BlobProto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_BlobProto_descriptor,
        new java.lang.String[] { "Num", "Channels", "Height", "Width", "Data", "Diff", });
    internal_static_caffe_BlobProtoVector_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_caffe_BlobProtoVector_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_BlobProtoVector_descriptor,
        new java.lang.String[] { "Blobs", });
    internal_static_caffe_Datum_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_caffe_Datum_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_Datum_descriptor,
        new java.lang.String[] { "Channels", "Height", "Width", "Data", "Label", "FloatData", });
    internal_static_caffe_FillerParameter_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_caffe_FillerParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_FillerParameter_descriptor,
        new java.lang.String[] { "Type", "Value", "Min", "Max", "Mean", "Std", "Sparse", });
    internal_static_caffe_NetParameter_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_caffe_NetParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_NetParameter_descriptor,
        new java.lang.String[] { "Name", "Layers", "Input", "InputDim", "ForceBackward", });
    internal_static_caffe_SolverParameter_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_caffe_SolverParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_SolverParameter_descriptor,
        new java.lang.String[] { "TrainNet", "TestNet", "TestIter", "TestInterval", "TestComputeLoss", "BaseLr", "Display", "MaxIter", "LrPolicy", "Gamma", "Power", "Momentum", "WeightDecay", "Stepsize", "Snapshot", "SnapshotPrefix", "SnapshotDiff", "SolverMode", "DeviceId", "RandomSeed", });
    internal_static_caffe_SolverState_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_caffe_SolverState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_SolverState_descriptor,
        new java.lang.String[] { "Iter", "LearnedNet", "History", });
    internal_static_caffe_LayerParameter_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_caffe_LayerParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_LayerParameter_descriptor,
        new java.lang.String[] { "Bottom", "Top", "Name", "Type", "Blobs", "BlobsLr", "WeightDecay", "ConcatParam", "ConvolutionParam", "DataParam", "DropoutParam", "Hdf5DataParam", "Hdf5OutputParam", "ImageDataParam", "InfogainLossParam", "InnerProductParam", "LrnParam", "MemoryDataParam", "PoolingParam", "SppParam", "PowerParam", "WindowDataParam", "Layer", });
    internal_static_caffe_ConcatParameter_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_caffe_ConcatParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_ConcatParameter_descriptor,
        new java.lang.String[] { "ConcatDim", });
    internal_static_caffe_ConvolutionParameter_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_caffe_ConvolutionParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_ConvolutionParameter_descriptor,
        new java.lang.String[] { "NumOutput", "BiasTerm", "Pad", "KernelSize", "Group", "Stride", "WeightFiller", "BiasFiller", });
    internal_static_caffe_DataParameter_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_caffe_DataParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_DataParameter_descriptor,
        new java.lang.String[] { "Source", "Scale", "MeanFile", "BatchSize", "CropSize", "Mirror", "RandSkip", });
    internal_static_caffe_DropoutParameter_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_caffe_DropoutParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_DropoutParameter_descriptor,
        new java.lang.String[] { "DropoutRatio", });
    internal_static_caffe_HDF5DataParameter_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_caffe_HDF5DataParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_HDF5DataParameter_descriptor,
        new java.lang.String[] { "Source", "BatchSize", });
    internal_static_caffe_HDF5OutputParameter_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_caffe_HDF5OutputParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_HDF5OutputParameter_descriptor,
        new java.lang.String[] { "FileName", });
    internal_static_caffe_ImageDataParameter_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_caffe_ImageDataParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_ImageDataParameter_descriptor,
        new java.lang.String[] { "Source", "Scale", "MeanFile", "BatchSize", "CropSize", "Mirror", "RandSkip", "Shuffle", "NewHeight", "NewWidth", });
    internal_static_caffe_InfogainLossParameter_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_caffe_InfogainLossParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_InfogainLossParameter_descriptor,
        new java.lang.String[] { "Source", });
    internal_static_caffe_InnerProductParameter_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_caffe_InnerProductParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_InnerProductParameter_descriptor,
        new java.lang.String[] { "NumOutput", "BiasTerm", "WeightFiller", "BiasFiller", });
    internal_static_caffe_LRNParameter_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_caffe_LRNParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_LRNParameter_descriptor,
        new java.lang.String[] { "LocalSize", "Alpha", "Beta", "NormRegion", });
    internal_static_caffe_MemoryDataParameter_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_caffe_MemoryDataParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_MemoryDataParameter_descriptor,
        new java.lang.String[] { "BatchSize", "Channels", "Height", "Width", });
    internal_static_caffe_PoolingParameter_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_caffe_PoolingParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_PoolingParameter_descriptor,
        new java.lang.String[] { "Pool", "KernelSize", "Stride", "Pad", });
    internal_static_caffe_SppParameter_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_caffe_SppParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_SppParameter_descriptor,
        new java.lang.String[] { "LayersNum", });
    internal_static_caffe_PowerParameter_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_caffe_PowerParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_PowerParameter_descriptor,
        new java.lang.String[] { "Power", "Scale", "Shift", });
    internal_static_caffe_WindowDataParameter_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_caffe_WindowDataParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_WindowDataParameter_descriptor,
        new java.lang.String[] { "Source", "Scale", "MeanFile", "BatchSize", "CropSize", "Mirror", "FgThreshold", "BgThreshold", "FgFraction", "ContextPad", "CropMode", });
    internal_static_caffe_V0LayerParameter_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_caffe_V0LayerParameter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_caffe_V0LayerParameter_descriptor,
        new java.lang.String[] { "Name", "Type", "NumOutput", "Biasterm", "WeightFiller", "BiasFiller", "Pad", "Kernelsize", "Group", "Stride", "Pool", "DropoutRatio", "LocalSize", "Alpha", "Beta", "Source", "Scale", "Meanfile", "Batchsize", "Cropsize", "Mirror", "Blobs", "BlobsLr", "WeightDecay", "RandSkip", "DetFgThreshold", "DetBgThreshold", "DetFgFraction", "DetContextPad", "DetCropMode", "NewNum", "NewChannels", "NewHeight", "NewWidth", "ShuffleImages", "ConcatDim", "Hdf5OutputParam", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
